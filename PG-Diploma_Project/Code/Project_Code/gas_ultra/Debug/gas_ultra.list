
gas_ultra.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009a7c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000470  08009c10  08009c10  0000ac10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a080  0800a080  0000c1d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800a080  0800a080  0000b080  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a088  0800a088  0000c1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a088  0800a088  0000b088  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a08c  0800a08c  0000b08c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800a090  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c1d8  2**0
                  CONTENTS
 10 .bss          000042b4  200001d8  200001d8  0000c1d8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000448c  2000448c  0000c1d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c1d8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015edd  00000000  00000000  0000c208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003391  00000000  00000000  000220e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012e0  00000000  00000000  00025478  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ea1  00000000  00000000  00026758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002525e  00000000  00000000  000275f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001500f  00000000  00000000  0004c857  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e254b  00000000  00000000  00061866  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00143db1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005f74  00000000  00000000  00143df4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000063  00000000  00000000  00149d68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009bf4 	.word	0x08009bf4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	08009bf4 	.word	0x08009bf4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000bfc:	f000 b96a 	b.w	8000ed4 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	460c      	mov	r4, r1
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d14e      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c24:	4694      	mov	ip, r2
 8000c26:	458c      	cmp	ip, r1
 8000c28:	4686      	mov	lr, r0
 8000c2a:	fab2 f282 	clz	r2, r2
 8000c2e:	d962      	bls.n	8000cf6 <__udivmoddi4+0xde>
 8000c30:	b14a      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c32:	f1c2 0320 	rsb	r3, r2, #32
 8000c36:	4091      	lsls	r1, r2
 8000c38:	fa20 f303 	lsr.w	r3, r0, r3
 8000c3c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c40:	4319      	orrs	r1, r3
 8000c42:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c46:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c4a:	fa1f f68c 	uxth.w	r6, ip
 8000c4e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c52:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c56:	fb07 1114 	mls	r1, r7, r4, r1
 8000c5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5e:	fb04 f106 	mul.w	r1, r4, r6
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000c6e:	f080 8112 	bcs.w	8000e96 <__udivmoddi4+0x27e>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 810f 	bls.w	8000e96 <__udivmoddi4+0x27e>
 8000c78:	3c02      	subs	r4, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a59      	subs	r1, r3, r1
 8000c7e:	fa1f f38e 	uxth.w	r3, lr
 8000c82:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c86:	fb07 1110 	mls	r1, r7, r0, r1
 8000c8a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c8e:	fb00 f606 	mul.w	r6, r0, r6
 8000c92:	429e      	cmp	r6, r3
 8000c94:	d90a      	bls.n	8000cac <__udivmoddi4+0x94>
 8000c96:	eb1c 0303 	adds.w	r3, ip, r3
 8000c9a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000c9e:	f080 80fc 	bcs.w	8000e9a <__udivmoddi4+0x282>
 8000ca2:	429e      	cmp	r6, r3
 8000ca4:	f240 80f9 	bls.w	8000e9a <__udivmoddi4+0x282>
 8000ca8:	4463      	add	r3, ip
 8000caa:	3802      	subs	r0, #2
 8000cac:	1b9b      	subs	r3, r3, r6
 8000cae:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	b11d      	cbz	r5, 8000cbe <__udivmoddi4+0xa6>
 8000cb6:	40d3      	lsrs	r3, r2
 8000cb8:	2200      	movs	r2, #0
 8000cba:	e9c5 3200 	strd	r3, r2, [r5]
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d905      	bls.n	8000cd2 <__udivmoddi4+0xba>
 8000cc6:	b10d      	cbz	r5, 8000ccc <__udivmoddi4+0xb4>
 8000cc8:	e9c5 0100 	strd	r0, r1, [r5]
 8000ccc:	2100      	movs	r1, #0
 8000cce:	4608      	mov	r0, r1
 8000cd0:	e7f5      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000cd2:	fab3 f183 	clz	r1, r3
 8000cd6:	2900      	cmp	r1, #0
 8000cd8:	d146      	bne.n	8000d68 <__udivmoddi4+0x150>
 8000cda:	42a3      	cmp	r3, r4
 8000cdc:	d302      	bcc.n	8000ce4 <__udivmoddi4+0xcc>
 8000cde:	4290      	cmp	r0, r2
 8000ce0:	f0c0 80f0 	bcc.w	8000ec4 <__udivmoddi4+0x2ac>
 8000ce4:	1a86      	subs	r6, r0, r2
 8000ce6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cea:	2001      	movs	r0, #1
 8000cec:	2d00      	cmp	r5, #0
 8000cee:	d0e6      	beq.n	8000cbe <__udivmoddi4+0xa6>
 8000cf0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cf4:	e7e3      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000cf6:	2a00      	cmp	r2, #0
 8000cf8:	f040 8090 	bne.w	8000e1c <__udivmoddi4+0x204>
 8000cfc:	eba1 040c 	sub.w	r4, r1, ip
 8000d00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d04:	fa1f f78c 	uxth.w	r7, ip
 8000d08:	2101      	movs	r1, #1
 8000d0a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d0e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d12:	fb08 4416 	mls	r4, r8, r6, r4
 8000d16:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d1a:	fb07 f006 	mul.w	r0, r7, r6
 8000d1e:	4298      	cmp	r0, r3
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x11c>
 8000d22:	eb1c 0303 	adds.w	r3, ip, r3
 8000d26:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x11a>
 8000d2c:	4298      	cmp	r0, r3
 8000d2e:	f200 80cd 	bhi.w	8000ecc <__udivmoddi4+0x2b4>
 8000d32:	4626      	mov	r6, r4
 8000d34:	1a1c      	subs	r4, r3, r0
 8000d36:	fa1f f38e 	uxth.w	r3, lr
 8000d3a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d3e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d42:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d46:	fb00 f707 	mul.w	r7, r0, r7
 8000d4a:	429f      	cmp	r7, r3
 8000d4c:	d908      	bls.n	8000d60 <__udivmoddi4+0x148>
 8000d4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d52:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000d56:	d202      	bcs.n	8000d5e <__udivmoddi4+0x146>
 8000d58:	429f      	cmp	r7, r3
 8000d5a:	f200 80b0 	bhi.w	8000ebe <__udivmoddi4+0x2a6>
 8000d5e:	4620      	mov	r0, r4
 8000d60:	1bdb      	subs	r3, r3, r7
 8000d62:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d66:	e7a5      	b.n	8000cb4 <__udivmoddi4+0x9c>
 8000d68:	f1c1 0620 	rsb	r6, r1, #32
 8000d6c:	408b      	lsls	r3, r1
 8000d6e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d72:	431f      	orrs	r7, r3
 8000d74:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d78:	fa04 f301 	lsl.w	r3, r4, r1
 8000d7c:	ea43 030c 	orr.w	r3, r3, ip
 8000d80:	40f4      	lsrs	r4, r6
 8000d82:	fa00 f801 	lsl.w	r8, r0, r1
 8000d86:	0c38      	lsrs	r0, r7, #16
 8000d88:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d8c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d90:	fa1f fc87 	uxth.w	ip, r7
 8000d94:	fb00 441e 	mls	r4, r0, lr, r4
 8000d98:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d9c:	fb0e f90c 	mul.w	r9, lr, ip
 8000da0:	45a1      	cmp	r9, r4
 8000da2:	fa02 f201 	lsl.w	r2, r2, r1
 8000da6:	d90a      	bls.n	8000dbe <__udivmoddi4+0x1a6>
 8000da8:	193c      	adds	r4, r7, r4
 8000daa:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000dae:	f080 8084 	bcs.w	8000eba <__udivmoddi4+0x2a2>
 8000db2:	45a1      	cmp	r9, r4
 8000db4:	f240 8081 	bls.w	8000eba <__udivmoddi4+0x2a2>
 8000db8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dbc:	443c      	add	r4, r7
 8000dbe:	eba4 0409 	sub.w	r4, r4, r9
 8000dc2:	fa1f f983 	uxth.w	r9, r3
 8000dc6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dca:	fb00 4413 	mls	r4, r0, r3, r4
 8000dce:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dd2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dd6:	45a4      	cmp	ip, r4
 8000dd8:	d907      	bls.n	8000dea <__udivmoddi4+0x1d2>
 8000dda:	193c      	adds	r4, r7, r4
 8000ddc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000de0:	d267      	bcs.n	8000eb2 <__udivmoddi4+0x29a>
 8000de2:	45a4      	cmp	ip, r4
 8000de4:	d965      	bls.n	8000eb2 <__udivmoddi4+0x29a>
 8000de6:	3b02      	subs	r3, #2
 8000de8:	443c      	add	r4, r7
 8000dea:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dee:	fba0 9302 	umull	r9, r3, r0, r2
 8000df2:	eba4 040c 	sub.w	r4, r4, ip
 8000df6:	429c      	cmp	r4, r3
 8000df8:	46ce      	mov	lr, r9
 8000dfa:	469c      	mov	ip, r3
 8000dfc:	d351      	bcc.n	8000ea2 <__udivmoddi4+0x28a>
 8000dfe:	d04e      	beq.n	8000e9e <__udivmoddi4+0x286>
 8000e00:	b155      	cbz	r5, 8000e18 <__udivmoddi4+0x200>
 8000e02:	ebb8 030e 	subs.w	r3, r8, lr
 8000e06:	eb64 040c 	sbc.w	r4, r4, ip
 8000e0a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e0e:	40cb      	lsrs	r3, r1
 8000e10:	431e      	orrs	r6, r3
 8000e12:	40cc      	lsrs	r4, r1
 8000e14:	e9c5 6400 	strd	r6, r4, [r5]
 8000e18:	2100      	movs	r1, #0
 8000e1a:	e750      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000e1c:	f1c2 0320 	rsb	r3, r2, #32
 8000e20:	fa20 f103 	lsr.w	r1, r0, r3
 8000e24:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e28:	fa24 f303 	lsr.w	r3, r4, r3
 8000e2c:	4094      	lsls	r4, r2
 8000e2e:	430c      	orrs	r4, r1
 8000e30:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e34:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e38:	fa1f f78c 	uxth.w	r7, ip
 8000e3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e40:	fb08 3110 	mls	r1, r8, r0, r3
 8000e44:	0c23      	lsrs	r3, r4, #16
 8000e46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e4a:	fb00 f107 	mul.w	r1, r0, r7
 8000e4e:	4299      	cmp	r1, r3
 8000e50:	d908      	bls.n	8000e64 <__udivmoddi4+0x24c>
 8000e52:	eb1c 0303 	adds.w	r3, ip, r3
 8000e56:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000e5a:	d22c      	bcs.n	8000eb6 <__udivmoddi4+0x29e>
 8000e5c:	4299      	cmp	r1, r3
 8000e5e:	d92a      	bls.n	8000eb6 <__udivmoddi4+0x29e>
 8000e60:	3802      	subs	r0, #2
 8000e62:	4463      	add	r3, ip
 8000e64:	1a5b      	subs	r3, r3, r1
 8000e66:	b2a4      	uxth	r4, r4
 8000e68:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e6c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e70:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e74:	fb01 f307 	mul.w	r3, r1, r7
 8000e78:	42a3      	cmp	r3, r4
 8000e7a:	d908      	bls.n	8000e8e <__udivmoddi4+0x276>
 8000e7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e80:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000e84:	d213      	bcs.n	8000eae <__udivmoddi4+0x296>
 8000e86:	42a3      	cmp	r3, r4
 8000e88:	d911      	bls.n	8000eae <__udivmoddi4+0x296>
 8000e8a:	3902      	subs	r1, #2
 8000e8c:	4464      	add	r4, ip
 8000e8e:	1ae4      	subs	r4, r4, r3
 8000e90:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e94:	e739      	b.n	8000d0a <__udivmoddi4+0xf2>
 8000e96:	4604      	mov	r4, r0
 8000e98:	e6f0      	b.n	8000c7c <__udivmoddi4+0x64>
 8000e9a:	4608      	mov	r0, r1
 8000e9c:	e706      	b.n	8000cac <__udivmoddi4+0x94>
 8000e9e:	45c8      	cmp	r8, r9
 8000ea0:	d2ae      	bcs.n	8000e00 <__udivmoddi4+0x1e8>
 8000ea2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ea6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eaa:	3801      	subs	r0, #1
 8000eac:	e7a8      	b.n	8000e00 <__udivmoddi4+0x1e8>
 8000eae:	4631      	mov	r1, r6
 8000eb0:	e7ed      	b.n	8000e8e <__udivmoddi4+0x276>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	e799      	b.n	8000dea <__udivmoddi4+0x1d2>
 8000eb6:	4630      	mov	r0, r6
 8000eb8:	e7d4      	b.n	8000e64 <__udivmoddi4+0x24c>
 8000eba:	46d6      	mov	lr, sl
 8000ebc:	e77f      	b.n	8000dbe <__udivmoddi4+0x1a6>
 8000ebe:	4463      	add	r3, ip
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	e74d      	b.n	8000d60 <__udivmoddi4+0x148>
 8000ec4:	4606      	mov	r6, r0
 8000ec6:	4623      	mov	r3, r4
 8000ec8:	4608      	mov	r0, r1
 8000eca:	e70f      	b.n	8000cec <__udivmoddi4+0xd4>
 8000ecc:	3e02      	subs	r6, #2
 8000ece:	4463      	add	r3, ip
 8000ed0:	e730      	b.n	8000d34 <__udivmoddi4+0x11c>
 8000ed2:	bf00      	nop

08000ed4 <__aeabi_idiv0>:
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop

08000ed8 <DWT_Delay_Init>:
uint16_t SUM; uint8_t Presence = 0;

#include "DHT11.h"

uint32_t DWT_Delay_Init(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0

  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 8000edc:	f64e 53f0 	movw	r3, #60912	@ 0xedf0
 8000ee0:	f2ce 0300 	movt	r3, #57344	@ 0xe000
 8000ee4:	68da      	ldr	r2, [r3, #12]
 8000ee6:	f64e 53f0 	movw	r3, #60912	@ 0xedf0
 8000eea:	f2ce 0300 	movt	r3, #57344	@ 0xe000
 8000eee:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 8000ef2:	60da      	str	r2, [r3, #12]

  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 8000ef4:	f64e 53f0 	movw	r3, #60912	@ 0xedf0
 8000ef8:	f2ce 0300 	movt	r3, #57344	@ 0xe000
 8000efc:	68da      	ldr	r2, [r3, #12]
 8000efe:	f64e 53f0 	movw	r3, #60912	@ 0xedf0
 8000f02:	f2ce 0300 	movt	r3, #57344	@ 0xe000
 8000f06:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8000f0a:	60da      	str	r2, [r3, #12]


  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk;
 8000f0c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f10:	f2ce 0300 	movt	r3, #57344	@ 0xe000
 8000f14:	681a      	ldr	r2, [r3, #0]
 8000f16:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f1a:	f2ce 0300 	movt	r3, #57344	@ 0xe000
 8000f1e:	f022 0201 	bic.w	r2, r2, #1
 8000f22:	601a      	str	r2, [r3, #0]

  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk;
 8000f24:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f28:	f2ce 0300 	movt	r3, #57344	@ 0xe000
 8000f2c:	681a      	ldr	r2, [r3, #0]
 8000f2e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f32:	f2ce 0300 	movt	r3, #57344	@ 0xe000
 8000f36:	f042 0201 	orr.w	r2, r2, #1
 8000f3a:	601a      	str	r2, [r3, #0]


  DWT->CYCCNT = 0;
 8000f3c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f40:	f2ce 0300 	movt	r3, #57344	@ 0xe000
 8000f44:	2200      	movs	r2, #0
 8000f46:	605a      	str	r2, [r3, #4]


     __ASM volatile ("NOP");
 8000f48:	bf00      	nop
     __ASM volatile ("NOP");
 8000f4a:	bf00      	nop
  __ASM volatile ("NOP");
 8000f4c:	bf00      	nop


     if(DWT->CYCCNT)
 8000f4e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f52:	f2ce 0300 	movt	r3, #57344	@ 0xe000
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <DWT_Delay_Init+0x88>
     {
       return 0;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	e000      	b.n	8000f62 <DWT_Delay_Init+0x8a>
     }
     else
  {
    return 1;
 8000f60:	2301      	movs	r3, #1
  }
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr

08000f6c <delay>:

__STATIC_INLINE void delay(volatile uint32_t microseconds)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b084      	sub	sp, #16
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8000f74:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f78:	f2ce 0300 	movt	r3, #57344	@ 0xe000
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	60fb      	str	r3, [r7, #12]


  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8000f80:	f002 fe13 	bl	8003baa <HAL_RCC_GetHCLKFreq>
 8000f84:	4602      	mov	r2, r0
 8000f86:	f64d 6383 	movw	r3, #56963	@ 0xde83
 8000f8a:	f2c4 331b 	movt	r3, #17179	@ 0x431b
 8000f8e:	fba3 2302 	umull	r2, r3, r3, r2
 8000f92:	0c9b      	lsrs	r3, r3, #18
 8000f94:	687a      	ldr	r2, [r7, #4]
 8000f96:	fb02 f303 	mul.w	r3, r2, r3
 8000f9a:	607b      	str	r3, [r7, #4]


  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8000f9c:	bf00      	nop
 8000f9e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fa2:	f2ce 0300 	movt	r3, #57344	@ 0xe000
 8000fa6:	685a      	ldr	r2, [r3, #4]
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	1ad2      	subs	r2, r2, r3
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	429a      	cmp	r2, r3
 8000fb0:	d3f5      	bcc.n	8000f9e <delay+0x32>
}
 8000fb2:	bf00      	nop
 8000fb4:	bf00      	nop
 8000fb6:	3710      	adds	r7, #16
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}

08000fbc <Set_Pin_Output>:

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b088      	sub	sp, #32
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
 8000fc4:	460b      	mov	r3, r1
 8000fc6:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc8:	f107 030c 	add.w	r3, r7, #12
 8000fcc:	2200      	movs	r2, #0
 8000fce:	601a      	str	r2, [r3, #0]
 8000fd0:	605a      	str	r2, [r3, #4]
 8000fd2:	609a      	str	r2, [r3, #8]
 8000fd4:	60da      	str	r2, [r3, #12]
 8000fd6:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000fd8:	887b      	ldrh	r3, [r7, #2]
 8000fda:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fdc:	2301      	movs	r3, #1
 8000fde:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000fe4:	f107 030c 	add.w	r3, r7, #12
 8000fe8:	4619      	mov	r1, r3
 8000fea:	6878      	ldr	r0, [r7, #4]
 8000fec:	f001 fece 	bl	8002d8c <HAL_GPIO_Init>
}
 8000ff0:	bf00      	nop
 8000ff2:	3720      	adds	r7, #32
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}

08000ff8 <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b088      	sub	sp, #32
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
 8001000:	460b      	mov	r3, r1
 8001002:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001004:	f107 030c 	add.w	r3, r7, #12
 8001008:	2200      	movs	r2, #0
 800100a:	601a      	str	r2, [r3, #0]
 800100c:	605a      	str	r2, [r3, #4]
 800100e:	609a      	str	r2, [r3, #8]
 8001010:	60da      	str	r2, [r3, #12]
 8001012:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8001014:	887b      	ldrh	r3, [r7, #2]
 8001016:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001018:	2300      	movs	r3, #0
 800101a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101c:	2300      	movs	r3, #0
 800101e:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001020:	f107 030c 	add.w	r3, r7, #12
 8001024:	4619      	mov	r1, r3
 8001026:	6878      	ldr	r0, [r7, #4]
 8001028:	f001 feb0 	bl	8002d8c <HAL_GPIO_Init>
}
 800102c:	bf00      	nop
 800102e:	3720      	adds	r7, #32
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}

08001034 <DHT_Start>:


void DHT_Start (void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
	DWT_Delay_Init();
 8001038:	f7ff ff4e 	bl	8000ed8 <DWT_Delay_Init>
	Set_Pin_Output (DHT_PORT, DHT_PIN);
 800103c:	2120      	movs	r1, #32
 800103e:	2000      	movs	r0, #0
 8001040:	f2c4 0002 	movt	r0, #16386	@ 0x4002
 8001044:	f7ff ffba 	bl	8000fbc <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT_PORT, DHT_PIN, 0);
 8001048:	2200      	movs	r2, #0
 800104a:	2120      	movs	r1, #32
 800104c:	2000      	movs	r0, #0
 800104e:	f2c4 0002 	movt	r0, #16386	@ 0x4002
 8001052:	f002 f876 	bl	8003142 <HAL_GPIO_WritePin>

#if defined(TYPE_DHT11)
	delay (18000);
 8001056:	f244 6050 	movw	r0, #18000	@ 0x4650
 800105a:	f7ff ff87 	bl	8000f6c <delay>

#if defined(TYPE_DHT22)
	delay (1200);
#endif

    HAL_GPIO_WritePin (DHT_PORT, DHT_PIN, 1);   // pull the pin high
 800105e:	2201      	movs	r2, #1
 8001060:	2120      	movs	r1, #32
 8001062:	2000      	movs	r0, #0
 8001064:	f2c4 0002 	movt	r0, #16386	@ 0x4002
 8001068:	f002 f86b 	bl	8003142 <HAL_GPIO_WritePin>
    delay (20);   // wait for 30us
 800106c:	2014      	movs	r0, #20
 800106e:	f7ff ff7d 	bl	8000f6c <delay>
	Set_Pin_Input(DHT_PORT, DHT_PIN);    // set as input
 8001072:	2120      	movs	r1, #32
 8001074:	2000      	movs	r0, #0
 8001076:	f2c4 0002 	movt	r0, #16386	@ 0x4002
 800107a:	f7ff ffbd 	bl	8000ff8 <Set_Pin_Input>
}
 800107e:	bf00      	nop
 8001080:	bd80      	pop	{r7, pc}

08001082 <DHT_Check_Response>:

uint8_t DHT_Check_Response (void)
{
 8001082:	b580      	push	{r7, lr}
 8001084:	b082      	sub	sp, #8
 8001086:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 8001088:	2300      	movs	r3, #0
 800108a:	71fb      	strb	r3, [r7, #7]
	delay (40);
 800108c:	2028      	movs	r0, #40	@ 0x28
 800108e:	f7ff ff6d 	bl	8000f6c <delay>
	if (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))
 8001092:	2120      	movs	r1, #32
 8001094:	2000      	movs	r0, #0
 8001096:	f2c4 0002 	movt	r0, #16386	@ 0x4002
 800109a:	f002 f83a 	bl	8003112 <HAL_GPIO_ReadPin>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d110      	bne.n	80010c6 <DHT_Check_Response+0x44>
	{
		delay (80);
 80010a4:	2050      	movs	r0, #80	@ 0x50
 80010a6:	f7ff ff61 	bl	8000f6c <delay>
		if ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN))) Response = 1;
 80010aa:	2120      	movs	r1, #32
 80010ac:	2000      	movs	r0, #0
 80010ae:	f2c4 0002 	movt	r0, #16386	@ 0x4002
 80010b2:	f002 f82e 	bl	8003112 <HAL_GPIO_ReadPin>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d002      	beq.n	80010c2 <DHT_Check_Response+0x40>
 80010bc:	2301      	movs	r3, #1
 80010be:	71fb      	strb	r3, [r7, #7]
 80010c0:	e001      	b.n	80010c6 <DHT_Check_Response+0x44>
		else Response = -1;
 80010c2:	23ff      	movs	r3, #255	@ 0xff
 80010c4:	71fb      	strb	r3, [r7, #7]
	}
	while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));   // wait for the pin to go low
 80010c6:	bf00      	nop
 80010c8:	2120      	movs	r1, #32
 80010ca:	2000      	movs	r0, #0
 80010cc:	f2c4 0002 	movt	r0, #16386	@ 0x4002
 80010d0:	f002 f81f 	bl	8003112 <HAL_GPIO_ReadPin>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d1f6      	bne.n	80010c8 <DHT_Check_Response+0x46>

	return Response;
 80010da:	79fb      	ldrb	r3, [r7, #7]
}
 80010dc:	4618      	mov	r0, r3
 80010de:	3708      	adds	r7, #8
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}

080010e4 <DHT_Read>:

uint8_t DHT_Read (void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for (j=0;j<8;j++)
 80010ea:	2300      	movs	r3, #0
 80010ec:	71bb      	strb	r3, [r7, #6]
 80010ee:	e03d      	b.n	800116c <DHT_Read+0x88>
	{
		while (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));   // wait for the pin to go high
 80010f0:	bf00      	nop
 80010f2:	2120      	movs	r1, #32
 80010f4:	2000      	movs	r0, #0
 80010f6:	f2c4 0002 	movt	r0, #16386	@ 0x4002
 80010fa:	f002 f80a 	bl	8003112 <HAL_GPIO_ReadPin>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d0f6      	beq.n	80010f2 <DHT_Read+0xe>
		delay (40);   // wait for 40 us
 8001104:	2028      	movs	r0, #40	@ 0x28
 8001106:	f7ff ff31 	bl	8000f6c <delay>
		if (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))   // if the pin is low
 800110a:	2120      	movs	r1, #32
 800110c:	2000      	movs	r0, #0
 800110e:	f2c4 0002 	movt	r0, #16386	@ 0x4002
 8001112:	f001 fffe 	bl	8003112 <HAL_GPIO_ReadPin>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d10e      	bne.n	800113a <DHT_Read+0x56>
		{
			i&= ~(1<<(7-j));   // write 0
 800111c:	79bb      	ldrb	r3, [r7, #6]
 800111e:	f1c3 0307 	rsb	r3, r3, #7
 8001122:	2201      	movs	r2, #1
 8001124:	fa02 f303 	lsl.w	r3, r2, r3
 8001128:	b25b      	sxtb	r3, r3
 800112a:	43db      	mvns	r3, r3
 800112c:	b25a      	sxtb	r2, r3
 800112e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001132:	4013      	ands	r3, r2
 8001134:	b25b      	sxtb	r3, r3
 8001136:	71fb      	strb	r3, [r7, #7]
 8001138:	e00b      	b.n	8001152 <DHT_Read+0x6e>
		}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 800113a:	79bb      	ldrb	r3, [r7, #6]
 800113c:	f1c3 0307 	rsb	r3, r3, #7
 8001140:	2201      	movs	r2, #1
 8001142:	fa02 f303 	lsl.w	r3, r2, r3
 8001146:	b25a      	sxtb	r2, r3
 8001148:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800114c:	4313      	orrs	r3, r2
 800114e:	b25b      	sxtb	r3, r3
 8001150:	71fb      	strb	r3, [r7, #7]
		while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));  // wait for the pin to go low
 8001152:	bf00      	nop
 8001154:	2120      	movs	r1, #32
 8001156:	2000      	movs	r0, #0
 8001158:	f2c4 0002 	movt	r0, #16386	@ 0x4002
 800115c:	f001 ffd9 	bl	8003112 <HAL_GPIO_ReadPin>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d1f6      	bne.n	8001154 <DHT_Read+0x70>
	for (j=0;j<8;j++)
 8001166:	79bb      	ldrb	r3, [r7, #6]
 8001168:	3301      	adds	r3, #1
 800116a:	71bb      	strb	r3, [r7, #6]
 800116c:	79bb      	ldrb	r3, [r7, #6]
 800116e:	2b07      	cmp	r3, #7
 8001170:	d9be      	bls.n	80010f0 <DHT_Read+0xc>
	}
	return i;
 8001172:	79fb      	ldrb	r3, [r7, #7]
}
 8001174:	4618      	mov	r0, r3
 8001176:	3708      	adds	r7, #8
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}

0800117c <DHT_GetData>:



void DHT_GetData (DHT_DataTypedef *DHT_Data)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
    DHT_Start ();
 8001184:	f7ff ff56 	bl	8001034 <DHT_Start>
	Presence = DHT_Check_Response ();
 8001188:	f7ff ff7b 	bl	8001082 <DHT_Check_Response>
 800118c:	4603      	mov	r3, r0
 800118e:	461a      	mov	r2, r3
 8001190:	f240 13fa 	movw	r3, #506	@ 0x1fa
 8001194:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001198:	701a      	strb	r2, [r3, #0]
	Rh_byte1 = DHT_Read ();
 800119a:	f7ff ffa3 	bl	80010e4 <DHT_Read>
 800119e:	4603      	mov	r3, r0
 80011a0:	461a      	mov	r2, r3
 80011a2:	f240 13f4 	movw	r3, #500	@ 0x1f4
 80011a6:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80011aa:	701a      	strb	r2, [r3, #0]
	Rh_byte2 = DHT_Read ();
 80011ac:	f7ff ff9a 	bl	80010e4 <DHT_Read>
 80011b0:	4603      	mov	r3, r0
 80011b2:	461a      	mov	r2, r3
 80011b4:	f240 13f5 	movw	r3, #501	@ 0x1f5
 80011b8:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80011bc:	701a      	strb	r2, [r3, #0]
	Temp_byte1 = DHT_Read ();
 80011be:	f7ff ff91 	bl	80010e4 <DHT_Read>
 80011c2:	4603      	mov	r3, r0
 80011c4:	461a      	mov	r2, r3
 80011c6:	f240 13f6 	movw	r3, #502	@ 0x1f6
 80011ca:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80011ce:	701a      	strb	r2, [r3, #0]
	Temp_byte2 = DHT_Read ();
 80011d0:	f7ff ff88 	bl	80010e4 <DHT_Read>
 80011d4:	4603      	mov	r3, r0
 80011d6:	461a      	mov	r2, r3
 80011d8:	f240 13f7 	movw	r3, #503	@ 0x1f7
 80011dc:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80011e0:	701a      	strb	r2, [r3, #0]
	SUM = DHT_Read();
 80011e2:	f7ff ff7f 	bl	80010e4 <DHT_Read>
 80011e6:	4603      	mov	r3, r0
 80011e8:	461a      	mov	r2, r3
 80011ea:	f240 13f8 	movw	r3, #504	@ 0x1f8
 80011ee:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80011f2:	801a      	strh	r2, [r3, #0]

	if (SUM == (Rh_byte1+Rh_byte2+Temp_byte1+Temp_byte2))
 80011f4:	f240 13f8 	movw	r3, #504	@ 0x1f8
 80011f8:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80011fc:	881b      	ldrh	r3, [r3, #0]
 80011fe:	4619      	mov	r1, r3
 8001200:	f240 13f4 	movw	r3, #500	@ 0x1f4
 8001204:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	461a      	mov	r2, r3
 800120c:	f240 13f5 	movw	r3, #501	@ 0x1f5
 8001210:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	441a      	add	r2, r3
 8001218:	f240 13f6 	movw	r3, #502	@ 0x1f6
 800121c:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	441a      	add	r2, r3
 8001224:	f240 13f7 	movw	r3, #503	@ 0x1f7
 8001228:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	4413      	add	r3, r2
 8001230:	4299      	cmp	r1, r3
 8001232:	d117      	bne.n	8001264 <DHT_GetData+0xe8>
	{
		#if defined(TYPE_DHT11)
			DHT_Data->Temperature = Temp_byte1;
 8001234:	f240 13f6 	movw	r3, #502	@ 0x1f6
 8001238:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	ee07 3a90 	vmov	s15, r3
 8001242:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	edc3 7a00 	vstr	s15, [r3]
			DHT_Data->Humidity = Rh_byte1;
 800124c:	f240 13f4 	movw	r3, #500	@ 0x1f4
 8001250:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	ee07 3a90 	vmov	s15, r3
 800125a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	edc3 7a01 	vstr	s15, [r3, #4]
		#if defined(TYPE_DHT22)
			DHT_Data->Temperature = ((Temp_byte1<<8)|Temp_byte2);
			DHT_Data->Humidity = ((Rh_byte1<<8)|Rh_byte2);
		#endif
	}
}
 8001264:	bf00      	nop
 8001266:	3708      	adds	r7, #8
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}

0800126c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800126c:	b480      	push	{r7}
 800126e:	b085      	sub	sp, #20
 8001270:	af00      	add	r7, sp, #0
 8001272:	60f8      	str	r0, [r7, #12]
 8001274:	60b9      	str	r1, [r7, #8]
 8001276:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001278:	68fa      	ldr	r2, [r7, #12]
 800127a:	f240 13fc 	movw	r3, #508	@ 0x1fc
 800127e:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001282:	6013      	str	r3, [r2, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001284:	68ba      	ldr	r2, [r7, #8]
 8001286:	f240 239c 	movw	r3, #668	@ 0x29c
 800128a:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 800128e:	6013      	str	r3, [r2, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2280      	movs	r2, #128	@ 0x80
 8001294:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001296:	bf00      	nop
 8001298:	3714      	adds	r7, #20
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr

080012a2 <vGASDataSendingTask>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void vGASDataSendingTask(void *pvParam)
{
 80012a2:	b580      	push	{r7, lr}
 80012a4:	b094      	sub	sp, #80	@ 0x50
 80012a6:	af00      	add	r7, sp, #0
 80012a8:	6078      	str	r0, [r7, #4]
	char msg[64];
	portTickType xLastTime = xTaskGetTickCount();
 80012aa:	f004 fe8d 	bl	8005fc8 <xTaskGetTickCount>
 80012ae:	4603      	mov	r3, r0
 80012b0:	60bb      	str	r3, [r7, #8]
	while(1){
		HAL_ADC_Start(&hadc1);
 80012b2:	f240 40ac 	movw	r0, #1196	@ 0x4ac
 80012b6:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80012ba:	f001 f8aa 	bl	8002412 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80012be:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80012c2:	f240 40ac 	movw	r0, #1196	@ 0x4ac
 80012c6:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80012ca:	f001 f9b7 	bl	800263c <HAL_ADC_PollForConversion>
		uint32_t value = HAL_ADC_GetValue(&hadc1);
 80012ce:	f240 40ac 	movw	r0, #1196	@ 0x4ac
 80012d2:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80012d6:	f001 fa3c 	bl	8002752 <HAL_ADC_GetValue>
 80012da:	64f8      	str	r0, [r7, #76]	@ 0x4c
		HAL_ADC_Stop(&hadc1);
 80012dc:	f240 40ac 	movw	r0, #1196	@ 0x4ac
 80012e0:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80012e4:	f001 f977 	bl	80025d6 <HAL_ADC_Stop>

		sprintf(msg, "Gas value : %d \r\n", value);
 80012e8:	f107 030c 	add.w	r3, r7, #12
 80012ec:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80012ee:	f649 4110 	movw	r1, #39952	@ 0x9c10
 80012f2:	f6c0 0100 	movt	r1, #2048	@ 0x800
 80012f6:	4618      	mov	r0, r3
 80012f8:	f006 faf8 	bl	80078ec <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 80012fc:	f107 030c 	add.w	r3, r7, #12
 8001300:	4618      	mov	r0, r3
 8001302:	f7fe ffb5 	bl	8000270 <strlen>
 8001306:	4603      	mov	r3, r0
 8001308:	b29a      	uxth	r2, r3
 800130a:	f107 010c 	add.w	r1, r7, #12
 800130e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001312:	f240 503c 	movw	r0, #1340	@ 0x53c
 8001316:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 800131a:	f003 fd56 	bl	8004dca <HAL_UART_Transmit>
		if(value>2000){
 800131e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001320:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001324:	d921      	bls.n	800136a <vGASDataSendingTask+0xc8>
			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8001326:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800132a:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 800132e:	f2c4 0002 	movt	r0, #16386	@ 0x4002
 8001332:	f001 ff1f 	bl	8003174 <HAL_GPIO_TogglePin>
	    	sprintf(msg, "Gas Leakage Detected.......  \r \n");
 8001336:	f107 030c 	add.w	r3, r7, #12
 800133a:	f649 4124 	movw	r1, #39972	@ 0x9c24
 800133e:	f6c0 0100 	movt	r1, #2048	@ 0x800
 8001342:	4618      	mov	r0, r3
 8001344:	f006 fad2 	bl	80078ec <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 8001348:	f107 030c 	add.w	r3, r7, #12
 800134c:	4618      	mov	r0, r3
 800134e:	f7fe ff8f 	bl	8000270 <strlen>
 8001352:	4603      	mov	r3, r0
 8001354:	b29a      	uxth	r2, r3
 8001356:	f107 010c 	add.w	r1, r7, #12
 800135a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800135e:	f240 503c 	movw	r0, #1340	@ 0x53c
 8001362:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8001366:	f003 fd30 	bl	8004dca <HAL_UART_Transmit>

		}
		vTaskDelayUntil(&xLastTime, 2000 / portTICK_RATE_MS);
 800136a:	f107 0308 	add.w	r3, r7, #8
 800136e:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8001372:	4618      	mov	r0, r3
 8001374:	f004 fc27 	bl	8005bc6 <vTaskDelayUntil>
	while(1){
 8001378:	e79b      	b.n	80012b2 <vGASDataSendingTask+0x10>

0800137a <vDistanceTask>:
	}
	vTaskDelete(NULL);
}
void vDistanceTask(void *pvParameters)
{
 800137a:	b580      	push	{r7, lr}
 800137c:	b092      	sub	sp, #72	@ 0x48
 800137e:	af00      	add	r7, sp, #0
 8001380:	6078      	str	r0, [r7, #4]
    while (1)
    {

    	char str[64];

    	Ultrasonic_distance();
 8001382:	f000 fe4d 	bl	8002020 <Ultrasonic_distance>
    	sprintf(str, "Distance : %d cms \r \n", distance);
 8001386:	f240 5388 	movw	r3, #1416	@ 0x588
 800138a:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 800138e:	881b      	ldrh	r3, [r3, #0]
 8001390:	461a      	mov	r2, r3
 8001392:	f107 0308 	add.w	r3, r7, #8
 8001396:	f649 4148 	movw	r1, #40008	@ 0x9c48
 800139a:	f6c0 0100 	movt	r1, #2048	@ 0x800
 800139e:	4618      	mov	r0, r3
 80013a0:	f006 faa4 	bl	80078ec <siprintf>
    	HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), HAL_MAX_DELAY);
 80013a4:	f107 0308 	add.w	r3, r7, #8
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7fe ff61 	bl	8000270 <strlen>
 80013ae:	4603      	mov	r3, r0
 80013b0:	b29a      	uxth	r2, r3
 80013b2:	f107 0108 	add.w	r1, r7, #8
 80013b6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80013ba:	f240 503c 	movw	r0, #1340	@ 0x53c
 80013be:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80013c2:	f003 fd02 	bl	8004dca <HAL_UART_Transmit>
        vTaskDelay(pdMS_TO_TICKS(1000)); // Delay for a second before next measurement
 80013c6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80013ca:	f004 fc7f 	bl	8005ccc <vTaskDelay>
    {
 80013ce:	bf00      	nop
 80013d0:	e7d7      	b.n	8001382 <vDistanceTask+0x8>

080013d2 <vTEMPDataSendingTask>:
    }
}
void vTEMPDataSendingTask(void *pvParam)
{
 80013d2:	b580      	push	{r7, lr}
 80013d4:	b094      	sub	sp, #80	@ 0x50
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	6078      	str	r0, [r7, #4]
	   char buffer[64];
	   portTickType xLastTime = xTaskGetTickCount();
 80013da:	f004 fdf5 	bl	8005fc8 <xTaskGetTickCount>
 80013de:	4603      	mov	r3, r0
 80013e0:	60fb      	str	r3, [r7, #12]
	   while(1){
        DHT_GetData(&DHT11_Data);
 80013e2:	f240 409c 	movw	r0, #1180	@ 0x49c
 80013e6:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80013ea:	f7ff fec7 	bl	800117c <DHT_GetData>
	    Temperature = DHT11_Data.Temperature;
 80013ee:	f240 439c 	movw	r3, #1180	@ 0x49c
 80013f2:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80013f6:	edd3 7a00 	vldr	s15, [r3]
 80013fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013fe:	ee17 2a90 	vmov	r2, s15
 8001402:	f240 43a4 	movw	r3, #1188	@ 0x4a4
 8001406:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 800140a:	601a      	str	r2, [r3, #0]
	    Humidity = DHT11_Data.Humidity;
 800140c:	f240 439c 	movw	r3, #1180	@ 0x49c
 8001410:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001414:	edd3 7a01 	vldr	s15, [r3, #4]
 8001418:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800141c:	ee17 2a90 	vmov	r2, s15
 8001420:	f240 43a8 	movw	r3, #1192	@ 0x4a8
 8001424:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001428:	601a      	str	r2, [r3, #0]

	    sprintf(buffer, "Humidity = %d and Temperature = %d\r\n", Humidity,Temperature);
 800142a:	f240 43a8 	movw	r3, #1192	@ 0x4a8
 800142e:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001432:	681a      	ldr	r2, [r3, #0]
 8001434:	f240 43a4 	movw	r3, #1188	@ 0x4a4
 8001438:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f107 0010 	add.w	r0, r7, #16
 8001442:	f649 4160 	movw	r1, #40032	@ 0x9c60
 8001446:	f6c0 0100 	movt	r1, #2048	@ 0x800
 800144a:	f006 fa4f 	bl	80078ec <siprintf>
	    HAL_UART_Transmit(&huart2, (uint8_t *)buffer,  sizeof(buffer), HAL_MAX_DELAY);
 800144e:	f107 0110 	add.w	r1, r7, #16
 8001452:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001456:	2240      	movs	r2, #64	@ 0x40
 8001458:	f240 503c 	movw	r0, #1340	@ 0x53c
 800145c:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8001460:	f003 fcb3 	bl	8004dca <HAL_UART_Transmit>

	    vTaskDelayUntil(&xLastTime, 2000 / portTICK_RATE_MS);
 8001464:	f107 030c 	add.w	r3, r7, #12
 8001468:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 800146c:	4618      	mov	r0, r3
 800146e:	f004 fbaa 	bl	8005bc6 <vTaskDelayUntil>
        DHT_GetData(&DHT11_Data);
 8001472:	bf00      	nop
 8001474:	e7b5      	b.n	80013e2 <vTEMPDataSendingTask+0x10>

08001476 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001476:	b5b0      	push	{r4, r5, r7, lr}
 8001478:	b08a      	sub	sp, #40	@ 0x28
 800147a:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN 1 */
	   char *str2 = "Resetting The Machin\r\n";
 800147c:	f649 4388 	movw	r3, #40072	@ 0x9c88
 8001480:	f6c0 0300 	movt	r3, #2048	@ 0x800
 8001484:	61fb      	str	r3, [r7, #28]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001486:	f000 ff08 	bl	800229a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800148a:	f000 f868 	bl	800155e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800148e:	f000 fa2a 	bl	80018e6 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001492:	f000 f8db 	bl	800164c <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8001496:	f000 f9e3 	bl	8001860 <MX_USART2_UART_Init>
  MX_TIM4_Init();
 800149a:	f000 f951 	bl	8001740 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Transmit(&huart2, (uint8_t *)str2, strlen(str2), HAL_MAX_DELAY);
 800149e:	69f8      	ldr	r0, [r7, #28]
 80014a0:	f7fe fee6 	bl	8000270 <strlen>
 80014a4:	4603      	mov	r3, r0
 80014a6:	b29a      	uxth	r2, r3
 80014a8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80014ac:	69f9      	ldr	r1, [r7, #28]
 80014ae:	f240 503c 	movw	r0, #1340	@ 0x53c
 80014b2:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80014b6:	f003 fc88 	bl	8004dca <HAL_UART_Transmit>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 80014ba:	2100      	movs	r1, #0
 80014bc:	f240 40f4 	movw	r0, #1268	@ 0x4f4
 80014c0:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80014c4:	f002 fd02 	bl	8003ecc <HAL_TIM_IC_Start_IT>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 128);
 80014c8:	f649 43d0 	movw	r3, #40144	@ 0x9cd0
 80014cc:	f6c0 0300 	movt	r3, #2048	@ 0x800
 80014d0:	463c      	mov	r4, r7
 80014d2:	461d      	mov	r5, r3
 80014d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014d8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80014dc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80014e0:	463b      	mov	r3, r7
 80014e2:	2100      	movs	r1, #0
 80014e4:	4618      	mov	r0, r3
 80014e6:	f004 f889 	bl	80055fc <osThreadCreate>
 80014ea:	4602      	mov	r2, r0
 80014ec:	f240 5384 	movw	r3, #1412	@ 0x584
 80014f0:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80014f4:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  xTaskCreate(vGASDataSendingTask, "HAL_ADC", 128, NULL, 2, NULL);
 80014f6:	2300      	movs	r3, #0
 80014f8:	9301      	str	r3, [sp, #4]
 80014fa:	2302      	movs	r3, #2
 80014fc:	9300      	str	r3, [sp, #0]
 80014fe:	2300      	movs	r3, #0
 8001500:	2280      	movs	r2, #128	@ 0x80
 8001502:	f649 41a0 	movw	r1, #40096	@ 0x9ca0
 8001506:	f6c0 0100 	movt	r1, #2048	@ 0x800
 800150a:	f241 20a3 	movw	r0, #4771	@ 0x12a3
 800150e:	f6c0 0000 	movt	r0, #2048	@ 0x800
 8001512:	f004 f9e7 	bl	80058e4 <xTaskCreate>
  xTaskCreate(vDistanceTask, "DistanceTask", 128, NULL, 3, NULL);
 8001516:	2300      	movs	r3, #0
 8001518:	9301      	str	r3, [sp, #4]
 800151a:	2303      	movs	r3, #3
 800151c:	9300      	str	r3, [sp, #0]
 800151e:	2300      	movs	r3, #0
 8001520:	2280      	movs	r2, #128	@ 0x80
 8001522:	f649 41a8 	movw	r1, #40104	@ 0x9ca8
 8001526:	f6c0 0100 	movt	r1, #2048	@ 0x800
 800152a:	f241 307b 	movw	r0, #4987	@ 0x137b
 800152e:	f6c0 0000 	movt	r0, #2048	@ 0x800
 8001532:	f004 f9d7 	bl	80058e4 <xTaskCreate>
  xTaskCreate(vTEMPDataSendingTask, "HAL_UART", 128, NULL, 4, NULL);
 8001536:	2300      	movs	r3, #0
 8001538:	9301      	str	r3, [sp, #4]
 800153a:	2304      	movs	r3, #4
 800153c:	9300      	str	r3, [sp, #0]
 800153e:	2300      	movs	r3, #0
 8001540:	2280      	movs	r2, #128	@ 0x80
 8001542:	f649 41b8 	movw	r1, #40120	@ 0x9cb8
 8001546:	f6c0 0100 	movt	r1, #2048	@ 0x800
 800154a:	f241 30d3 	movw	r0, #5075	@ 0x13d3
 800154e:	f6c0 0000 	movt	r0, #2048	@ 0x800
 8001552:	f004 f9c7 	bl	80058e4 <xTaskCreate>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001556:	f004 f84a 	bl	80055ee <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800155a:	bf00      	nop
 800155c:	e7fd      	b.n	800155a <main+0xe4>

0800155e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800155e:	b580      	push	{r7, lr}
 8001560:	b094      	sub	sp, #80	@ 0x50
 8001562:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001564:	f107 0320 	add.w	r3, r7, #32
 8001568:	2230      	movs	r2, #48	@ 0x30
 800156a:	2100      	movs	r1, #0
 800156c:	4618      	mov	r0, r3
 800156e:	f006 fa20 	bl	80079b2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001572:	f107 030c 	add.w	r3, r7, #12
 8001576:	2200      	movs	r2, #0
 8001578:	601a      	str	r2, [r3, #0]
 800157a:	605a      	str	r2, [r3, #4]
 800157c:	609a      	str	r2, [r3, #8]
 800157e:	60da      	str	r2, [r3, #12]
 8001580:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001582:	2300      	movs	r3, #0
 8001584:	60bb      	str	r3, [r7, #8]
 8001586:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 800158a:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 800158e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001590:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8001594:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8001598:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800159c:	641a      	str	r2, [r3, #64]	@ 0x40
 800159e:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 80015a2:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 80015a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015ac:	60bb      	str	r3, [r7, #8]
 80015ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015b0:	2300      	movs	r3, #0
 80015b2:	607b      	str	r3, [r7, #4]
 80015b4:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 80015b8:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 80015c2:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 80015c6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80015ca:	601a      	str	r2, [r3, #0]
 80015cc:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 80015d0:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80015da:	607b      	str	r3, [r7, #4]
 80015dc:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80015de:	2302      	movs	r3, #2
 80015e0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015e2:	2301      	movs	r3, #1
 80015e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015e6:	2310      	movs	r3, #16
 80015e8:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015ea:	2302      	movs	r3, #2
 80015ec:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80015ee:	2300      	movs	r3, #0
 80015f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80015f2:	2308      	movs	r3, #8
 80015f4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 80015f6:	2354      	movs	r3, #84	@ 0x54
 80015f8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80015fa:	2302      	movs	r3, #2
 80015fc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80015fe:	2307      	movs	r3, #7
 8001600:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001602:	f107 0320 	add.w	r3, r7, #32
 8001606:	4618      	mov	r0, r3
 8001608:	f001 fdce 	bl	80031a8 <HAL_RCC_OscConfig>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d001      	beq.n	8001616 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8001612:	f000 fa07 	bl	8001a24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001616:	230f      	movs	r3, #15
 8001618:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800161a:	2302      	movs	r3, #2
 800161c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800161e:	2300      	movs	r3, #0
 8001620:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001622:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001626:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001628:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800162c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800162e:	f107 030c 	add.w	r3, r7, #12
 8001632:	2102      	movs	r1, #2
 8001634:	4618      	mov	r0, r3
 8001636:	f002 f8db 	bl	80037f0 <HAL_RCC_ClockConfig>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d001      	beq.n	8001644 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8001640:	f000 f9f0 	bl	8001a24 <Error_Handler>
  }
}
 8001644:	bf00      	nop
 8001646:	3750      	adds	r7, #80	@ 0x50
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}

0800164c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b084      	sub	sp, #16
 8001650:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001652:	463b      	mov	r3, r7
 8001654:	2200      	movs	r2, #0
 8001656:	601a      	str	r2, [r3, #0]
 8001658:	605a      	str	r2, [r3, #4]
 800165a:	609a      	str	r2, [r3, #8]
 800165c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800165e:	f240 42ac 	movw	r2, #1196	@ 0x4ac
 8001662:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8001666:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800166a:	f2c4 0301 	movt	r3, #16385	@ 0x4001
 800166e:	6013      	str	r3, [r2, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001670:	f240 43ac 	movw	r3, #1196	@ 0x4ac
 8001674:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001678:	2200      	movs	r2, #0
 800167a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800167c:	f240 43ac 	movw	r3, #1196	@ 0x4ac
 8001680:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001684:	2200      	movs	r2, #0
 8001686:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001688:	f240 43ac 	movw	r3, #1196	@ 0x4ac
 800168c:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001690:	2200      	movs	r2, #0
 8001692:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001694:	f240 43ac 	movw	r3, #1196	@ 0x4ac
 8001698:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 800169c:	2200      	movs	r2, #0
 800169e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80016a0:	f240 43ac 	movw	r3, #1196	@ 0x4ac
 80016a4:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80016a8:	2200      	movs	r2, #0
 80016aa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80016ae:	f240 43ac 	movw	r3, #1196	@ 0x4ac
 80016b2:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80016b6:	2200      	movs	r2, #0
 80016b8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80016ba:	f240 42ac 	movw	r2, #1196	@ 0x4ac
 80016be:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 80016c2:	2301      	movs	r3, #1
 80016c4:	f6c0 7300 	movt	r3, #3840	@ 0xf00
 80016c8:	6293      	str	r3, [r2, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80016ca:	f240 43ac 	movw	r3, #1196	@ 0x4ac
 80016ce:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80016d2:	2200      	movs	r2, #0
 80016d4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80016d6:	f240 43ac 	movw	r3, #1196	@ 0x4ac
 80016da:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80016de:	2201      	movs	r2, #1
 80016e0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80016e2:	f240 43ac 	movw	r3, #1196	@ 0x4ac
 80016e6:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80016ea:	2200      	movs	r2, #0
 80016ec:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80016f0:	f240 43ac 	movw	r3, #1196	@ 0x4ac
 80016f4:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80016f8:	2201      	movs	r2, #1
 80016fa:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80016fc:	f240 40ac 	movw	r0, #1196	@ 0x4ac
 8001700:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8001704:	f000 fe42 	bl	800238c <HAL_ADC_Init>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d001      	beq.n	8001712 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 800170e:	f000 f989 	bl	8001a24 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001712:	2300      	movs	r3, #0
 8001714:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001716:	2301      	movs	r3, #1
 8001718:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800171a:	2300      	movs	r3, #0
 800171c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800171e:	463b      	mov	r3, r7
 8001720:	4619      	mov	r1, r3
 8001722:	f240 40ac 	movw	r0, #1196	@ 0x4ac
 8001726:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 800172a:	f001 f81f 	bl	800276c <HAL_ADC_ConfigChannel>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	d001      	beq.n	8001738 <MX_ADC1_Init+0xec>
  {
    Error_Handler();
 8001734:	f000 f976 	bl	8001a24 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001738:	bf00      	nop
 800173a:	3710      	adds	r7, #16
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}

08001740 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b08a      	sub	sp, #40	@ 0x28
 8001744:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001746:	f107 0318 	add.w	r3, r7, #24
 800174a:	2200      	movs	r2, #0
 800174c:	601a      	str	r2, [r3, #0]
 800174e:	605a      	str	r2, [r3, #4]
 8001750:	609a      	str	r2, [r3, #8]
 8001752:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001754:	f107 0310 	add.w	r3, r7, #16
 8001758:	2200      	movs	r2, #0
 800175a:	601a      	str	r2, [r3, #0]
 800175c:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800175e:	463b      	mov	r3, r7
 8001760:	2200      	movs	r2, #0
 8001762:	601a      	str	r2, [r3, #0]
 8001764:	605a      	str	r2, [r3, #4]
 8001766:	609a      	str	r2, [r3, #8]
 8001768:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800176a:	f240 42f4 	movw	r2, #1268	@ 0x4f4
 800176e:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8001772:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001776:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 800177a:	6013      	str	r3, [r2, #0]
  htim4.Init.Prescaler = 84-1;
 800177c:	f240 43f4 	movw	r3, #1268	@ 0x4f4
 8001780:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001784:	2253      	movs	r2, #83	@ 0x53
 8001786:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001788:	f240 43f4 	movw	r3, #1268	@ 0x4f4
 800178c:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001790:	2200      	movs	r2, #0
 8001792:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001794:	f240 43f4 	movw	r3, #1268	@ 0x4f4
 8001798:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 800179c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80017a0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017a2:	f240 43f4 	movw	r3, #1268	@ 0x4f4
 80017a6:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80017aa:	2200      	movs	r2, #0
 80017ac:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017ae:	f240 43f4 	movw	r3, #1268	@ 0x4f4
 80017b2:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80017b6:	2200      	movs	r2, #0
 80017b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80017ba:	f240 40f4 	movw	r0, #1268	@ 0x4f4
 80017be:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80017c2:	f002 fa66 	bl	8003c92 <HAL_TIM_Base_Init>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d001      	beq.n	80017d0 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 80017cc:	f000 f92a 	bl	8001a24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017d0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017d4:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80017d6:	f107 0318 	add.w	r3, r7, #24
 80017da:	4619      	mov	r1, r3
 80017dc:	f240 40f4 	movw	r0, #1268	@ 0x4f4
 80017e0:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80017e4:	f002 fe2c 	bl	8004440 <HAL_TIM_ConfigClockSource>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d001      	beq.n	80017f2 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80017ee:	f000 f919 	bl	8001a24 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 80017f2:	f240 40f4 	movw	r0, #1268	@ 0x4f4
 80017f6:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80017fa:	f002 fb0e 	bl	8003e1a <HAL_TIM_IC_Init>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d001      	beq.n	8001808 <MX_TIM4_Init+0xc8>
  {
    Error_Handler();
 8001804:	f000 f90e 	bl	8001a24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001808:	2300      	movs	r3, #0
 800180a:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800180c:	2300      	movs	r3, #0
 800180e:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001810:	f107 0310 	add.w	r3, r7, #16
 8001814:	4619      	mov	r1, r3
 8001816:	f240 40f4 	movw	r0, #1268	@ 0x4f4
 800181a:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 800181e:	f003 f9ef 	bl	8004c00 <HAL_TIMEx_MasterConfigSynchronization>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d001      	beq.n	800182c <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8001828:	f000 f8fc 	bl	8001a24 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800182c:	2300      	movs	r3, #0
 800182e:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001830:	2301      	movs	r3, #1
 8001832:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001834:	2300      	movs	r3, #0
 8001836:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001838:	2300      	movs	r3, #0
 800183a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800183c:	463b      	mov	r3, r7
 800183e:	2200      	movs	r2, #0
 8001840:	4619      	mov	r1, r3
 8001842:	f240 40f4 	movw	r0, #1268	@ 0x4f4
 8001846:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 800184a:	f002 fd5d 	bl	8004308 <HAL_TIM_IC_ConfigChannel>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d001      	beq.n	8001858 <MX_TIM4_Init+0x118>
  {
    Error_Handler();
 8001854:	f000 f8e6 	bl	8001a24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001858:	bf00      	nop
 800185a:	3728      	adds	r7, #40	@ 0x28
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}

08001860 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001864:	f240 523c 	movw	r2, #1340	@ 0x53c
 8001868:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 800186c:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8001870:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 8001874:	6013      	str	r3, [r2, #0]
  huart2.Init.BaudRate = 9600;
 8001876:	f240 533c 	movw	r3, #1340	@ 0x53c
 800187a:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 800187e:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001882:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001884:	f240 533c 	movw	r3, #1340	@ 0x53c
 8001888:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 800188c:	2200      	movs	r2, #0
 800188e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001890:	f240 533c 	movw	r3, #1340	@ 0x53c
 8001894:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001898:	2200      	movs	r2, #0
 800189a:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800189c:	f240 533c 	movw	r3, #1340	@ 0x53c
 80018a0:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80018a4:	2200      	movs	r2, #0
 80018a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80018a8:	f240 533c 	movw	r3, #1340	@ 0x53c
 80018ac:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80018b0:	220c      	movs	r2, #12
 80018b2:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018b4:	f240 533c 	movw	r3, #1340	@ 0x53c
 80018b8:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80018bc:	2200      	movs	r2, #0
 80018be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80018c0:	f240 533c 	movw	r3, #1340	@ 0x53c
 80018c4:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80018c8:	2200      	movs	r2, #0
 80018ca:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80018cc:	f240 503c 	movw	r0, #1340	@ 0x53c
 80018d0:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80018d4:	f003 fa29 	bl	8004d2a <HAL_UART_Init>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d001      	beq.n	80018e2 <MX_USART2_UART_Init+0x82>
  {
    Error_Handler();
 80018de:	f000 f8a1 	bl	8001a24 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80018e2:	bf00      	nop
 80018e4:	bd80      	pop	{r7, pc}

080018e6 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018e6:	b580      	push	{r7, lr}
 80018e8:	b088      	sub	sp, #32
 80018ea:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ec:	f107 030c 	add.w	r3, r7, #12
 80018f0:	2200      	movs	r2, #0
 80018f2:	601a      	str	r2, [r3, #0]
 80018f4:	605a      	str	r2, [r3, #4]
 80018f6:	609a      	str	r2, [r3, #8]
 80018f8:	60da      	str	r2, [r3, #12]
 80018fa:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018fc:	2300      	movs	r3, #0
 80018fe:	60bb      	str	r3, [r7, #8]
 8001900:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8001904:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8001908:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800190a:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 800190e:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8001912:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001916:	631a      	str	r2, [r3, #48]	@ 0x30
 8001918:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 800191c:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8001920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001922:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001926:	60bb      	str	r3, [r7, #8]
 8001928:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800192a:	2300      	movs	r3, #0
 800192c:	607b      	str	r3, [r7, #4]
 800192e:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8001932:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8001936:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001938:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 800193c:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8001940:	f042 0201 	orr.w	r2, r2, #1
 8001944:	631a      	str	r2, [r3, #48]	@ 0x30
 8001946:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 800194a:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 800194e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001950:	f003 0301 	and.w	r3, r3, #1
 8001954:	607b      	str	r3, [r7, #4]
 8001956:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001958:	2300      	movs	r3, #0
 800195a:	603b      	str	r3, [r7, #0]
 800195c:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8001960:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8001964:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001966:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 800196a:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 800196e:	f042 0208 	orr.w	r2, r2, #8
 8001972:	631a      	str	r2, [r3, #48]	@ 0x30
 8001974:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8001978:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 800197c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800197e:	f003 0308 	and.w	r3, r3, #8
 8001982:	603b      	str	r3, [r7, #0]
 8001984:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001986:	2200      	movs	r2, #0
 8001988:	2120      	movs	r1, #32
 800198a:	2000      	movs	r0, #0
 800198c:	f2c4 0002 	movt	r0, #16386	@ 0x4002
 8001990:	f001 fbd7 	bl	8003142 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11|GPIO_PIN_14, GPIO_PIN_RESET);
 8001994:	2200      	movs	r2, #0
 8001996:	f44f 4190 	mov.w	r1, #18432	@ 0x4800
 800199a:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 800199e:	f2c4 0002 	movt	r0, #16386	@ 0x4002
 80019a2:	f001 fbce 	bl	8003142 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80019a6:	2320      	movs	r3, #32
 80019a8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019aa:	2301      	movs	r3, #1
 80019ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ae:	2300      	movs	r3, #0
 80019b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019b2:	2300      	movs	r3, #0
 80019b4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019b6:	f107 030c 	add.w	r3, r7, #12
 80019ba:	4619      	mov	r1, r3
 80019bc:	2000      	movs	r0, #0
 80019be:	f2c4 0002 	movt	r0, #16386	@ 0x4002
 80019c2:	f001 f9e3 	bl	8002d8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD11 PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_14;
 80019c6:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 80019ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019cc:	2301      	movs	r3, #1
 80019ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d0:	2300      	movs	r3, #0
 80019d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019d4:	2300      	movs	r3, #0
 80019d6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019d8:	f107 030c 	add.w	r3, r7, #12
 80019dc:	4619      	mov	r1, r3
 80019de:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 80019e2:	f2c4 0002 	movt	r0, #16386	@ 0x4002
 80019e6:	f001 f9d1 	bl	8002d8c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80019ea:	bf00      	nop
 80019ec:	3720      	adds	r7, #32
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}

080019f2 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80019f2:	b580      	push	{r7, lr}
 80019f4:	b082      	sub	sp, #8
 80019f6:	af00      	add	r7, sp, #0
 80019f8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80019fa:	2001      	movs	r0, #1
 80019fc:	f003 fe4a 	bl	8005694 <osDelay>
 8001a00:	e7fb      	b.n	80019fa <StartDefaultTask+0x8>

08001a02 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a02:	b580      	push	{r7, lr}
 8001a04:	b082      	sub	sp, #8
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	2300      	movs	r3, #0
 8001a10:	f2c4 0301 	movt	r3, #16385	@ 0x4001
 8001a14:	429a      	cmp	r2, r3
 8001a16:	d101      	bne.n	8001a1c <HAL_TIM_PeriodElapsedCallback+0x1a>
    HAL_IncTick();
 8001a18:	f000 fc70 	bl	80022fc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001a1c:	bf00      	nop
 8001a1e:	3708      	adds	r7, #8
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}

08001a24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a28:	b672      	cpsid	i
}
 8001a2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a2c:	bf00      	nop
 8001a2e:	e7fd      	b.n	8001a2c <Error_Handler+0x8>

08001a30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b082      	sub	sp, #8
 8001a34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a36:	2300      	movs	r3, #0
 8001a38:	607b      	str	r3, [r7, #4]
 8001a3a:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8001a3e:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8001a42:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001a44:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8001a48:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8001a4c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001a50:	645a      	str	r2, [r3, #68]	@ 0x44
 8001a52:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8001a56:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8001a5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a5c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a60:	607b      	str	r3, [r7, #4]
 8001a62:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a64:	2300      	movs	r3, #0
 8001a66:	603b      	str	r3, [r7, #0]
 8001a68:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8001a6c:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8001a70:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001a72:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8001a76:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8001a7a:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001a7e:	641a      	str	r2, [r3, #64]	@ 0x40
 8001a80:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8001a84:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8001a88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a8e:	603b      	str	r3, [r7, #0]
 8001a90:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001a92:	2200      	movs	r2, #0
 8001a94:	210f      	movs	r1, #15
 8001a96:	f06f 0001 	mvn.w	r0, #1
 8001a9a:	f001 f94d 	bl	8002d38 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a9e:	bf00      	nop
 8001aa0:	3708      	adds	r7, #8
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}

08001aa6 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001aa6:	b580      	push	{r7, lr}
 8001aa8:	b08a      	sub	sp, #40	@ 0x28
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aae:	f107 0314 	add.w	r3, r7, #20
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	601a      	str	r2, [r3, #0]
 8001ab6:	605a      	str	r2, [r3, #4]
 8001ab8:	609a      	str	r2, [r3, #8]
 8001aba:	60da      	str	r2, [r3, #12]
 8001abc:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001ac6:	f2c4 0301 	movt	r3, #16385	@ 0x4001
 8001aca:	429a      	cmp	r2, r3
 8001acc:	d13b      	bne.n	8001b46 <HAL_ADC_MspInit+0xa0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001ace:	2300      	movs	r3, #0
 8001ad0:	613b      	str	r3, [r7, #16]
 8001ad2:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8001ad6:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8001ada:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001adc:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8001ae0:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8001ae4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001ae8:	645a      	str	r2, [r3, #68]	@ 0x44
 8001aea:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8001aee:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8001af2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001af4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001af8:	613b      	str	r3, [r7, #16]
 8001afa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001afc:	2300      	movs	r3, #0
 8001afe:	60fb      	str	r3, [r7, #12]
 8001b00:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8001b04:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8001b08:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001b0a:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8001b0e:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8001b12:	f042 0201 	orr.w	r2, r2, #1
 8001b16:	631a      	str	r2, [r3, #48]	@ 0x30
 8001b18:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8001b1c:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8001b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b22:	f003 0301 	and.w	r3, r3, #1
 8001b26:	60fb      	str	r3, [r7, #12]
 8001b28:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b2e:	2303      	movs	r3, #3
 8001b30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b32:	2300      	movs	r3, #0
 8001b34:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b36:	f107 0314 	add.w	r3, r7, #20
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	2000      	movs	r0, #0
 8001b3e:	f2c4 0002 	movt	r0, #16386	@ 0x4002
 8001b42:	f001 f923 	bl	8002d8c <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001b46:	bf00      	nop
 8001b48:	3728      	adds	r7, #40	@ 0x28
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}

08001b4e <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b4e:	b580      	push	{r7, lr}
 8001b50:	b08a      	sub	sp, #40	@ 0x28
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b56:	f107 0314 	add.w	r3, r7, #20
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	601a      	str	r2, [r3, #0]
 8001b5e:	605a      	str	r2, [r3, #4]
 8001b60:	609a      	str	r2, [r3, #8]
 8001b62:	60da      	str	r2, [r3, #12]
 8001b64:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM4)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001b6e:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 8001b72:	429a      	cmp	r2, r3
 8001b74:	d149      	bne.n	8001c0a <HAL_TIM_Base_MspInit+0xbc>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001b76:	2300      	movs	r3, #0
 8001b78:	613b      	str	r3, [r7, #16]
 8001b7a:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8001b7e:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8001b82:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001b84:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8001b88:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8001b8c:	f042 0204 	orr.w	r2, r2, #4
 8001b90:	641a      	str	r2, [r3, #64]	@ 0x40
 8001b92:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8001b96:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8001b9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b9c:	f003 0304 	and.w	r3, r3, #4
 8001ba0:	613b      	str	r3, [r7, #16]
 8001ba2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	60fb      	str	r3, [r7, #12]
 8001ba8:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8001bac:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8001bb0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001bb2:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8001bb6:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8001bba:	f042 0208 	orr.w	r2, r2, #8
 8001bbe:	631a      	str	r2, [r3, #48]	@ 0x30
 8001bc0:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8001bc4:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8001bc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bca:	f003 0308 	and.w	r3, r3, #8
 8001bce:	60fb      	str	r3, [r7, #12]
 8001bd0:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001bd2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001bd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bd8:	2302      	movs	r3, #2
 8001bda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001be0:	2300      	movs	r3, #0
 8001be2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001be4:	2302      	movs	r3, #2
 8001be6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001be8:	f107 0314 	add.w	r3, r7, #20
 8001bec:	4619      	mov	r1, r3
 8001bee:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8001bf2:	f2c4 0002 	movt	r0, #16386	@ 0x4002
 8001bf6:	f001 f8c9 	bl	8002d8c <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	2105      	movs	r1, #5
 8001bfe:	201e      	movs	r0, #30
 8001c00:	f001 f89a 	bl	8002d38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001c04:	201e      	movs	r0, #30
 8001c06:	f001 f8b3 	bl	8002d70 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM4_MspInit 1 */

  }

}
 8001c0a:	bf00      	nop
 8001c0c:	3728      	adds	r7, #40	@ 0x28
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}

08001c12 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c12:	b580      	push	{r7, lr}
 8001c14:	b08a      	sub	sp, #40	@ 0x28
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c1a:	f107 0314 	add.w	r3, r7, #20
 8001c1e:	2200      	movs	r2, #0
 8001c20:	601a      	str	r2, [r3, #0]
 8001c22:	605a      	str	r2, [r3, #4]
 8001c24:	609a      	str	r2, [r3, #8]
 8001c26:	60da      	str	r2, [r3, #12]
 8001c28:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8001c32:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 8001c36:	429a      	cmp	r2, r3
 8001c38:	d13f      	bne.n	8001cba <HAL_UART_MspInit+0xa8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	613b      	str	r3, [r7, #16]
 8001c3e:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8001c42:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8001c46:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001c48:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8001c4c:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8001c50:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8001c54:	641a      	str	r2, [r3, #64]	@ 0x40
 8001c56:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8001c5a:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8001c5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c64:	613b      	str	r3, [r7, #16]
 8001c66:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c68:	2300      	movs	r3, #0
 8001c6a:	60fb      	str	r3, [r7, #12]
 8001c6c:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8001c70:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8001c74:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001c76:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8001c7a:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8001c7e:	f042 0201 	orr.w	r2, r2, #1
 8001c82:	631a      	str	r2, [r3, #48]	@ 0x30
 8001c84:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8001c88:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8001c8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c8e:	f003 0301 	and.w	r3, r3, #1
 8001c92:	60fb      	str	r3, [r7, #12]
 8001c94:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001c96:	230c      	movs	r3, #12
 8001c98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c9a:	2302      	movs	r3, #2
 8001c9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ca2:	2303      	movs	r3, #3
 8001ca4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ca6:	2307      	movs	r3, #7
 8001ca8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001caa:	f107 0314 	add.w	r3, r7, #20
 8001cae:	4619      	mov	r1, r3
 8001cb0:	2000      	movs	r0, #0
 8001cb2:	f2c4 0002 	movt	r0, #16386	@ 0x4002
 8001cb6:	f001 f869 	bl	8002d8c <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001cba:	bf00      	nop
 8001cbc:	3728      	adds	r7, #40	@ 0x28
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}

08001cc2 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cc2:	b580      	push	{r7, lr}
 8001cc4:	b08c      	sub	sp, #48	@ 0x30
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	60bb      	str	r3, [r7, #8]
 8001cd6:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8001cda:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8001cde:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001ce0:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8001ce4:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8001ce8:	f042 0201 	orr.w	r2, r2, #1
 8001cec:	645a      	str	r2, [r3, #68]	@ 0x44
 8001cee:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8001cf2:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8001cf6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cf8:	f003 0301 	and.w	r3, r3, #1
 8001cfc:	60bb      	str	r3, [r7, #8]
 8001cfe:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001d00:	f107 020c 	add.w	r2, r7, #12
 8001d04:	f107 0310 	add.w	r3, r7, #16
 8001d08:	4611      	mov	r1, r2
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f001 ff85 	bl	8003c1a <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001d10:	f001 ff6d 	bl	8003bee <HAL_RCC_GetPCLK2Freq>
 8001d14:	4603      	mov	r3, r0
 8001d16:	005b      	lsls	r3, r3, #1
 8001d18:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001d1a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001d1c:	f64d 6383 	movw	r3, #56963	@ 0xde83
 8001d20:	f2c4 331b 	movt	r3, #17179	@ 0x431b
 8001d24:	fba3 2302 	umull	r2, r3, r3, r2
 8001d28:	0c9b      	lsrs	r3, r3, #18
 8001d2a:	3b01      	subs	r3, #1
 8001d2c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001d2e:	f240 528c 	movw	r2, #1420	@ 0x58c
 8001d32:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8001d36:	2300      	movs	r3, #0
 8001d38:	f2c4 0301 	movt	r3, #16385	@ 0x4001
 8001d3c:	6013      	str	r3, [r2, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001d3e:	f240 538c 	movw	r3, #1420	@ 0x58c
 8001d42:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001d46:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001d4a:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001d4c:	f240 538c 	movw	r3, #1420	@ 0x58c
 8001d50:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001d54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d56:	605a      	str	r2, [r3, #4]
  htim1.Init.ClockDivision = 0;
 8001d58:	f240 538c 	movw	r3, #1420	@ 0x58c
 8001d5c:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001d60:	2200      	movs	r2, #0
 8001d62:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d64:	f240 538c 	movw	r3, #1420	@ 0x58c
 8001d68:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d70:	f240 538c 	movw	r3, #1420	@ 0x58c
 8001d74:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001d78:	2200      	movs	r2, #0
 8001d7a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001d7c:	f240 508c 	movw	r0, #1420	@ 0x58c
 8001d80:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8001d84:	f001 ff85 	bl	8003c92 <HAL_TIM_Base_Init>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001d8e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d121      	bne.n	8001dda <HAL_InitTick+0x118>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001d96:	f240 508c 	movw	r0, #1420	@ 0x58c
 8001d9a:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8001d9e:	f001 ffc7 	bl	8003d30 <HAL_TIM_Base_Start_IT>
 8001da2:	4603      	mov	r3, r0
 8001da4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001da8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d114      	bne.n	8001dda <HAL_InitTick+0x118>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001db0:	2019      	movs	r0, #25
 8001db2:	f000 ffdd 	bl	8002d70 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2b0f      	cmp	r3, #15
 8001dba:	d80b      	bhi.n	8001dd4 <HAL_InitTick+0x112>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	6879      	ldr	r1, [r7, #4]
 8001dc0:	2019      	movs	r0, #25
 8001dc2:	f000 ffb9 	bl	8002d38 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001dc6:	f240 0304 	movw	r3, #4
 8001dca:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001dce:	687a      	ldr	r2, [r7, #4]
 8001dd0:	601a      	str	r2, [r3, #0]
 8001dd2:	e002      	b.n	8001dda <HAL_InitTick+0x118>
      }
      else
      {
        status = HAL_ERROR;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001dda:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	3730      	adds	r7, #48	@ 0x30
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}

08001de6 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001de6:	b480      	push	{r7}
 8001de8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001dea:	bf00      	nop
 8001dec:	e7fd      	b.n	8001dea <NMI_Handler+0x4>

08001dee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dee:	b480      	push	{r7}
 8001df0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001df2:	bf00      	nop
 8001df4:	e7fd      	b.n	8001df2 <HardFault_Handler+0x4>

08001df6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001df6:	b480      	push	{r7}
 8001df8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001dfa:	bf00      	nop
 8001dfc:	e7fd      	b.n	8001dfa <MemManage_Handler+0x4>

08001dfe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dfe:	b480      	push	{r7}
 8001e00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e02:	bf00      	nop
 8001e04:	e7fd      	b.n	8001e02 <BusFault_Handler+0x4>

08001e06 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e06:	b480      	push	{r7}
 8001e08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e0a:	bf00      	nop
 8001e0c:	e7fd      	b.n	8001e0a <UsageFault_Handler+0x4>

08001e0e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e0e:	b480      	push	{r7}
 8001e10:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e12:	bf00      	nop
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr

08001e1c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001e20:	f240 508c 	movw	r0, #1420	@ 0x58c
 8001e24:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8001e28:	f002 f97e 	bl	8004128 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001e2c:	bf00      	nop
 8001e2e:	bd80      	pop	{r7, pc}

08001e30 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001e34:	f240 40f4 	movw	r0, #1268	@ 0x4f4
 8001e38:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8001e3c:	f002 f974 	bl	8004128 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001e40:	bf00      	nop
 8001e42:	bd80      	pop	{r7, pc}

08001e44 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e44:	b480      	push	{r7}
 8001e46:	af00      	add	r7, sp, #0
  return 1;
 8001e48:	2301      	movs	r3, #1
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr

08001e54 <_kill>:

int _kill(int pid, int sig)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b082      	sub	sp, #8
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
 8001e5c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001e5e:	f005 fe51 	bl	8007b04 <__errno>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2216      	movs	r2, #22
 8001e66:	601a      	str	r2, [r3, #0]
  return -1;
 8001e68:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	3708      	adds	r7, #8
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}

08001e74 <_exit>:

void _exit (int status)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b082      	sub	sp, #8
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001e7c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001e80:	6878      	ldr	r0, [r7, #4]
 8001e82:	f7ff ffe7 	bl	8001e54 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001e86:	bf00      	nop
 8001e88:	e7fd      	b.n	8001e86 <_exit+0x12>

08001e8a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e8a:	b580      	push	{r7, lr}
 8001e8c:	b086      	sub	sp, #24
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	60f8      	str	r0, [r7, #12]
 8001e92:	60b9      	str	r1, [r7, #8]
 8001e94:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e96:	2300      	movs	r3, #0
 8001e98:	617b      	str	r3, [r7, #20]
 8001e9a:	e00a      	b.n	8001eb2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001e9c:	f3af 8000 	nop.w
 8001ea0:	4601      	mov	r1, r0
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	1c5a      	adds	r2, r3, #1
 8001ea6:	60ba      	str	r2, [r7, #8]
 8001ea8:	b2ca      	uxtb	r2, r1
 8001eaa:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	3301      	adds	r3, #1
 8001eb0:	617b      	str	r3, [r7, #20]
 8001eb2:	697a      	ldr	r2, [r7, #20]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	429a      	cmp	r2, r3
 8001eb8:	dbf0      	blt.n	8001e9c <_read+0x12>
  }

  return len;
 8001eba:	687b      	ldr	r3, [r7, #4]
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	3718      	adds	r7, #24
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}

08001ec4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b086      	sub	sp, #24
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	60f8      	str	r0, [r7, #12]
 8001ecc:	60b9      	str	r1, [r7, #8]
 8001ece:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	617b      	str	r3, [r7, #20]
 8001ed4:	e009      	b.n	8001eea <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	1c5a      	adds	r2, r3, #1
 8001eda:	60ba      	str	r2, [r7, #8]
 8001edc:	781b      	ldrb	r3, [r3, #0]
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	3301      	adds	r3, #1
 8001ee8:	617b      	str	r3, [r7, #20]
 8001eea:	697a      	ldr	r2, [r7, #20]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	429a      	cmp	r2, r3
 8001ef0:	dbf1      	blt.n	8001ed6 <_write+0x12>
  }
  return len;
 8001ef2:	687b      	ldr	r3, [r7, #4]
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	3718      	adds	r7, #24
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}

08001efc <_close>:

int _close(int file)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b083      	sub	sp, #12
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001f04:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	370c      	adds	r7, #12
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr

08001f14 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
 8001f1c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001f24:	605a      	str	r2, [r3, #4]
  return 0;
 8001f26:	2300      	movs	r3, #0
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	370c      	adds	r7, #12
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr

08001f34 <_isatty>:

int _isatty(int file)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001f3c:	2301      	movs	r3, #1
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	370c      	adds	r7, #12
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr

08001f4a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f4a:	b480      	push	{r7}
 8001f4c:	b085      	sub	sp, #20
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	60f8      	str	r0, [r7, #12]
 8001f52:	60b9      	str	r1, [r7, #8]
 8001f54:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001f56:	2300      	movs	r3, #0
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	3714      	adds	r7, #20
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr

08001f64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b086      	sub	sp, #24
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f6c:	f240 0200 	movw	r2, #0
 8001f70:	f2c2 0202 	movt	r2, #8194	@ 0x2002
 8001f74:	f240 4300 	movw	r3, #1024	@ 0x400
 8001f78:	f2c0 0300 	movt	r3, #0
 8001f7c:	1ad3      	subs	r3, r2, r3
 8001f7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f84:	f240 53d4 	movw	r3, #1492	@ 0x5d4
 8001f88:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d108      	bne.n	8001fa4 <_sbrk+0x40>
  {
    __sbrk_heap_end = &_end;
 8001f92:	f240 53d4 	movw	r3, #1492	@ 0x5d4
 8001f96:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001f9a:	f244 4290 	movw	r2, #17552	@ 0x4490
 8001f9e:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8001fa2:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fa4:	f240 53d4 	movw	r3, #1492	@ 0x5d4
 8001fa8:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4413      	add	r3, r2
 8001fb2:	693a      	ldr	r2, [r7, #16]
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d207      	bcs.n	8001fc8 <_sbrk+0x64>
  {
    errno = ENOMEM;
 8001fb8:	f005 fda4 	bl	8007b04 <__errno>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	220c      	movs	r2, #12
 8001fc0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001fc2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001fc6:	e012      	b.n	8001fee <_sbrk+0x8a>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fc8:	f240 53d4 	movw	r3, #1492	@ 0x5d4
 8001fcc:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001fd4:	f240 53d4 	movw	r3, #1492	@ 0x5d4
 8001fd8:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001fdc:	681a      	ldr	r2, [r3, #0]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	441a      	add	r2, r3
 8001fe2:	f240 53d4 	movw	r3, #1492	@ 0x5d4
 8001fe6:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001fea:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001fec:	68fb      	ldr	r3, [r7, #12]
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3718      	adds	r7, #24
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}

08001ff6 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ff6:	b480      	push	{r7}
 8001ff8:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ffa:	f44f 436d 	mov.w	r3, #60672	@ 0xed00
 8001ffe:	f2ce 0300 	movt	r3, #57344	@ 0xe000
 8002002:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002006:	f44f 436d 	mov.w	r3, #60672	@ 0xed00
 800200a:	f2ce 0300 	movt	r3, #57344	@ 0xe000
 800200e:	f442 0270 	orr.w	r2, r2, #15728640	@ 0xf00000
 8002012:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002016:	bf00      	nop
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr

08002020 <Ultrasonic_distance>:
uint32_t InputCaptureValue_1 = 0;
uint32_t InputCaptureValue_2 = 0;
uint32_t InputCaptureDifference = 0;

void Ultrasonic_distance(void)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	af00      	add	r7, sp, #0
    // Send Trigger Signal to ultrasonic trigger pin
    HAL_GPIO_WritePin(ULTRASONIC_TRIGGER_PORT, ULTRASONIC_TRIGGER_PIN, GPIO_PIN_SET);
 8002024:	2201      	movs	r2, #1
 8002026:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800202a:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 800202e:	f2c4 0002 	movt	r0, #16386	@ 0x4002
 8002032:	f001 f886 	bl	8003142 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8002036:	200a      	movs	r0, #10
 8002038:	f000 f984 	bl	8002344 <HAL_Delay>
    HAL_GPIO_WritePin(ULTRASONIC_TRIGGER_PORT, ULTRASONIC_TRIGGER_PIN, GPIO_PIN_RESET);
 800203c:	2200      	movs	r2, #0
 800203e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002042:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8002046:	f2c4 0002 	movt	r0, #16386	@ 0x4002
 800204a:	f001 f87a 	bl	8003142 <HAL_GPIO_WritePin>

    // Enable Timer counter
    __HAL_TIM_ENABLE_IT(ULTRASONIC_ECHO_PIN_IC, TIM_IT_CC1);
 800204e:	f240 43f4 	movw	r3, #1268	@ 0x4f4
 8002052:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	68da      	ldr	r2, [r3, #12]
 800205a:	f240 43f4 	movw	r3, #1268	@ 0x4f4
 800205e:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f042 0202 	orr.w	r2, r2, #2
 8002068:	60da      	str	r2, [r3, #12]
}
 800206a:	bf00      	nop
 800206c:	bd80      	pop	{r7, pc}
	...

08002070 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b082      	sub	sp, #8
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
    // Capture Rising Edge
    if (isRisingCaptured == 0)
 8002078:	f240 53d8 	movw	r3, #1496	@ 0x5d8
 800207c:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002080:	781b      	ldrb	r3, [r3, #0]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d12f      	bne.n	80020e6 <HAL_TIM_IC_CaptureCallback+0x76>
    {
        InputCaptureValue_1 = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_1);
 8002086:	2100      	movs	r1, #0
 8002088:	f240 40f4 	movw	r0, #1268	@ 0x4f4
 800208c:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8002090:	f002 fa9e 	bl	80045d0 <HAL_TIM_ReadCapturedValue>
 8002094:	4602      	mov	r2, r0
 8002096:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 800209a:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 800209e:	601a      	str	r2, [r3, #0]
        isRisingCaptured = 1;
 80020a0:	f240 53d8 	movw	r3, #1496	@ 0x5d8
 80020a4:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80020a8:	2201      	movs	r2, #1
 80020aa:	701a      	strb	r2, [r3, #0]
        __HAL_TIM_SET_CAPTUREPOLARITY(&htim4, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 80020ac:	f240 43f4 	movw	r3, #1268	@ 0x4f4
 80020b0:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	6a1a      	ldr	r2, [r3, #32]
 80020b8:	f240 43f4 	movw	r3, #1268	@ 0x4f4
 80020bc:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f022 020a 	bic.w	r2, r2, #10
 80020c6:	621a      	str	r2, [r3, #32]
 80020c8:	f240 43f4 	movw	r3, #1268	@ 0x4f4
 80020cc:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	6a1a      	ldr	r2, [r3, #32]
 80020d4:	f240 43f4 	movw	r3, #1268	@ 0x4f4
 80020d8:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f042 0202 	orr.w	r2, r2, #2
 80020e2:	621a      	str	r2, [r3, #32]
        isRisingCaptured = 0;

        __HAL_TIM_SET_CAPTUREPOLARITY(&htim4, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
        __HAL_TIM_DISABLE_IT(&htim4, TIM_IT_CC1);
    }
}
 80020e4:	e0a5      	b.n	8002232 <HAL_TIM_IC_CaptureCallback+0x1c2>
    else if (isRisingCaptured == 1)
 80020e6:	f240 53d8 	movw	r3, #1496	@ 0x5d8
 80020ea:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	2b01      	cmp	r3, #1
 80020f2:	f040 809e 	bne.w	8002232 <HAL_TIM_IC_CaptureCallback+0x1c2>
        InputCaptureValue_2 = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_1);
 80020f6:	2100      	movs	r1, #0
 80020f8:	f240 40f4 	movw	r0, #1268	@ 0x4f4
 80020fc:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8002100:	f002 fa66 	bl	80045d0 <HAL_TIM_ReadCapturedValue>
 8002104:	4602      	mov	r2, r0
 8002106:	f240 53e0 	movw	r3, #1504	@ 0x5e0
 800210a:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 800210e:	601a      	str	r2, [r3, #0]
        __HAL_TIM_SET_COUNTER(&htim4, 0);
 8002110:	f240 43f4 	movw	r3, #1268	@ 0x4f4
 8002114:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	2200      	movs	r2, #0
 800211c:	625a      	str	r2, [r3, #36]	@ 0x24
        if (InputCaptureValue_2 > InputCaptureValue_1)
 800211e:	f240 53e0 	movw	r3, #1504	@ 0x5e0
 8002122:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 800212c:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	429a      	cmp	r2, r3
 8002134:	d910      	bls.n	8002158 <HAL_TIM_IC_CaptureCallback+0xe8>
            InputCaptureDifference = InputCaptureValue_2 - InputCaptureValue_1;
 8002136:	f240 53e0 	movw	r3, #1504	@ 0x5e0
 800213a:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8002144:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	1ad2      	subs	r2, r2, r3
 800214c:	f240 53e4 	movw	r3, #1508	@ 0x5e4
 8002150:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002154:	601a      	str	r2, [r3, #0]
 8002156:	e01e      	b.n	8002196 <HAL_TIM_IC_CaptureCallback+0x126>
        else if (InputCaptureValue_1 > InputCaptureValue_2)
 8002158:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 800215c:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002160:	681a      	ldr	r2, [r3, #0]
 8002162:	f240 53e0 	movw	r3, #1504	@ 0x5e0
 8002166:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	429a      	cmp	r2, r3
 800216e:	d912      	bls.n	8002196 <HAL_TIM_IC_CaptureCallback+0x126>
            InputCaptureDifference = (0xFFFF - InputCaptureValue_1) + InputCaptureValue_2;
 8002170:	f240 53e0 	movw	r3, #1504	@ 0x5e0
 8002174:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 800217e:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 800218a:	33ff      	adds	r3, #255	@ 0xff
 800218c:	f240 52e4 	movw	r2, #1508	@ 0x5e4
 8002190:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8002194:	6013      	str	r3, [r2, #0]
        distance = InputCaptureDifference * 0.0173; // Convert to cm
 8002196:	f240 53e4 	movw	r3, #1508	@ 0x5e4
 800219a:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4618      	mov	r0, r3
 80021a2:	f7fe f9af 	bl	8000504 <__aeabi_ui2d>
 80021a6:	a326      	add	r3, pc, #152	@ (adr r3, 8002240 <HAL_TIM_IC_CaptureCallback+0x1d0>)
 80021a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021ac:	f7fe fa24 	bl	80005f8 <__aeabi_dmul>
 80021b0:	4602      	mov	r2, r0
 80021b2:	460b      	mov	r3, r1
 80021b4:	4610      	mov	r0, r2
 80021b6:	4619      	mov	r1, r3
 80021b8:	f7fe fcf6 	bl	8000ba8 <__aeabi_d2uiz>
 80021bc:	4603      	mov	r3, r0
 80021be:	b29a      	uxth	r2, r3
 80021c0:	f240 5388 	movw	r3, #1416	@ 0x588
 80021c4:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80021c8:	801a      	strh	r2, [r3, #0]
        isReadingFinished = 1;
 80021ca:	f240 538a 	movw	r3, #1418	@ 0x58a
 80021ce:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80021d2:	2201      	movs	r2, #1
 80021d4:	701a      	strb	r2, [r3, #0]
        isRisingCaptured = 0;
 80021d6:	f240 53d8 	movw	r3, #1496	@ 0x5d8
 80021da:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80021de:	2200      	movs	r2, #0
 80021e0:	701a      	strb	r2, [r3, #0]
        __HAL_TIM_SET_CAPTUREPOLARITY(&htim4, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 80021e2:	f240 43f4 	movw	r3, #1268	@ 0x4f4
 80021e6:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	6a1a      	ldr	r2, [r3, #32]
 80021ee:	f240 43f4 	movw	r3, #1268	@ 0x4f4
 80021f2:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f022 020a 	bic.w	r2, r2, #10
 80021fc:	621a      	str	r2, [r3, #32]
 80021fe:	f240 43f4 	movw	r3, #1268	@ 0x4f4
 8002202:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	f240 43f4 	movw	r3, #1268	@ 0x4f4
 800220c:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	6a12      	ldr	r2, [r2, #32]
 8002214:	621a      	str	r2, [r3, #32]
        __HAL_TIM_DISABLE_IT(&htim4, TIM_IT_CC1);
 8002216:	f240 43f4 	movw	r3, #1268	@ 0x4f4
 800221a:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	68da      	ldr	r2, [r3, #12]
 8002222:	f240 43f4 	movw	r3, #1268	@ 0x4f4
 8002226:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f022 0202 	bic.w	r2, r2, #2
 8002230:	60da      	str	r2, [r3, #12]
}
 8002232:	bf00      	nop
 8002234:	3708      	adds	r7, #8
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	f3af 8000 	nop.w
 8002240:	58e21965 	.word	0x58e21965
 8002244:	3f91b717 	.word	0x3f91b717

08002248 <Reset_Handler>:
 8002248:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002280 <LoopFillZerobss+0xe>
 800224c:	f7ff fed3 	bl	8001ff6 <SystemInit>
 8002250:	480c      	ldr	r0, [pc, #48]	@ (8002284 <LoopFillZerobss+0x12>)
 8002252:	490d      	ldr	r1, [pc, #52]	@ (8002288 <LoopFillZerobss+0x16>)
 8002254:	4a0d      	ldr	r2, [pc, #52]	@ (800228c <LoopFillZerobss+0x1a>)
 8002256:	2300      	movs	r3, #0
 8002258:	e002      	b.n	8002260 <LoopCopyDataInit>

0800225a <CopyDataInit>:
 800225a:	58d4      	ldr	r4, [r2, r3]
 800225c:	50c4      	str	r4, [r0, r3]
 800225e:	3304      	adds	r3, #4

08002260 <LoopCopyDataInit>:
 8002260:	18c4      	adds	r4, r0, r3
 8002262:	428c      	cmp	r4, r1
 8002264:	d3f9      	bcc.n	800225a <CopyDataInit>
 8002266:	4a0a      	ldr	r2, [pc, #40]	@ (8002290 <LoopFillZerobss+0x1e>)
 8002268:	4c0a      	ldr	r4, [pc, #40]	@ (8002294 <LoopFillZerobss+0x22>)
 800226a:	2300      	movs	r3, #0
 800226c:	e001      	b.n	8002272 <LoopFillZerobss>

0800226e <FillZerobss>:
 800226e:	6013      	str	r3, [r2, #0]
 8002270:	3204      	adds	r2, #4

08002272 <LoopFillZerobss>:
 8002272:	42a2      	cmp	r2, r4
 8002274:	d3fb      	bcc.n	800226e <FillZerobss>
 8002276:	f005 fc4b 	bl	8007b10 <__libc_init_array>
 800227a:	f7ff f8fc 	bl	8001476 <main>
 800227e:	4770      	bx	lr
 8002280:	20020000 	.word	0x20020000
 8002284:	20000000 	.word	0x20000000
 8002288:	200001d8 	.word	0x200001d8
 800228c:	0800a090 	.word	0x0800a090
 8002290:	200001d8 	.word	0x200001d8
 8002294:	2000448c 	.word	0x2000448c

08002298 <ADC_IRQHandler>:
 8002298:	e7fe      	b.n	8002298 <ADC_IRQHandler>

0800229a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800229a:	b580      	push	{r7, lr}
 800229c:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800229e:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80022a2:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80022ac:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 80022b0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80022b4:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80022b6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80022ba:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80022c4:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 80022c8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80022cc:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022ce:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80022d2:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80022dc:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 80022e0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80022e4:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022e6:	2003      	movs	r0, #3
 80022e8:	f000 fd1b 	bl	8002d22 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022ec:	200f      	movs	r0, #15
 80022ee:	f7ff fce8 	bl	8001cc2 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022f2:	f7ff fb9d 	bl	8001a30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022f6:	2300      	movs	r3, #0
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	bd80      	pop	{r7, pc}

080022fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022fc:	b480      	push	{r7}
 80022fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002300:	f240 0308 	movw	r3, #8
 8002304:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002308:	781b      	ldrb	r3, [r3, #0]
 800230a:	461a      	mov	r2, r3
 800230c:	f240 53e8 	movw	r3, #1512	@ 0x5e8
 8002310:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	441a      	add	r2, r3
 8002318:	f240 53e8 	movw	r3, #1512	@ 0x5e8
 800231c:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002320:	601a      	str	r2, [r3, #0]
}
 8002322:	bf00      	nop
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr

0800232c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800232c:	b480      	push	{r7}
 800232e:	af00      	add	r7, sp, #0
  return uwTick;
 8002330:	f240 53e8 	movw	r3, #1512	@ 0x5e8
 8002334:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002338:	681b      	ldr	r3, [r3, #0]
}
 800233a:	4618      	mov	r0, r3
 800233c:	46bd      	mov	sp, r7
 800233e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002342:	4770      	bx	lr

08002344 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b084      	sub	sp, #16
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800234c:	f7ff ffee 	bl	800232c <HAL_GetTick>
 8002350:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800235c:	d008      	beq.n	8002370 <HAL_Delay+0x2c>
  {
    wait += (uint32_t)(uwTickFreq);
 800235e:	f240 0308 	movw	r3, #8
 8002362:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002366:	781b      	ldrb	r3, [r3, #0]
 8002368:	461a      	mov	r2, r3
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	4413      	add	r3, r2
 800236e:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002370:	bf00      	nop
 8002372:	f7ff ffdb 	bl	800232c <HAL_GetTick>
 8002376:	4602      	mov	r2, r0
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	1ad3      	subs	r3, r2, r3
 800237c:	68fa      	ldr	r2, [r7, #12]
 800237e:	429a      	cmp	r2, r3
 8002380:	d8f7      	bhi.n	8002372 <HAL_Delay+0x2e>
  {
  }
}
 8002382:	bf00      	nop
 8002384:	bf00      	nop
 8002386:	3710      	adds	r7, #16
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}

0800238c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b084      	sub	sp, #16
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002394:	2300      	movs	r3, #0
 8002396:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d101      	bne.n	80023a2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	e033      	b.n	800240a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d109      	bne.n	80023be <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80023aa:	6878      	ldr	r0, [r7, #4]
 80023ac:	f7ff fb7b 	bl	8001aa6 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2200      	movs	r2, #0
 80023b4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2200      	movs	r2, #0
 80023ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023c2:	f003 0310 	and.w	r3, r3, #16
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d118      	bne.n	80023fc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ce:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80023d2:	f023 0302 	bic.w	r3, r3, #2
 80023d6:	f043 0202 	orr.w	r2, r3, #2
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80023de:	6878      	ldr	r0, [r7, #4]
 80023e0:	f000 faec 	bl	80029bc <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2200      	movs	r2, #0
 80023e8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ee:	f023 0303 	bic.w	r3, r3, #3
 80023f2:	f043 0201 	orr.w	r2, r3, #1
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	641a      	str	r2, [r3, #64]	@ 0x40
 80023fa:	e001      	b.n	8002400 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80023fc:	2301      	movs	r3, #1
 80023fe:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2200      	movs	r2, #0
 8002404:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002408:	7bfb      	ldrb	r3, [r7, #15]
}
 800240a:	4618      	mov	r0, r3
 800240c:	3710      	adds	r7, #16
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}

08002412 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002412:	b480      	push	{r7}
 8002414:	b085      	sub	sp, #20
 8002416:	af00      	add	r7, sp, #0
 8002418:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800241a:	2300      	movs	r3, #0
 800241c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002424:	2b01      	cmp	r3, #1
 8002426:	d101      	bne.n	800242c <HAL_ADC_Start+0x1a>
 8002428:	2302      	movs	r3, #2
 800242a:	e0ce      	b.n	80025ca <HAL_ADC_Start+0x1b8>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2201      	movs	r2, #1
 8002430:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	f003 0301 	and.w	r3, r3, #1
 800243e:	2b01      	cmp	r3, #1
 8002440:	d01e      	beq.n	8002480 <HAL_ADC_Start+0x6e>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	689a      	ldr	r2, [r3, #8]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f042 0201 	orr.w	r2, r2, #1
 8002450:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002452:	f240 0300 	movw	r3, #0
 8002456:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	f64d 6383 	movw	r3, #56963	@ 0xde83
 8002460:	f2c4 331b 	movt	r3, #17179	@ 0x431b
 8002464:	fba3 2302 	umull	r2, r3, r3, r2
 8002468:	0c9a      	lsrs	r2, r3, #18
 800246a:	4613      	mov	r3, r2
 800246c:	005b      	lsls	r3, r3, #1
 800246e:	4413      	add	r3, r2
 8002470:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002472:	e002      	b.n	800247a <HAL_ADC_Start+0x68>
    {
      counter--;
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	3b01      	subs	r3, #1
 8002478:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d1f9      	bne.n	8002474 <HAL_ADC_Start+0x62>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	f003 0301 	and.w	r3, r3, #1
 800248a:	2b01      	cmp	r3, #1
 800248c:	f040 8090 	bne.w	80025b0 <HAL_ADC_Start+0x19e>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002494:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002498:	f023 0301 	bic.w	r3, r3, #1
 800249c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d007      	beq.n	80024c2 <HAL_ADC_Start+0xb0>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024b6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80024ba:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024c6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80024ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80024ce:	d106      	bne.n	80024de <HAL_ADC_Start+0xcc>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024d4:	f023 0206 	bic.w	r2, r3, #6
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	645a      	str	r2, [r3, #68]	@ 0x44
 80024dc:	e002      	b.n	80024e4 <HAL_ADC_Start+0xd2>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2200      	movs	r2, #0
 80024e2:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2200      	movs	r2, #0
 80024e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80024ec:	f44f 530c 	mov.w	r3, #8960	@ 0x2300
 80024f0:	f2c4 0301 	movt	r3, #16385	@ 0x4001
 80024f4:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80024fe:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	f003 031f 	and.w	r3, r3, #31
 8002508:	2b00      	cmp	r3, #0
 800250a:	d139      	bne.n	8002580 <HAL_ADC_Start+0x16e>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002514:	f2c4 0301 	movt	r3, #16385	@ 0x4001
 8002518:	429a      	cmp	r2, r3
 800251a:	d021      	beq.n	8002560 <HAL_ADC_Start+0x14e>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	f44f 5304 	mov.w	r3, #8448	@ 0x2100
 8002524:	f2c4 0301 	movt	r3, #16385	@ 0x4001
 8002528:	429a      	cmp	r2, r3
 800252a:	d108      	bne.n	800253e <HAL_ADC_Start+0x12c>
 800252c:	f44f 530c 	mov.w	r3, #8960	@ 0x2300
 8002530:	f2c4 0301 	movt	r3, #16385	@ 0x4001
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	f003 031f 	and.w	r3, r3, #31
 800253a:	2b00      	cmp	r3, #0
 800253c:	d010      	beq.n	8002560 <HAL_ADC_Start+0x14e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	f44f 5308 	mov.w	r3, #8704	@ 0x2200
 8002546:	f2c4 0301 	movt	r3, #16385	@ 0x4001
 800254a:	429a      	cmp	r2, r3
 800254c:	d13c      	bne.n	80025c8 <HAL_ADC_Start+0x1b6>
 800254e:	f44f 530c 	mov.w	r3, #8960	@ 0x2300
 8002552:	f2c4 0301 	movt	r3, #16385	@ 0x4001
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	f003 0310 	and.w	r3, r3, #16
 800255c:	2b00      	cmp	r3, #0
 800255e:	d133      	bne.n	80025c8 <HAL_ADC_Start+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800256a:	2b00      	cmp	r3, #0
 800256c:	d12c      	bne.n	80025c8 <HAL_ADC_Start+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	689a      	ldr	r2, [r3, #8]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800257c:	609a      	str	r2, [r3, #8]
 800257e:	e023      	b.n	80025c8 <HAL_ADC_Start+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002588:	f2c4 0301 	movt	r3, #16385	@ 0x4001
 800258c:	429a      	cmp	r2, r3
 800258e:	d11b      	bne.n	80025c8 <HAL_ADC_Start+0x1b6>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800259a:	2b00      	cmp	r3, #0
 800259c:	d114      	bne.n	80025c8 <HAL_ADC_Start+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	689a      	ldr	r2, [r3, #8]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80025ac:	609a      	str	r2, [r3, #8]
 80025ae:	e00b      	b.n	80025c8 <HAL_ADC_Start+0x1b6>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025b4:	f043 0210 	orr.w	r2, r3, #16
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025c0:	f043 0201 	orr.w	r2, r3, #1
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80025c8:	2300      	movs	r3, #0
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	3714      	adds	r7, #20
 80025ce:	46bd      	mov	sp, r7
 80025d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d4:	4770      	bx	lr

080025d6 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80025d6:	b480      	push	{r7}
 80025d8:	b083      	sub	sp, #12
 80025da:	af00      	add	r7, sp, #0
 80025dc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d101      	bne.n	80025ec <HAL_ADC_Stop+0x16>
 80025e8:	2302      	movs	r3, #2
 80025ea:	e021      	b.n	8002630 <HAL_ADC_Stop+0x5a>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2201      	movs	r2, #1
 80025f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	689a      	ldr	r2, [r3, #8]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f022 0201 	bic.w	r2, r2, #1
 8002602:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	f003 0301 	and.w	r3, r3, #1
 800260e:	2b00      	cmp	r3, #0
 8002610:	d109      	bne.n	8002626 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002616:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800261a:	f023 0301 	bic.w	r3, r3, #1
 800261e:	f043 0201 	orr.w	r2, r3, #1
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2200      	movs	r2, #0
 800262a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800262e:	2300      	movs	r3, #0
}
 8002630:	4618      	mov	r0, r3
 8002632:	370c      	adds	r7, #12
 8002634:	46bd      	mov	sp, r7
 8002636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263a:	4770      	bx	lr

0800263c <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b084      	sub	sp, #16
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
 8002644:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002646:	2300      	movs	r3, #0
 8002648:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002654:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002658:	d113      	bne.n	8002682 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002664:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002668:	d10b      	bne.n	8002682 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800266e:	f043 0220 	orr.w	r2, r3, #32
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2200      	movs	r2, #0
 800267a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e063      	b.n	800274a <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8002682:	f7ff fe53 	bl	800232c <HAL_GetTick>
 8002686:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002688:	e021      	b.n	80026ce <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002690:	d01d      	beq.n	80026ce <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d007      	beq.n	80026a8 <HAL_ADC_PollForConversion+0x6c>
 8002698:	f7ff fe48 	bl	800232c <HAL_GetTick>
 800269c:	4602      	mov	r2, r0
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	1ad3      	subs	r3, r2, r3
 80026a2:	683a      	ldr	r2, [r7, #0]
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d212      	bcs.n	80026ce <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 0302 	and.w	r3, r3, #2
 80026b2:	2b02      	cmp	r3, #2
 80026b4:	d00b      	beq.n	80026ce <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ba:	f043 0204 	orr.w	r2, r3, #4
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2200      	movs	r2, #0
 80026c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 80026ca:	2303      	movs	r3, #3
 80026cc:	e03d      	b.n	800274a <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 0302 	and.w	r3, r3, #2
 80026d8:	2b02      	cmp	r3, #2
 80026da:	d1d6      	bne.n	800268a <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f06f 0212 	mvn.w	r2, #18
 80026e4:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ea:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d123      	bne.n	8002748 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002704:	2b00      	cmp	r3, #0
 8002706:	d11f      	bne.n	8002748 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800270e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002712:	2b00      	cmp	r3, #0
 8002714:	d006      	beq.n	8002724 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002720:	2b00      	cmp	r3, #0
 8002722:	d111      	bne.n	8002748 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002728:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002734:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002738:	2b00      	cmp	r3, #0
 800273a:	d105      	bne.n	8002748 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002740:	f043 0201 	orr.w	r2, r3, #1
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8002748:	2300      	movs	r3, #0
}
 800274a:	4618      	mov	r0, r3
 800274c:	3710      	adds	r7, #16
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}

08002752 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002752:	b480      	push	{r7}
 8002754:	b083      	sub	sp, #12
 8002756:	af00      	add	r7, sp, #0
 8002758:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8002760:	4618      	mov	r0, r3
 8002762:	370c      	adds	r7, #12
 8002764:	46bd      	mov	sp, r7
 8002766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276a:	4770      	bx	lr

0800276c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800276c:	b480      	push	{r7}
 800276e:	b085      	sub	sp, #20
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
 8002774:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002776:	2300      	movs	r3, #0
 8002778:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002780:	2b01      	cmp	r3, #1
 8002782:	d101      	bne.n	8002788 <HAL_ADC_ConfigChannel+0x1c>
 8002784:	2302      	movs	r3, #2
 8002786:	e113      	b.n	80029b0 <HAL_ADC_ConfigChannel+0x244>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2201      	movs	r2, #1
 800278c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	2b09      	cmp	r3, #9
 8002796:	d925      	bls.n	80027e4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	68d9      	ldr	r1, [r3, #12]
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	b29b      	uxth	r3, r3
 80027a4:	461a      	mov	r2, r3
 80027a6:	4613      	mov	r3, r2
 80027a8:	005b      	lsls	r3, r3, #1
 80027aa:	4413      	add	r3, r2
 80027ac:	3b1e      	subs	r3, #30
 80027ae:	2207      	movs	r2, #7
 80027b0:	fa02 f303 	lsl.w	r3, r2, r3
 80027b4:	43da      	mvns	r2, r3
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	400a      	ands	r2, r1
 80027bc:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	68d9      	ldr	r1, [r3, #12]
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	689a      	ldr	r2, [r3, #8]
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	b29b      	uxth	r3, r3
 80027ce:	4618      	mov	r0, r3
 80027d0:	4603      	mov	r3, r0
 80027d2:	005b      	lsls	r3, r3, #1
 80027d4:	4403      	add	r3, r0
 80027d6:	3b1e      	subs	r3, #30
 80027d8:	409a      	lsls	r2, r3
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	430a      	orrs	r2, r1
 80027e0:	60da      	str	r2, [r3, #12]
 80027e2:	e022      	b.n	800282a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	6919      	ldr	r1, [r3, #16]
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	b29b      	uxth	r3, r3
 80027f0:	461a      	mov	r2, r3
 80027f2:	4613      	mov	r3, r2
 80027f4:	005b      	lsls	r3, r3, #1
 80027f6:	4413      	add	r3, r2
 80027f8:	2207      	movs	r2, #7
 80027fa:	fa02 f303 	lsl.w	r3, r2, r3
 80027fe:	43da      	mvns	r2, r3
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	400a      	ands	r2, r1
 8002806:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	6919      	ldr	r1, [r3, #16]
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	689a      	ldr	r2, [r3, #8]
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	b29b      	uxth	r3, r3
 8002818:	4618      	mov	r0, r3
 800281a:	4603      	mov	r3, r0
 800281c:	005b      	lsls	r3, r3, #1
 800281e:	4403      	add	r3, r0
 8002820:	409a      	lsls	r2, r3
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	430a      	orrs	r2, r1
 8002828:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	2b06      	cmp	r3, #6
 8002830:	d824      	bhi.n	800287c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	685a      	ldr	r2, [r3, #4]
 800283c:	4613      	mov	r3, r2
 800283e:	009b      	lsls	r3, r3, #2
 8002840:	4413      	add	r3, r2
 8002842:	3b05      	subs	r3, #5
 8002844:	221f      	movs	r2, #31
 8002846:	fa02 f303 	lsl.w	r3, r2, r3
 800284a:	43da      	mvns	r2, r3
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	400a      	ands	r2, r1
 8002852:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	b29b      	uxth	r3, r3
 8002860:	4618      	mov	r0, r3
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	685a      	ldr	r2, [r3, #4]
 8002866:	4613      	mov	r3, r2
 8002868:	009b      	lsls	r3, r3, #2
 800286a:	4413      	add	r3, r2
 800286c:	3b05      	subs	r3, #5
 800286e:	fa00 f203 	lsl.w	r2, r0, r3
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	430a      	orrs	r2, r1
 8002878:	635a      	str	r2, [r3, #52]	@ 0x34
 800287a:	e04c      	b.n	8002916 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	2b0c      	cmp	r3, #12
 8002882:	d824      	bhi.n	80028ce <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	685a      	ldr	r2, [r3, #4]
 800288e:	4613      	mov	r3, r2
 8002890:	009b      	lsls	r3, r3, #2
 8002892:	4413      	add	r3, r2
 8002894:	3b23      	subs	r3, #35	@ 0x23
 8002896:	221f      	movs	r2, #31
 8002898:	fa02 f303 	lsl.w	r3, r2, r3
 800289c:	43da      	mvns	r2, r3
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	400a      	ands	r2, r1
 80028a4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	b29b      	uxth	r3, r3
 80028b2:	4618      	mov	r0, r3
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	685a      	ldr	r2, [r3, #4]
 80028b8:	4613      	mov	r3, r2
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	4413      	add	r3, r2
 80028be:	3b23      	subs	r3, #35	@ 0x23
 80028c0:	fa00 f203 	lsl.w	r2, r0, r3
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	430a      	orrs	r2, r1
 80028ca:	631a      	str	r2, [r3, #48]	@ 0x30
 80028cc:	e023      	b.n	8002916 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	685a      	ldr	r2, [r3, #4]
 80028d8:	4613      	mov	r3, r2
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	4413      	add	r3, r2
 80028de:	3b41      	subs	r3, #65	@ 0x41
 80028e0:	221f      	movs	r2, #31
 80028e2:	fa02 f303 	lsl.w	r3, r2, r3
 80028e6:	43da      	mvns	r2, r3
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	400a      	ands	r2, r1
 80028ee:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	b29b      	uxth	r3, r3
 80028fc:	4618      	mov	r0, r3
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	685a      	ldr	r2, [r3, #4]
 8002902:	4613      	mov	r3, r2
 8002904:	009b      	lsls	r3, r3, #2
 8002906:	4413      	add	r3, r2
 8002908:	3b41      	subs	r3, #65	@ 0x41
 800290a:	fa00 f203 	lsl.w	r2, r0, r3
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	430a      	orrs	r2, r1
 8002914:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002916:	f44f 530c 	mov.w	r3, #8960	@ 0x2300
 800291a:	f2c4 0301 	movt	r3, #16385	@ 0x4001
 800291e:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002928:	f2c4 0301 	movt	r3, #16385	@ 0x4001
 800292c:	429a      	cmp	r2, r3
 800292e:	d109      	bne.n	8002944 <HAL_ADC_ConfigChannel+0x1d8>
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	2b12      	cmp	r3, #18
 8002936:	d105      	bne.n	8002944 <HAL_ADC_ConfigChannel+0x1d8>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800294c:	f2c4 0301 	movt	r3, #16385	@ 0x4001
 8002950:	429a      	cmp	r2, r3
 8002952:	d128      	bne.n	80029a6 <HAL_ADC_ConfigChannel+0x23a>
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	2b10      	cmp	r3, #16
 800295a:	d003      	beq.n	8002964 <HAL_ADC_ConfigChannel+0x1f8>
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	2b11      	cmp	r3, #17
 8002962:	d120      	bne.n	80029a6 <HAL_ADC_ConfigChannel+0x23a>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	2b10      	cmp	r3, #16
 8002976:	d116      	bne.n	80029a6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002978:	f240 0300 	movw	r3, #0
 800297c:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	f64d 6383 	movw	r3, #56963	@ 0xde83
 8002986:	f2c4 331b 	movt	r3, #17179	@ 0x431b
 800298a:	fba3 2302 	umull	r2, r3, r3, r2
 800298e:	0c9b      	lsrs	r3, r3, #18
 8002990:	220a      	movs	r2, #10
 8002992:	fb02 f303 	mul.w	r3, r2, r3
 8002996:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002998:	e002      	b.n	80029a0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	3b01      	subs	r3, #1
 800299e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d1f9      	bne.n	800299a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2200      	movs	r2, #0
 80029aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80029ae:	2300      	movs	r3, #0
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	3714      	adds	r7, #20
 80029b4:	46bd      	mov	sp, r7
 80029b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ba:	4770      	bx	lr

080029bc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80029bc:	b480      	push	{r7}
 80029be:	b085      	sub	sp, #20
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80029c4:	f44f 530c 	mov.w	r3, #8960	@ 0x2300
 80029c8:	f2c4 0301 	movt	r3, #16385	@ 0x4001
 80029cc:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	685a      	ldr	r2, [r3, #4]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	431a      	orrs	r2, r3
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	685a      	ldr	r2, [r3, #4]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80029f6:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	6859      	ldr	r1, [r3, #4]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	691b      	ldr	r3, [r3, #16]
 8002a02:	021a      	lsls	r2, r3, #8
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	430a      	orrs	r2, r1
 8002a0a:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	685a      	ldr	r2, [r3, #4]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002a1a:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	6859      	ldr	r1, [r3, #4]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	689a      	ldr	r2, [r3, #8]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	430a      	orrs	r2, r1
 8002a2c:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	689a      	ldr	r2, [r3, #8]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a3c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	6899      	ldr	r1, [r3, #8]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	68da      	ldr	r2, [r3, #12]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	430a      	orrs	r2, r1
 8002a4e:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002a54:	2301      	movs	r3, #1
 8002a56:	f6c0 7300 	movt	r3, #3840	@ 0xf00
 8002a5a:	429a      	cmp	r2, r3
 8002a5c:	d022      	beq.n	8002aa4 <ADC_Init+0xe8>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	689a      	ldr	r2, [r3, #8]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002a6c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	6899      	ldr	r1, [r3, #8]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	430a      	orrs	r2, r1
 8002a7e:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	689a      	ldr	r2, [r3, #8]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002a8e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	6899      	ldr	r1, [r3, #8]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	430a      	orrs	r2, r1
 8002aa0:	609a      	str	r2, [r3, #8]
 8002aa2:	e00f      	b.n	8002ac4 <ADC_Init+0x108>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	689a      	ldr	r2, [r3, #8]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002ab2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	689a      	ldr	r2, [r3, #8]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002ac2:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	689a      	ldr	r2, [r3, #8]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f022 0202 	bic.w	r2, r2, #2
 8002ad2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	6899      	ldr	r1, [r3, #8]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	7e1b      	ldrb	r3, [r3, #24]
 8002ade:	005a      	lsls	r2, r3, #1
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	430a      	orrs	r2, r1
 8002ae6:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d01b      	beq.n	8002b2a <ADC_Init+0x16e>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	685a      	ldr	r2, [r3, #4]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002b00:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	685a      	ldr	r2, [r3, #4]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002b10:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	6859      	ldr	r1, [r3, #4]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b1c:	3b01      	subs	r3, #1
 8002b1e:	035a      	lsls	r2, r3, #13
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	430a      	orrs	r2, r1
 8002b26:	605a      	str	r2, [r3, #4]
 8002b28:	e007      	b.n	8002b3a <ADC_Init+0x17e>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	685a      	ldr	r2, [r3, #4]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002b38:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002b48:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	69db      	ldr	r3, [r3, #28]
 8002b54:	3b01      	subs	r3, #1
 8002b56:	051a      	lsls	r2, r3, #20
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	430a      	orrs	r2, r1
 8002b5e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	689a      	ldr	r2, [r3, #8]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002b6e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	6899      	ldr	r1, [r3, #8]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002b7c:	025a      	lsls	r2, r3, #9
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	430a      	orrs	r2, r1
 8002b84:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	689a      	ldr	r2, [r3, #8]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b94:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	6899      	ldr	r1, [r3, #8]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	695b      	ldr	r3, [r3, #20]
 8002ba0:	029a      	lsls	r2, r3, #10
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	430a      	orrs	r2, r1
 8002ba8:	609a      	str	r2, [r3, #8]
}
 8002baa:	bf00      	nop
 8002bac:	3714      	adds	r7, #20
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb4:	4770      	bx	lr

08002bb6 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bb6:	b480      	push	{r7}
 8002bb8:	b085      	sub	sp, #20
 8002bba:	af00      	add	r7, sp, #0
 8002bbc:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	f003 0307 	and.w	r3, r3, #7
 8002bc4:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002bc6:	f44f 436d 	mov.w	r3, #60672	@ 0xed00
 8002bca:	f2ce 0300 	movt	r3, #57344	@ 0xe000
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002bd2:	68ba      	ldr	r2, [r7, #8]
 8002bd4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002bd8:	4013      	ands	r3, r2
 8002bda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002be4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002be8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002bec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002bee:	f44f 436d 	mov.w	r3, #60672	@ 0xed00
 8002bf2:	f2ce 0300 	movt	r3, #57344	@ 0xe000
 8002bf6:	68ba      	ldr	r2, [r7, #8]
 8002bf8:	60da      	str	r2, [r3, #12]
}
 8002bfa:	bf00      	nop
 8002bfc:	3714      	adds	r7, #20
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c04:	4770      	bx	lr

08002c06 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c06:	b480      	push	{r7}
 8002c08:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c0a:	f44f 436d 	mov.w	r3, #60672	@ 0xed00
 8002c0e:	f2ce 0300 	movt	r3, #57344	@ 0xe000
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	0a1b      	lsrs	r3, r3, #8
 8002c16:	f003 0307 	and.w	r3, r3, #7
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c22:	4770      	bx	lr

08002c24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b083      	sub	sp, #12
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	db0e      	blt.n	8002c54 <__NVIC_EnableIRQ+0x30>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c36:	79fb      	ldrb	r3, [r7, #7]
 8002c38:	f003 011f 	and.w	r1, r3, #31
 8002c3c:	f44f 4361 	mov.w	r3, #57600	@ 0xe100
 8002c40:	f2ce 0300 	movt	r3, #57344	@ 0xe000
 8002c44:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8002c48:	0952      	lsrs	r2, r2, #5
 8002c4a:	2001      	movs	r0, #1
 8002c4c:	fa00 f101 	lsl.w	r1, r0, r1
 8002c50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002c54:	bf00      	nop
 8002c56:	370c      	adds	r7, #12
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr

08002c60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b083      	sub	sp, #12
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	4603      	mov	r3, r0
 8002c68:	6039      	str	r1, [r7, #0]
 8002c6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	db0e      	blt.n	8002c92 <__NVIC_SetPriority+0x32>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	b2d9      	uxtb	r1, r3
 8002c78:	f44f 4361 	mov.w	r3, #57600	@ 0xe100
 8002c7c:	f2ce 0300 	movt	r3, #57344	@ 0xe000
 8002c80:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8002c84:	0109      	lsls	r1, r1, #4
 8002c86:	b2c9      	uxtb	r1, r1
 8002c88:	4413      	add	r3, r2
 8002c8a:	460a      	mov	r2, r1
 8002c8c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c90:	e00e      	b.n	8002cb0 <__NVIC_SetPriority+0x50>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	b2d9      	uxtb	r1, r3
 8002c96:	f44f 436d 	mov.w	r3, #60672	@ 0xed00
 8002c9a:	f2ce 0300 	movt	r3, #57344	@ 0xe000
 8002c9e:	79fa      	ldrb	r2, [r7, #7]
 8002ca0:	f002 020f 	and.w	r2, r2, #15
 8002ca4:	3a04      	subs	r2, #4
 8002ca6:	0109      	lsls	r1, r1, #4
 8002ca8:	b2c9      	uxtb	r1, r1
 8002caa:	4413      	add	r3, r2
 8002cac:	460a      	mov	r2, r1
 8002cae:	761a      	strb	r2, [r3, #24]
}
 8002cb0:	bf00      	nop
 8002cb2:	370c      	adds	r7, #12
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cba:	4770      	bx	lr

08002cbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b089      	sub	sp, #36	@ 0x24
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	60f8      	str	r0, [r7, #12]
 8002cc4:	60b9      	str	r1, [r7, #8]
 8002cc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	f003 0307 	and.w	r3, r3, #7
 8002cce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002cd0:	69fb      	ldr	r3, [r7, #28]
 8002cd2:	f1c3 0307 	rsb	r3, r3, #7
 8002cd6:	2b04      	cmp	r3, #4
 8002cd8:	bf28      	it	cs
 8002cda:	2304      	movcs	r3, #4
 8002cdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002cde:	69fb      	ldr	r3, [r7, #28]
 8002ce0:	3304      	adds	r3, #4
 8002ce2:	2b06      	cmp	r3, #6
 8002ce4:	d902      	bls.n	8002cec <NVIC_EncodePriority+0x30>
 8002ce6:	69fb      	ldr	r3, [r7, #28]
 8002ce8:	3b03      	subs	r3, #3
 8002cea:	e000      	b.n	8002cee <NVIC_EncodePriority+0x32>
 8002cec:	2300      	movs	r3, #0
 8002cee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cf0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002cf4:	69bb      	ldr	r3, [r7, #24]
 8002cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cfa:	43da      	mvns	r2, r3
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	401a      	ands	r2, r3
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d04:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d0e:	43d9      	mvns	r1, r3
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d14:	4313      	orrs	r3, r2
         );
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	3724      	adds	r7, #36	@ 0x24
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d20:	4770      	bx	lr

08002d22 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d22:	b580      	push	{r7, lr}
 8002d24:	b082      	sub	sp, #8
 8002d26:	af00      	add	r7, sp, #0
 8002d28:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d2a:	6878      	ldr	r0, [r7, #4]
 8002d2c:	f7ff ff43 	bl	8002bb6 <__NVIC_SetPriorityGrouping>
}
 8002d30:	bf00      	nop
 8002d32:	3708      	adds	r7, #8
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}

08002d38 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b086      	sub	sp, #24
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	4603      	mov	r3, r0
 8002d40:	60b9      	str	r1, [r7, #8]
 8002d42:	607a      	str	r2, [r7, #4]
 8002d44:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d46:	2300      	movs	r3, #0
 8002d48:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d4a:	f7ff ff5c 	bl	8002c06 <__NVIC_GetPriorityGrouping>
 8002d4e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d50:	687a      	ldr	r2, [r7, #4]
 8002d52:	68b9      	ldr	r1, [r7, #8]
 8002d54:	6978      	ldr	r0, [r7, #20]
 8002d56:	f7ff ffb1 	bl	8002cbc <NVIC_EncodePriority>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d60:	4611      	mov	r1, r2
 8002d62:	4618      	mov	r0, r3
 8002d64:	f7ff ff7c 	bl	8002c60 <__NVIC_SetPriority>
}
 8002d68:	bf00      	nop
 8002d6a:	3718      	adds	r7, #24
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}

08002d70 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b082      	sub	sp, #8
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	4603      	mov	r3, r0
 8002d78:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f7ff ff50 	bl	8002c24 <__NVIC_EnableIRQ>
}
 8002d84:	bf00      	nop
 8002d86:	3708      	adds	r7, #8
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}

08002d8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b089      	sub	sp, #36	@ 0x24
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
 8002d94:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002d96:	2300      	movs	r3, #0
 8002d98:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002da2:	2300      	movs	r3, #0
 8002da4:	61fb      	str	r3, [r7, #28]
 8002da6:	e1a9      	b.n	80030fc <HAL_GPIO_Init+0x370>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002da8:	2201      	movs	r2, #1
 8002daa:	69fb      	ldr	r3, [r7, #28]
 8002dac:	fa02 f303 	lsl.w	r3, r2, r3
 8002db0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	697a      	ldr	r2, [r7, #20]
 8002db8:	4013      	ands	r3, r2
 8002dba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002dbc:	693a      	ldr	r2, [r7, #16]
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	f040 8198 	bne.w	80030f6 <HAL_GPIO_Init+0x36a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	f003 0303 	and.w	r3, r3, #3
 8002dce:	2b01      	cmp	r3, #1
 8002dd0:	d005      	beq.n	8002dde <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002dda:	2b02      	cmp	r3, #2
 8002ddc:	d130      	bne.n	8002e40 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	689b      	ldr	r3, [r3, #8]
 8002de2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002de4:	69fb      	ldr	r3, [r7, #28]
 8002de6:	005b      	lsls	r3, r3, #1
 8002de8:	2203      	movs	r2, #3
 8002dea:	fa02 f303 	lsl.w	r3, r2, r3
 8002dee:	43db      	mvns	r3, r3
 8002df0:	69ba      	ldr	r2, [r7, #24]
 8002df2:	4013      	ands	r3, r2
 8002df4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	68da      	ldr	r2, [r3, #12]
 8002dfa:	69fb      	ldr	r3, [r7, #28]
 8002dfc:	005b      	lsls	r3, r3, #1
 8002dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8002e02:	69ba      	ldr	r2, [r7, #24]
 8002e04:	4313      	orrs	r3, r2
 8002e06:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	69ba      	ldr	r2, [r7, #24]
 8002e0c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e14:	2201      	movs	r2, #1
 8002e16:	69fb      	ldr	r3, [r7, #28]
 8002e18:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1c:	43db      	mvns	r3, r3
 8002e1e:	69ba      	ldr	r2, [r7, #24]
 8002e20:	4013      	ands	r3, r2
 8002e22:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	091b      	lsrs	r3, r3, #4
 8002e2a:	f003 0201 	and.w	r2, r3, #1
 8002e2e:	69fb      	ldr	r3, [r7, #28]
 8002e30:	fa02 f303 	lsl.w	r3, r2, r3
 8002e34:	69ba      	ldr	r2, [r7, #24]
 8002e36:	4313      	orrs	r3, r2
 8002e38:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	69ba      	ldr	r2, [r7, #24]
 8002e3e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	f003 0303 	and.w	r3, r3, #3
 8002e48:	2b03      	cmp	r3, #3
 8002e4a:	d017      	beq.n	8002e7c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	68db      	ldr	r3, [r3, #12]
 8002e50:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002e52:	69fb      	ldr	r3, [r7, #28]
 8002e54:	005b      	lsls	r3, r3, #1
 8002e56:	2203      	movs	r2, #3
 8002e58:	fa02 f303 	lsl.w	r3, r2, r3
 8002e5c:	43db      	mvns	r3, r3
 8002e5e:	69ba      	ldr	r2, [r7, #24]
 8002e60:	4013      	ands	r3, r2
 8002e62:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	689a      	ldr	r2, [r3, #8]
 8002e68:	69fb      	ldr	r3, [r7, #28]
 8002e6a:	005b      	lsls	r3, r3, #1
 8002e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e70:	69ba      	ldr	r2, [r7, #24]
 8002e72:	4313      	orrs	r3, r2
 8002e74:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	69ba      	ldr	r2, [r7, #24]
 8002e7a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	f003 0303 	and.w	r3, r3, #3
 8002e84:	2b02      	cmp	r3, #2
 8002e86:	d123      	bne.n	8002ed0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e88:	69fb      	ldr	r3, [r7, #28]
 8002e8a:	08da      	lsrs	r2, r3, #3
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	3208      	adds	r2, #8
 8002e90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e94:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002e96:	69fb      	ldr	r3, [r7, #28]
 8002e98:	f003 0307 	and.w	r3, r3, #7
 8002e9c:	009b      	lsls	r3, r3, #2
 8002e9e:	220f      	movs	r2, #15
 8002ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea4:	43db      	mvns	r3, r3
 8002ea6:	69ba      	ldr	r2, [r7, #24]
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	691a      	ldr	r2, [r3, #16]
 8002eb0:	69fb      	ldr	r3, [r7, #28]
 8002eb2:	f003 0307 	and.w	r3, r3, #7
 8002eb6:	009b      	lsls	r3, r3, #2
 8002eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ebc:	69ba      	ldr	r2, [r7, #24]
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002ec2:	69fb      	ldr	r3, [r7, #28]
 8002ec4:	08da      	lsrs	r2, r3, #3
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	3208      	adds	r2, #8
 8002eca:	69b9      	ldr	r1, [r7, #24]
 8002ecc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002ed6:	69fb      	ldr	r3, [r7, #28]
 8002ed8:	005b      	lsls	r3, r3, #1
 8002eda:	2203      	movs	r2, #3
 8002edc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee0:	43db      	mvns	r3, r3
 8002ee2:	69ba      	ldr	r2, [r7, #24]
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	f003 0203 	and.w	r2, r3, #3
 8002ef0:	69fb      	ldr	r3, [r7, #28]
 8002ef2:	005b      	lsls	r3, r3, #1
 8002ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef8:	69ba      	ldr	r2, [r7, #24]
 8002efa:	4313      	orrs	r3, r2
 8002efc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	69ba      	ldr	r2, [r7, #24]
 8002f02:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	f000 80f2 	beq.w	80030f6 <HAL_GPIO_Init+0x36a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f12:	2300      	movs	r3, #0
 8002f14:	60fb      	str	r3, [r7, #12]
 8002f16:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8002f1a:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8002f1e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002f20:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8002f24:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8002f28:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002f2c:	645a      	str	r2, [r3, #68]	@ 0x44
 8002f2e:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8002f32:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8002f36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f38:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f3c:	60fb      	str	r3, [r7, #12]
 8002f3e:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f40:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8002f44:	f2c4 0301 	movt	r3, #16385	@ 0x4001
 8002f48:	69fa      	ldr	r2, [r7, #28]
 8002f4a:	0892      	lsrs	r2, r2, #2
 8002f4c:	3202      	adds	r2, #2
 8002f4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002f54:	69fb      	ldr	r3, [r7, #28]
 8002f56:	f003 0303 	and.w	r3, r3, #3
 8002f5a:	009b      	lsls	r3, r3, #2
 8002f5c:	220f      	movs	r2, #15
 8002f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f62:	43db      	mvns	r3, r3
 8002f64:	69ba      	ldr	r2, [r7, #24]
 8002f66:	4013      	ands	r3, r2
 8002f68:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002f6a:	687a      	ldr	r2, [r7, #4]
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8002f72:	429a      	cmp	r2, r3
 8002f74:	d040      	beq.n	8002ff8 <HAL_GPIO_Init+0x26c>
 8002f76:	687a      	ldr	r2, [r7, #4]
 8002f78:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002f7c:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d037      	beq.n	8002ff4 <HAL_GPIO_Init+0x268>
 8002f84:	687a      	ldr	r2, [r7, #4]
 8002f86:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002f8a:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8002f8e:	429a      	cmp	r2, r3
 8002f90:	d02e      	beq.n	8002ff0 <HAL_GPIO_Init+0x264>
 8002f92:	687a      	ldr	r2, [r7, #4]
 8002f94:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002f98:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	d025      	beq.n	8002fec <HAL_GPIO_Init+0x260>
 8002fa0:	687a      	ldr	r2, [r7, #4]
 8002fa2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002fa6:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8002faa:	429a      	cmp	r2, r3
 8002fac:	d01c      	beq.n	8002fe8 <HAL_GPIO_Init+0x25c>
 8002fae:	687a      	ldr	r2, [r7, #4]
 8002fb0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002fb4:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d013      	beq.n	8002fe4 <HAL_GPIO_Init+0x258>
 8002fbc:	687a      	ldr	r2, [r7, #4]
 8002fbe:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8002fc2:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d00a      	beq.n	8002fe0 <HAL_GPIO_Init+0x254>
 8002fca:	687a      	ldr	r2, [r7, #4]
 8002fcc:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8002fd0:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d101      	bne.n	8002fdc <HAL_GPIO_Init+0x250>
 8002fd8:	2307      	movs	r3, #7
 8002fda:	e00e      	b.n	8002ffa <HAL_GPIO_Init+0x26e>
 8002fdc:	2308      	movs	r3, #8
 8002fde:	e00c      	b.n	8002ffa <HAL_GPIO_Init+0x26e>
 8002fe0:	2306      	movs	r3, #6
 8002fe2:	e00a      	b.n	8002ffa <HAL_GPIO_Init+0x26e>
 8002fe4:	2305      	movs	r3, #5
 8002fe6:	e008      	b.n	8002ffa <HAL_GPIO_Init+0x26e>
 8002fe8:	2304      	movs	r3, #4
 8002fea:	e006      	b.n	8002ffa <HAL_GPIO_Init+0x26e>
 8002fec:	2303      	movs	r3, #3
 8002fee:	e004      	b.n	8002ffa <HAL_GPIO_Init+0x26e>
 8002ff0:	2302      	movs	r3, #2
 8002ff2:	e002      	b.n	8002ffa <HAL_GPIO_Init+0x26e>
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	e000      	b.n	8002ffa <HAL_GPIO_Init+0x26e>
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	69fa      	ldr	r2, [r7, #28]
 8002ffc:	f002 0203 	and.w	r2, r2, #3
 8003000:	0092      	lsls	r2, r2, #2
 8003002:	4093      	lsls	r3, r2
 8003004:	69ba      	ldr	r2, [r7, #24]
 8003006:	4313      	orrs	r3, r2
 8003008:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800300a:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 800300e:	f2c4 0301 	movt	r3, #16385	@ 0x4001
 8003012:	69fa      	ldr	r2, [r7, #28]
 8003014:	0892      	lsrs	r2, r2, #2
 8003016:	3202      	adds	r2, #2
 8003018:	69b9      	ldr	r1, [r7, #24]
 800301a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800301e:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8003022:	f2c4 0301 	movt	r3, #16385	@ 0x4001
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	43db      	mvns	r3, r3
 800302e:	69ba      	ldr	r2, [r7, #24]
 8003030:	4013      	ands	r3, r2
 8003032:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800303c:	2b00      	cmp	r3, #0
 800303e:	d003      	beq.n	8003048 <HAL_GPIO_Init+0x2bc>
        {
          temp |= iocurrent;
 8003040:	69ba      	ldr	r2, [r7, #24]
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	4313      	orrs	r3, r2
 8003046:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003048:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800304c:	f2c4 0301 	movt	r3, #16385	@ 0x4001
 8003050:	69ba      	ldr	r2, [r7, #24]
 8003052:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003054:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8003058:	f2c4 0301 	movt	r3, #16385	@ 0x4001
 800305c:	68db      	ldr	r3, [r3, #12]
 800305e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	43db      	mvns	r3, r3
 8003064:	69ba      	ldr	r2, [r7, #24]
 8003066:	4013      	ands	r3, r2
 8003068:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003072:	2b00      	cmp	r3, #0
 8003074:	d003      	beq.n	800307e <HAL_GPIO_Init+0x2f2>
        {
          temp |= iocurrent;
 8003076:	69ba      	ldr	r2, [r7, #24]
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	4313      	orrs	r3, r2
 800307c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800307e:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8003082:	f2c4 0301 	movt	r3, #16385	@ 0x4001
 8003086:	69ba      	ldr	r2, [r7, #24]
 8003088:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 800308a:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800308e:	f2c4 0301 	movt	r3, #16385	@ 0x4001
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	43db      	mvns	r3, r3
 800309a:	69ba      	ldr	r2, [r7, #24]
 800309c:	4013      	ands	r3, r2
 800309e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d003      	beq.n	80030b4 <HAL_GPIO_Init+0x328>
        {
          temp |= iocurrent;
 80030ac:	69ba      	ldr	r2, [r7, #24]
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	4313      	orrs	r3, r2
 80030b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80030b4:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80030b8:	f2c4 0301 	movt	r3, #16385	@ 0x4001
 80030bc:	69ba      	ldr	r2, [r7, #24]
 80030be:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80030c0:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80030c4:	f2c4 0301 	movt	r3, #16385	@ 0x4001
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	43db      	mvns	r3, r3
 80030d0:	69ba      	ldr	r2, [r7, #24]
 80030d2:	4013      	ands	r3, r2
 80030d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d003      	beq.n	80030ea <HAL_GPIO_Init+0x35e>
        {
          temp |= iocurrent;
 80030e2:	69ba      	ldr	r2, [r7, #24]
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	4313      	orrs	r3, r2
 80030e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80030ea:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80030ee:	f2c4 0301 	movt	r3, #16385	@ 0x4001
 80030f2:	69ba      	ldr	r2, [r7, #24]
 80030f4:	601a      	str	r2, [r3, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030f6:	69fb      	ldr	r3, [r7, #28]
 80030f8:	3301      	adds	r3, #1
 80030fa:	61fb      	str	r3, [r7, #28]
 80030fc:	69fb      	ldr	r3, [r7, #28]
 80030fe:	2b0f      	cmp	r3, #15
 8003100:	f67f ae52 	bls.w	8002da8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003104:	bf00      	nop
 8003106:	bf00      	nop
 8003108:	3724      	adds	r7, #36	@ 0x24
 800310a:	46bd      	mov	sp, r7
 800310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003110:	4770      	bx	lr

08003112 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003112:	b480      	push	{r7}
 8003114:	b085      	sub	sp, #20
 8003116:	af00      	add	r7, sp, #0
 8003118:	6078      	str	r0, [r7, #4]
 800311a:	460b      	mov	r3, r1
 800311c:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	691a      	ldr	r2, [r3, #16]
 8003122:	887b      	ldrh	r3, [r7, #2]
 8003124:	4013      	ands	r3, r2
 8003126:	2b00      	cmp	r3, #0
 8003128:	d002      	beq.n	8003130 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800312a:	2301      	movs	r3, #1
 800312c:	73fb      	strb	r3, [r7, #15]
 800312e:	e001      	b.n	8003134 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003130:	2300      	movs	r3, #0
 8003132:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003134:	7bfb      	ldrb	r3, [r7, #15]
}
 8003136:	4618      	mov	r0, r3
 8003138:	3714      	adds	r7, #20
 800313a:	46bd      	mov	sp, r7
 800313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003140:	4770      	bx	lr

08003142 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003142:	b480      	push	{r7}
 8003144:	b083      	sub	sp, #12
 8003146:	af00      	add	r7, sp, #0
 8003148:	6078      	str	r0, [r7, #4]
 800314a:	460b      	mov	r3, r1
 800314c:	807b      	strh	r3, [r7, #2]
 800314e:	4613      	mov	r3, r2
 8003150:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003152:	787b      	ldrb	r3, [r7, #1]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d003      	beq.n	8003160 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003158:	887a      	ldrh	r2, [r7, #2]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800315e:	e003      	b.n	8003168 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003160:	887b      	ldrh	r3, [r7, #2]
 8003162:	041a      	lsls	r2, r3, #16
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	619a      	str	r2, [r3, #24]
}
 8003168:	bf00      	nop
 800316a:	370c      	adds	r7, #12
 800316c:	46bd      	mov	sp, r7
 800316e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003172:	4770      	bx	lr

08003174 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003174:	b480      	push	{r7}
 8003176:	b085      	sub	sp, #20
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
 800317c:	460b      	mov	r3, r1
 800317e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	695b      	ldr	r3, [r3, #20]
 8003184:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003186:	887a      	ldrh	r2, [r7, #2]
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	4013      	ands	r3, r2
 800318c:	041a      	lsls	r2, r3, #16
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	43d9      	mvns	r1, r3
 8003192:	887b      	ldrh	r3, [r7, #2]
 8003194:	400b      	ands	r3, r1
 8003196:	431a      	orrs	r2, r3
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	619a      	str	r2, [r3, #24]
}
 800319c:	bf00      	nop
 800319e:	3714      	adds	r7, #20
 80031a0:	46bd      	mov	sp, r7
 80031a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a6:	4770      	bx	lr

080031a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b086      	sub	sp, #24
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d101      	bne.n	80031ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	e316      	b.n	80037e8 <HAL_RCC_OscConfig+0x640>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 0301 	and.w	r3, r3, #1
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	f000 80a6 	beq.w	8003314 <HAL_RCC_OscConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80031c8:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 80031cc:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	f003 030c 	and.w	r3, r3, #12
 80031d6:	2b04      	cmp	r3, #4
 80031d8:	d012      	beq.n	8003200 <HAL_RCC_OscConfig+0x58>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031da:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 80031de:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80031e8:	2b08      	cmp	r3, #8
 80031ea:	d118      	bne.n	800321e <HAL_RCC_OscConfig+0x76>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031ec:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 80031f0:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80031fa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80031fe:	d10e      	bne.n	800321e <HAL_RCC_OscConfig+0x76>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003200:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8003204:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800320e:	2b00      	cmp	r3, #0
 8003210:	d07f      	beq.n	8003312 <HAL_RCC_OscConfig+0x16a>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d17b      	bne.n	8003312 <HAL_RCC_OscConfig+0x16a>
      {
        return HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	e2e4      	b.n	80037e8 <HAL_RCC_OscConfig+0x640>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003226:	d10c      	bne.n	8003242 <HAL_RCC_OscConfig+0x9a>
 8003228:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 800322c:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8003236:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 800323a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800323e:	601a      	str	r2, [r3, #0]
 8003240:	e035      	b.n	80032ae <HAL_RCC_OscConfig+0x106>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800324a:	d118      	bne.n	800327e <HAL_RCC_OscConfig+0xd6>
 800324c:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8003250:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 800325a:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 800325e:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8003262:	601a      	str	r2, [r3, #0]
 8003264:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8003268:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 800326c:	681a      	ldr	r2, [r3, #0]
 800326e:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8003272:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8003276:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800327a:	601a      	str	r2, [r3, #0]
 800327c:	e017      	b.n	80032ae <HAL_RCC_OscConfig+0x106>
 800327e:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8003282:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 800328c:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8003290:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003294:	601a      	str	r2, [r3, #0]
 8003296:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 800329a:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 80032a4:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 80032a8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80032ac:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d016      	beq.n	80032e4 <HAL_RCC_OscConfig+0x13c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032b6:	f7ff f839 	bl	800232c <HAL_GetTick>
 80032ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032bc:	e008      	b.n	80032d0 <HAL_RCC_OscConfig+0x128>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032be:	f7ff f835 	bl	800232c <HAL_GetTick>
 80032c2:	4602      	mov	r2, r0
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	1ad3      	subs	r3, r2, r3
 80032c8:	2b64      	cmp	r3, #100	@ 0x64
 80032ca:	d901      	bls.n	80032d0 <HAL_RCC_OscConfig+0x128>
          {
            return HAL_TIMEOUT;
 80032cc:	2303      	movs	r3, #3
 80032ce:	e28b      	b.n	80037e8 <HAL_RCC_OscConfig+0x640>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032d0:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 80032d4:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d0ed      	beq.n	80032be <HAL_RCC_OscConfig+0x116>
 80032e2:	e017      	b.n	8003314 <HAL_RCC_OscConfig+0x16c>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032e4:	f7ff f822 	bl	800232c <HAL_GetTick>
 80032e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032ea:	e008      	b.n	80032fe <HAL_RCC_OscConfig+0x156>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032ec:	f7ff f81e 	bl	800232c <HAL_GetTick>
 80032f0:	4602      	mov	r2, r0
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	1ad3      	subs	r3, r2, r3
 80032f6:	2b64      	cmp	r3, #100	@ 0x64
 80032f8:	d901      	bls.n	80032fe <HAL_RCC_OscConfig+0x156>
          {
            return HAL_TIMEOUT;
 80032fa:	2303      	movs	r3, #3
 80032fc:	e274      	b.n	80037e8 <HAL_RCC_OscConfig+0x640>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032fe:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8003302:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800330c:	2b00      	cmp	r3, #0
 800330e:	d1ed      	bne.n	80032ec <HAL_RCC_OscConfig+0x144>
 8003310:	e000      	b.n	8003314 <HAL_RCC_OscConfig+0x16c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003312:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f003 0302 	and.w	r3, r3, #2
 800331c:	2b00      	cmp	r3, #0
 800331e:	f000 8086 	beq.w	800342e <HAL_RCC_OscConfig+0x286>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003322:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8003326:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	f003 030c 	and.w	r3, r3, #12
 8003330:	2b00      	cmp	r3, #0
 8003332:	d011      	beq.n	8003358 <HAL_RCC_OscConfig+0x1b0>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003334:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8003338:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003342:	2b08      	cmp	r3, #8
 8003344:	d128      	bne.n	8003398 <HAL_RCC_OscConfig+0x1f0>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003346:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 800334a:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003354:	2b00      	cmp	r3, #0
 8003356:	d11f      	bne.n	8003398 <HAL_RCC_OscConfig+0x1f0>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003358:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 800335c:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 0302 	and.w	r3, r3, #2
 8003366:	2b00      	cmp	r3, #0
 8003368:	d005      	beq.n	8003376 <HAL_RCC_OscConfig+0x1ce>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	68db      	ldr	r3, [r3, #12]
 800336e:	2b01      	cmp	r3, #1
 8003370:	d001      	beq.n	8003376 <HAL_RCC_OscConfig+0x1ce>
      {
        return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e238      	b.n	80037e8 <HAL_RCC_OscConfig+0x640>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003376:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 800337a:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f023 01f8 	bic.w	r1, r3, #248	@ 0xf8
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	691b      	ldr	r3, [r3, #16]
 8003388:	00da      	lsls	r2, r3, #3
 800338a:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 800338e:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8003392:	430a      	orrs	r2, r1
 8003394:	601a      	str	r2, [r3, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003396:	e04a      	b.n	800342e <HAL_RCC_OscConfig+0x286>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	68db      	ldr	r3, [r3, #12]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d02b      	beq.n	80033f8 <HAL_RCC_OscConfig+0x250>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033a0:	2300      	movs	r3, #0
 80033a2:	f2c4 2347 	movt	r3, #16967	@ 0x4247
 80033a6:	2201      	movs	r2, #1
 80033a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033aa:	f7fe ffbf 	bl	800232c <HAL_GetTick>
 80033ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033b0:	e008      	b.n	80033c4 <HAL_RCC_OscConfig+0x21c>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033b2:	f7fe ffbb 	bl	800232c <HAL_GetTick>
 80033b6:	4602      	mov	r2, r0
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	1ad3      	subs	r3, r2, r3
 80033bc:	2b02      	cmp	r3, #2
 80033be:	d901      	bls.n	80033c4 <HAL_RCC_OscConfig+0x21c>
          {
            return HAL_TIMEOUT;
 80033c0:	2303      	movs	r3, #3
 80033c2:	e211      	b.n	80037e8 <HAL_RCC_OscConfig+0x640>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033c4:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 80033c8:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 0302 	and.w	r3, r3, #2
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d0ed      	beq.n	80033b2 <HAL_RCC_OscConfig+0x20a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033d6:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 80033da:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f023 01f8 	bic.w	r1, r3, #248	@ 0xf8
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	691b      	ldr	r3, [r3, #16]
 80033e8:	00da      	lsls	r2, r3, #3
 80033ea:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 80033ee:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 80033f2:	430a      	orrs	r2, r1
 80033f4:	601a      	str	r2, [r3, #0]
 80033f6:	e01a      	b.n	800342e <HAL_RCC_OscConfig+0x286>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033f8:	2300      	movs	r3, #0
 80033fa:	f2c4 2347 	movt	r3, #16967	@ 0x4247
 80033fe:	2200      	movs	r2, #0
 8003400:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003402:	f7fe ff93 	bl	800232c <HAL_GetTick>
 8003406:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003408:	e008      	b.n	800341c <HAL_RCC_OscConfig+0x274>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800340a:	f7fe ff8f 	bl	800232c <HAL_GetTick>
 800340e:	4602      	mov	r2, r0
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	1ad3      	subs	r3, r2, r3
 8003414:	2b02      	cmp	r3, #2
 8003416:	d901      	bls.n	800341c <HAL_RCC_OscConfig+0x274>
          {
            return HAL_TIMEOUT;
 8003418:	2303      	movs	r3, #3
 800341a:	e1e5      	b.n	80037e8 <HAL_RCC_OscConfig+0x640>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800341c:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8003420:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f003 0302 	and.w	r3, r3, #2
 800342a:	2b00      	cmp	r3, #0
 800342c:	d1ed      	bne.n	800340a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 0308 	and.w	r3, r3, #8
 8003436:	2b00      	cmp	r3, #0
 8003438:	d03c      	beq.n	80034b4 <HAL_RCC_OscConfig+0x30c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	695b      	ldr	r3, [r3, #20]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d01c      	beq.n	800347c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003442:	f44f 6368 	mov.w	r3, #3712	@ 0xe80
 8003446:	f2c4 2347 	movt	r3, #16967	@ 0x4247
 800344a:	2201      	movs	r2, #1
 800344c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800344e:	f7fe ff6d 	bl	800232c <HAL_GetTick>
 8003452:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003454:	e008      	b.n	8003468 <HAL_RCC_OscConfig+0x2c0>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003456:	f7fe ff69 	bl	800232c <HAL_GetTick>
 800345a:	4602      	mov	r2, r0
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	1ad3      	subs	r3, r2, r3
 8003460:	2b02      	cmp	r3, #2
 8003462:	d901      	bls.n	8003468 <HAL_RCC_OscConfig+0x2c0>
        {
          return HAL_TIMEOUT;
 8003464:	2303      	movs	r3, #3
 8003466:	e1bf      	b.n	80037e8 <HAL_RCC_OscConfig+0x640>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003468:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 800346c:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8003470:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003472:	f003 0302 	and.w	r3, r3, #2
 8003476:	2b00      	cmp	r3, #0
 8003478:	d0ed      	beq.n	8003456 <HAL_RCC_OscConfig+0x2ae>
 800347a:	e01b      	b.n	80034b4 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800347c:	f44f 6368 	mov.w	r3, #3712	@ 0xe80
 8003480:	f2c4 2347 	movt	r3, #16967	@ 0x4247
 8003484:	2200      	movs	r2, #0
 8003486:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003488:	f7fe ff50 	bl	800232c <HAL_GetTick>
 800348c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800348e:	e008      	b.n	80034a2 <HAL_RCC_OscConfig+0x2fa>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003490:	f7fe ff4c 	bl	800232c <HAL_GetTick>
 8003494:	4602      	mov	r2, r0
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	1ad3      	subs	r3, r2, r3
 800349a:	2b02      	cmp	r3, #2
 800349c:	d901      	bls.n	80034a2 <HAL_RCC_OscConfig+0x2fa>
        {
          return HAL_TIMEOUT;
 800349e:	2303      	movs	r3, #3
 80034a0:	e1a2      	b.n	80037e8 <HAL_RCC_OscConfig+0x640>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034a2:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 80034a6:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 80034aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034ac:	f003 0302 	and.w	r3, r3, #2
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d1ed      	bne.n	8003490 <HAL_RCC_OscConfig+0x2e8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 0304 	and.w	r3, r3, #4
 80034bc:	2b00      	cmp	r3, #0
 80034be:	f000 80d9 	beq.w	8003674 <HAL_RCC_OscConfig+0x4cc>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034c2:	2300      	movs	r3, #0
 80034c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034c6:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 80034ca:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 80034ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d118      	bne.n	800350a <HAL_RCC_OscConfig+0x362>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034d8:	2300      	movs	r3, #0
 80034da:	60bb      	str	r3, [r7, #8]
 80034dc:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 80034e0:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 80034e4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80034e6:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 80034ea:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 80034ee:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80034f2:	641a      	str	r2, [r3, #64]	@ 0x40
 80034f4:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 80034f8:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 80034fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003502:	60bb      	str	r3, [r7, #8]
 8003504:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003506:	2301      	movs	r3, #1
 8003508:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800350a:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 800350e:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003518:	2b00      	cmp	r3, #0
 800351a:	d121      	bne.n	8003560 <HAL_RCC_OscConfig+0x3b8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800351c:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 8003520:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 800352a:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 800352e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003532:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003534:	f7fe fefa 	bl	800232c <HAL_GetTick>
 8003538:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800353a:	e008      	b.n	800354e <HAL_RCC_OscConfig+0x3a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800353c:	f7fe fef6 	bl	800232c <HAL_GetTick>
 8003540:	4602      	mov	r2, r0
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	1ad3      	subs	r3, r2, r3
 8003546:	2b02      	cmp	r3, #2
 8003548:	d901      	bls.n	800354e <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 800354a:	2303      	movs	r3, #3
 800354c:	e14c      	b.n	80037e8 <HAL_RCC_OscConfig+0x640>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800354e:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 8003552:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800355c:	2b00      	cmp	r3, #0
 800355e:	d0ed      	beq.n	800353c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	689b      	ldr	r3, [r3, #8]
 8003564:	2b01      	cmp	r3, #1
 8003566:	d10c      	bne.n	8003582 <HAL_RCC_OscConfig+0x3da>
 8003568:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 800356c:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8003570:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003572:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8003576:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 800357a:	f042 0201 	orr.w	r2, r2, #1
 800357e:	671a      	str	r2, [r3, #112]	@ 0x70
 8003580:	e034      	b.n	80035ec <HAL_RCC_OscConfig+0x444>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	2b05      	cmp	r3, #5
 8003588:	d118      	bne.n	80035bc <HAL_RCC_OscConfig+0x414>
 800358a:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 800358e:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8003592:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003594:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8003598:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 800359c:	f042 0204 	orr.w	r2, r2, #4
 80035a0:	671a      	str	r2, [r3, #112]	@ 0x70
 80035a2:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 80035a6:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 80035aa:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80035ac:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 80035b0:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 80035b4:	f042 0201 	orr.w	r2, r2, #1
 80035b8:	671a      	str	r2, [r3, #112]	@ 0x70
 80035ba:	e017      	b.n	80035ec <HAL_RCC_OscConfig+0x444>
 80035bc:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 80035c0:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 80035c4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80035c6:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 80035ca:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 80035ce:	f022 0201 	bic.w	r2, r2, #1
 80035d2:	671a      	str	r2, [r3, #112]	@ 0x70
 80035d4:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 80035d8:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 80035dc:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80035de:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 80035e2:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 80035e6:	f022 0204 	bic.w	r2, r2, #4
 80035ea:	671a      	str	r2, [r3, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d018      	beq.n	8003626 <HAL_RCC_OscConfig+0x47e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035f4:	f7fe fe9a 	bl	800232c <HAL_GetTick>
 80035f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035fa:	e00a      	b.n	8003612 <HAL_RCC_OscConfig+0x46a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035fc:	f7fe fe96 	bl	800232c <HAL_GetTick>
 8003600:	4602      	mov	r2, r0
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	1ad3      	subs	r3, r2, r3
 8003606:	f241 3288 	movw	r2, #5000	@ 0x1388
 800360a:	4293      	cmp	r3, r2
 800360c:	d901      	bls.n	8003612 <HAL_RCC_OscConfig+0x46a>
        {
          return HAL_TIMEOUT;
 800360e:	2303      	movs	r3, #3
 8003610:	e0ea      	b.n	80037e8 <HAL_RCC_OscConfig+0x640>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003612:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8003616:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 800361a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800361c:	f003 0302 	and.w	r3, r3, #2
 8003620:	2b00      	cmp	r3, #0
 8003622:	d0eb      	beq.n	80035fc <HAL_RCC_OscConfig+0x454>
 8003624:	e017      	b.n	8003656 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003626:	f7fe fe81 	bl	800232c <HAL_GetTick>
 800362a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800362c:	e00a      	b.n	8003644 <HAL_RCC_OscConfig+0x49c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800362e:	f7fe fe7d 	bl	800232c <HAL_GetTick>
 8003632:	4602      	mov	r2, r0
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	1ad3      	subs	r3, r2, r3
 8003638:	f241 3288 	movw	r2, #5000	@ 0x1388
 800363c:	4293      	cmp	r3, r2
 800363e:	d901      	bls.n	8003644 <HAL_RCC_OscConfig+0x49c>
        {
          return HAL_TIMEOUT;
 8003640:	2303      	movs	r3, #3
 8003642:	e0d1      	b.n	80037e8 <HAL_RCC_OscConfig+0x640>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003644:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8003648:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 800364c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800364e:	f003 0302 	and.w	r3, r3, #2
 8003652:	2b00      	cmp	r3, #0
 8003654:	d1eb      	bne.n	800362e <HAL_RCC_OscConfig+0x486>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003656:	7dfb      	ldrb	r3, [r7, #23]
 8003658:	2b01      	cmp	r3, #1
 800365a:	d10b      	bne.n	8003674 <HAL_RCC_OscConfig+0x4cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800365c:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8003660:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8003664:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003666:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 800366a:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 800366e:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8003672:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	699b      	ldr	r3, [r3, #24]
 8003678:	2b00      	cmp	r3, #0
 800367a:	f000 80b4 	beq.w	80037e6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800367e:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8003682:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	f003 030c 	and.w	r3, r3, #12
 800368c:	2b08      	cmp	r3, #8
 800368e:	d06f      	beq.n	8003770 <HAL_RCC_OscConfig+0x5c8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	699b      	ldr	r3, [r3, #24]
 8003694:	2b02      	cmp	r3, #2
 8003696:	d14f      	bne.n	8003738 <HAL_RCC_OscConfig+0x590>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003698:	2360      	movs	r3, #96	@ 0x60
 800369a:	f2c4 2347 	movt	r3, #16967	@ 0x4247
 800369e:	2200      	movs	r2, #0
 80036a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036a2:	f7fe fe43 	bl	800232c <HAL_GetTick>
 80036a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036a8:	e008      	b.n	80036bc <HAL_RCC_OscConfig+0x514>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036aa:	f7fe fe3f 	bl	800232c <HAL_GetTick>
 80036ae:	4602      	mov	r2, r0
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	1ad3      	subs	r3, r2, r3
 80036b4:	2b02      	cmp	r3, #2
 80036b6:	d901      	bls.n	80036bc <HAL_RCC_OscConfig+0x514>
          {
            return HAL_TIMEOUT;
 80036b8:	2303      	movs	r3, #3
 80036ba:	e095      	b.n	80037e8 <HAL_RCC_OscConfig+0x640>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036bc:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 80036c0:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d1ed      	bne.n	80036aa <HAL_RCC_OscConfig+0x502>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	69da      	ldr	r2, [r3, #28]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6a1b      	ldr	r3, [r3, #32]
 80036d6:	431a      	orrs	r2, r3
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036dc:	019b      	lsls	r3, r3, #6
 80036de:	431a      	orrs	r2, r3
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036e4:	085b      	lsrs	r3, r3, #1
 80036e6:	3b01      	subs	r3, #1
 80036e8:	041b      	lsls	r3, r3, #16
 80036ea:	ea42 0103 	orr.w	r1, r2, r3
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036f2:	061a      	lsls	r2, r3, #24
 80036f4:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 80036f8:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 80036fc:	430a      	orrs	r2, r1
 80036fe:	605a      	str	r2, [r3, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003700:	2360      	movs	r3, #96	@ 0x60
 8003702:	f2c4 2347 	movt	r3, #16967	@ 0x4247
 8003706:	2201      	movs	r2, #1
 8003708:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800370a:	f7fe fe0f 	bl	800232c <HAL_GetTick>
 800370e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003710:	e008      	b.n	8003724 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003712:	f7fe fe0b 	bl	800232c <HAL_GetTick>
 8003716:	4602      	mov	r2, r0
 8003718:	693b      	ldr	r3, [r7, #16]
 800371a:	1ad3      	subs	r3, r2, r3
 800371c:	2b02      	cmp	r3, #2
 800371e:	d901      	bls.n	8003724 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8003720:	2303      	movs	r3, #3
 8003722:	e061      	b.n	80037e8 <HAL_RCC_OscConfig+0x640>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003724:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8003728:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003732:	2b00      	cmp	r3, #0
 8003734:	d0ed      	beq.n	8003712 <HAL_RCC_OscConfig+0x56a>
 8003736:	e056      	b.n	80037e6 <HAL_RCC_OscConfig+0x63e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003738:	2360      	movs	r3, #96	@ 0x60
 800373a:	f2c4 2347 	movt	r3, #16967	@ 0x4247
 800373e:	2200      	movs	r2, #0
 8003740:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003742:	f7fe fdf3 	bl	800232c <HAL_GetTick>
 8003746:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003748:	e008      	b.n	800375c <HAL_RCC_OscConfig+0x5b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800374a:	f7fe fdef 	bl	800232c <HAL_GetTick>
 800374e:	4602      	mov	r2, r0
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	1ad3      	subs	r3, r2, r3
 8003754:	2b02      	cmp	r3, #2
 8003756:	d901      	bls.n	800375c <HAL_RCC_OscConfig+0x5b4>
          {
            return HAL_TIMEOUT;
 8003758:	2303      	movs	r3, #3
 800375a:	e045      	b.n	80037e8 <HAL_RCC_OscConfig+0x640>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800375c:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8003760:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800376a:	2b00      	cmp	r3, #0
 800376c:	d1ed      	bne.n	800374a <HAL_RCC_OscConfig+0x5a2>
 800376e:	e03a      	b.n	80037e6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	699b      	ldr	r3, [r3, #24]
 8003774:	2b01      	cmp	r3, #1
 8003776:	d101      	bne.n	800377c <HAL_RCC_OscConfig+0x5d4>
      {
        return HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	e035      	b.n	80037e8 <HAL_RCC_OscConfig+0x640>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800377c:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8003780:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	699b      	ldr	r3, [r3, #24]
 800378c:	2b01      	cmp	r3, #1
 800378e:	d028      	beq.n	80037e2 <HAL_RCC_OscConfig+0x63a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800379a:	429a      	cmp	r2, r3
 800379c:	d121      	bne.n	80037e2 <HAL_RCC_OscConfig+0x63a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037a8:	429a      	cmp	r2, r3
 80037aa:	d11a      	bne.n	80037e2 <HAL_RCC_OscConfig+0x63a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037ac:	68fa      	ldr	r2, [r7, #12]
 80037ae:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80037b2:	4013      	ands	r3, r2
 80037b4:	687a      	ldr	r2, [r7, #4]
 80037b6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80037b8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d111      	bne.n	80037e2 <HAL_RCC_OscConfig+0x63a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037c8:	085b      	lsrs	r3, r3, #1
 80037ca:	3b01      	subs	r3, #1
 80037cc:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037ce:	429a      	cmp	r2, r3
 80037d0:	d107      	bne.n	80037e2 <HAL_RCC_OscConfig+0x63a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037dc:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037de:	429a      	cmp	r2, r3
 80037e0:	d001      	beq.n	80037e6 <HAL_RCC_OscConfig+0x63e>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	e000      	b.n	80037e8 <HAL_RCC_OscConfig+0x640>
        }
      }
    }
  }
  return HAL_OK;
 80037e6:	2300      	movs	r3, #0
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	3718      	adds	r7, #24
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}

080037f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b084      	sub	sp, #16
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
 80037f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d101      	bne.n	8003804 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003800:	2301      	movs	r3, #1
 8003802:	e11a      	b.n	8003a3a <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003804:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8003808:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f003 0307 	and.w	r3, r3, #7
 8003812:	683a      	ldr	r2, [r7, #0]
 8003814:	429a      	cmp	r2, r3
 8003816:	d912      	bls.n	800383e <HAL_RCC_ClockConfig+0x4e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003818:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800381c:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8003820:	683a      	ldr	r2, [r7, #0]
 8003822:	b2d2      	uxtb	r2, r2
 8003824:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003826:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800382a:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f003 0307 	and.w	r3, r3, #7
 8003834:	683a      	ldr	r2, [r7, #0]
 8003836:	429a      	cmp	r2, r3
 8003838:	d001      	beq.n	800383e <HAL_RCC_ClockConfig+0x4e>
    {
      return HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	e0fd      	b.n	8003a3a <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f003 0302 	and.w	r3, r3, #2
 8003846:	2b00      	cmp	r3, #0
 8003848:	d032      	beq.n	80038b0 <HAL_RCC_ClockConfig+0xc0>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 0304 	and.w	r3, r3, #4
 8003852:	2b00      	cmp	r3, #0
 8003854:	d00b      	beq.n	800386e <HAL_RCC_ClockConfig+0x7e>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003856:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 800385a:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 800385e:	689a      	ldr	r2, [r3, #8]
 8003860:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8003864:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8003868:	f442 52e0 	orr.w	r2, r2, #7168	@ 0x1c00
 800386c:	609a      	str	r2, [r3, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f003 0308 	and.w	r3, r3, #8
 8003876:	2b00      	cmp	r3, #0
 8003878:	d00b      	beq.n	8003892 <HAL_RCC_ClockConfig+0xa2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800387a:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 800387e:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8003882:	689a      	ldr	r2, [r3, #8]
 8003884:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8003888:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 800388c:	f442 4260 	orr.w	r2, r2, #57344	@ 0xe000
 8003890:	609a      	str	r2, [r3, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003892:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8003896:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	f023 01f0 	bic.w	r1, r3, #240	@ 0xf0
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	689a      	ldr	r2, [r3, #8]
 80038a4:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 80038a8:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 80038ac:	430a      	orrs	r2, r1
 80038ae:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f003 0301 	and.w	r3, r3, #1
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d056      	beq.n	800396a <HAL_RCC_ClockConfig+0x17a>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	2b01      	cmp	r3, #1
 80038c2:	d10a      	bne.n	80038da <HAL_RCC_ClockConfig+0xea>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038c4:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 80038c8:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d11f      	bne.n	8003916 <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	e0af      	b.n	8003a3a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	2b02      	cmp	r3, #2
 80038e0:	d003      	beq.n	80038ea <HAL_RCC_ClockConfig+0xfa>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038e6:	2b03      	cmp	r3, #3
 80038e8:	d10a      	bne.n	8003900 <HAL_RCC_ClockConfig+0x110>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038ea:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 80038ee:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d10c      	bne.n	8003916 <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 80038fc:	2301      	movs	r3, #1
 80038fe:	e09c      	b.n	8003a3a <HAL_RCC_ClockConfig+0x24a>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003900:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8003904:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 0302 	and.w	r3, r3, #2
 800390e:	2b00      	cmp	r3, #0
 8003910:	d101      	bne.n	8003916 <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	e091      	b.n	8003a3a <HAL_RCC_ClockConfig+0x24a>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003916:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 800391a:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	f023 0103 	bic.w	r1, r3, #3
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	685a      	ldr	r2, [r3, #4]
 8003928:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 800392c:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8003930:	430a      	orrs	r2, r1
 8003932:	609a      	str	r2, [r3, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003934:	f7fe fcfa 	bl	800232c <HAL_GetTick>
 8003938:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800393a:	e00a      	b.n	8003952 <HAL_RCC_ClockConfig+0x162>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800393c:	f7fe fcf6 	bl	800232c <HAL_GetTick>
 8003940:	4602      	mov	r2, r0
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	1ad3      	subs	r3, r2, r3
 8003946:	f241 3288 	movw	r2, #5000	@ 0x1388
 800394a:	4293      	cmp	r3, r2
 800394c:	d901      	bls.n	8003952 <HAL_RCC_ClockConfig+0x162>
      {
        return HAL_TIMEOUT;
 800394e:	2303      	movs	r3, #3
 8003950:	e073      	b.n	8003a3a <HAL_RCC_ClockConfig+0x24a>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003952:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8003956:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	f003 020c 	and.w	r2, r3, #12
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	009b      	lsls	r3, r3, #2
 8003966:	429a      	cmp	r2, r3
 8003968:	d1e8      	bne.n	800393c <HAL_RCC_ClockConfig+0x14c>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800396a:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800396e:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f003 0307 	and.w	r3, r3, #7
 8003978:	683a      	ldr	r2, [r7, #0]
 800397a:	429a      	cmp	r2, r3
 800397c:	d212      	bcs.n	80039a4 <HAL_RCC_ClockConfig+0x1b4>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800397e:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8003982:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8003986:	683a      	ldr	r2, [r7, #0]
 8003988:	b2d2      	uxtb	r2, r2
 800398a:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800398c:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8003990:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f003 0307 	and.w	r3, r3, #7
 800399a:	683a      	ldr	r2, [r7, #0]
 800399c:	429a      	cmp	r2, r3
 800399e:	d001      	beq.n	80039a4 <HAL_RCC_ClockConfig+0x1b4>
    {
      return HAL_ERROR;
 80039a0:	2301      	movs	r3, #1
 80039a2:	e04a      	b.n	8003a3a <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f003 0304 	and.w	r3, r3, #4
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d00e      	beq.n	80039ce <HAL_RCC_ClockConfig+0x1de>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039b0:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 80039b4:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	68da      	ldr	r2, [r3, #12]
 80039c2:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 80039c6:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 80039ca:	430a      	orrs	r2, r1
 80039cc:	609a      	str	r2, [r3, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f003 0308 	and.w	r3, r3, #8
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d00f      	beq.n	80039fa <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039da:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 80039de:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	691b      	ldr	r3, [r3, #16]
 80039ec:	00da      	lsls	r2, r3, #3
 80039ee:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 80039f2:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 80039f6:	430a      	orrs	r2, r1
 80039f8:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80039fa:	f000 f822 	bl	8003a42 <HAL_RCC_GetSysClockFreq>
 80039fe:	4601      	mov	r1, r0
 8003a00:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8003a04:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8003a08:	689b      	ldr	r3, [r3, #8]
 8003a0a:	091b      	lsrs	r3, r3, #4
 8003a0c:	f003 020f 	and.w	r2, r3, #15
 8003a10:	f649 43f4 	movw	r3, #40180	@ 0x9cf4
 8003a14:	f6c0 0300 	movt	r3, #2048	@ 0x800
 8003a18:	5c9b      	ldrb	r3, [r3, r2]
 8003a1a:	fa21 f203 	lsr.w	r2, r1, r3
 8003a1e:	f240 0300 	movw	r3, #0
 8003a22:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8003a26:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003a28:	f240 0304 	movw	r3, #4
 8003a2c:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4618      	mov	r0, r3
 8003a34:	f7fe f945 	bl	8001cc2 <HAL_InitTick>

  return HAL_OK;
 8003a38:	2300      	movs	r3, #0
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3710      	adds	r7, #16
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}

08003a42 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a42:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a46:	b08c      	sub	sp, #48	@ 0x30
 8003a48:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllvco = 0U;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllp = 0U;
 8003a52:	2300      	movs	r3, #0
 8003a54:	623b      	str	r3, [r7, #32]
  uint32_t sysclockfreq = 0U;
 8003a56:	2300      	movs	r3, #0
 8003a58:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a5a:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8003a5e:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	f003 030c 	and.w	r3, r3, #12
 8003a68:	2b08      	cmp	r3, #8
 8003a6a:	d013      	beq.n	8003a94 <HAL_RCC_GetSysClockFreq+0x52>
 8003a6c:	2b08      	cmp	r3, #8
 8003a6e:	f200 8090 	bhi.w	8003b92 <HAL_RCC_GetSysClockFreq+0x150>
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d002      	beq.n	8003a7c <HAL_RCC_GetSysClockFreq+0x3a>
 8003a76:	2b04      	cmp	r3, #4
 8003a78:	d006      	beq.n	8003a88 <HAL_RCC_GetSysClockFreq+0x46>
 8003a7a:	e08a      	b.n	8003b92 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a7c:	f44f 5310 	mov.w	r3, #9216	@ 0x2400
 8003a80:	f2c0 03f4 	movt	r3, #244	@ 0xf4
 8003a84:	62bb      	str	r3, [r7, #40]	@ 0x28
      break;
 8003a86:	e08a      	b.n	8003b9e <HAL_RCC_GetSysClockFreq+0x15c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a88:	f44f 5390 	mov.w	r3, #4608	@ 0x1200
 8003a8c:	f2c0 037a 	movt	r3, #122	@ 0x7a
 8003a90:	62bb      	str	r3, [r7, #40]	@ 0x28
      break;
 8003a92:	e084      	b.n	8003b9e <HAL_RCC_GetSysClockFreq+0x15c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a94:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8003a98:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003aa2:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003aa4:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8003aa8:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d02e      	beq.n	8003b14 <HAL_RCC_GetSysClockFreq+0xd2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ab6:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8003aba:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	099b      	lsrs	r3, r3, #6
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	61bb      	str	r3, [r7, #24]
 8003ac6:	61fa      	str	r2, [r7, #28]
 8003ac8:	69bb      	ldr	r3, [r7, #24]
 8003aca:	f3c3 0408 	ubfx	r4, r3, #0, #9
 8003ace:	2500      	movs	r5, #0
 8003ad0:	f44f 5390 	mov.w	r3, #4608	@ 0x1200
 8003ad4:	f2c0 037a 	movt	r3, #122	@ 0x7a
 8003ad8:	fb03 f205 	mul.w	r2, r3, r5
 8003adc:	2300      	movs	r3, #0
 8003ade:	fb04 f303 	mul.w	r3, r4, r3
 8003ae2:	441a      	add	r2, r3
 8003ae4:	f44f 5390 	mov.w	r3, #4608	@ 0x1200
 8003ae8:	f2c0 037a 	movt	r3, #122	@ 0x7a
 8003aec:	fba4 ab03 	umull	sl, fp, r4, r3
 8003af0:	eb02 030b 	add.w	r3, r2, fp
 8003af4:	469b      	mov	fp, r3
 8003af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003af8:	2200      	movs	r2, #0
 8003afa:	613b      	str	r3, [r7, #16]
 8003afc:	617a      	str	r2, [r7, #20]
 8003afe:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003b02:	4650      	mov	r0, sl
 8003b04:	4659      	mov	r1, fp
 8003b06:	f7fd f86f 	bl	8000be8 <__aeabi_uldivmod>
 8003b0a:	4602      	mov	r2, r0
 8003b0c:	460b      	mov	r3, r1
 8003b0e:	4613      	mov	r3, r2
 8003b10:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003b12:	e02d      	b.n	8003b70 <HAL_RCC_GetSysClockFreq+0x12e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b14:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8003b18:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	099b      	lsrs	r3, r3, #6
 8003b20:	2200      	movs	r2, #0
 8003b22:	60bb      	str	r3, [r7, #8]
 8003b24:	60fa      	str	r2, [r7, #12]
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003b2c:	2100      	movs	r1, #0
 8003b2e:	f44f 5310 	mov.w	r3, #9216	@ 0x2400
 8003b32:	f2c0 03f4 	movt	r3, #244	@ 0xf4
 8003b36:	fb03 f201 	mul.w	r2, r3, r1
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	fb00 f303 	mul.w	r3, r0, r3
 8003b40:	441a      	add	r2, r3
 8003b42:	f44f 5310 	mov.w	r3, #9216	@ 0x2400
 8003b46:	f2c0 03f4 	movt	r3, #244	@ 0xf4
 8003b4a:	fba0 8903 	umull	r8, r9, r0, r3
 8003b4e:	eb02 0309 	add.w	r3, r2, r9
 8003b52:	4699      	mov	r9, r3
 8003b54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b56:	2200      	movs	r2, #0
 8003b58:	603b      	str	r3, [r7, #0]
 8003b5a:	607a      	str	r2, [r7, #4]
 8003b5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003b60:	4640      	mov	r0, r8
 8003b62:	4649      	mov	r1, r9
 8003b64:	f7fd f840 	bl	8000be8 <__aeabi_uldivmod>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	460b      	mov	r3, r1
 8003b6c:	4613      	mov	r3, r2
 8003b6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003b70:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8003b74:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	0c1b      	lsrs	r3, r3, #16
 8003b7c:	f003 0303 	and.w	r3, r3, #3
 8003b80:	3301      	adds	r3, #1
 8003b82:	005b      	lsls	r3, r3, #1
 8003b84:	623b      	str	r3, [r7, #32]

      sysclockfreq = pllvco / pllp;
 8003b86:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003b88:	6a3b      	ldr	r3, [r7, #32]
 8003b8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b8e:	62bb      	str	r3, [r7, #40]	@ 0x28
      break;
 8003b90:	e005      	b.n	8003b9e <HAL_RCC_GetSysClockFreq+0x15c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b92:	f44f 5310 	mov.w	r3, #9216	@ 0x2400
 8003b96:	f2c0 03f4 	movt	r3, #244	@ 0xf4
 8003b9a:	62bb      	str	r3, [r7, #40]	@ 0x28
      break;
 8003b9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	3730      	adds	r7, #48	@ 0x30
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003baa <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003baa:	b480      	push	{r7}
 8003bac:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003bae:	f240 0300 	movw	r3, #0
 8003bb2:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8003bb6:	681b      	ldr	r3, [r3, #0]
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc0:	4770      	bx	lr

08003bc2 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003bc2:	b580      	push	{r7, lr}
 8003bc4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003bc6:	f7ff fff0 	bl	8003baa <HAL_RCC_GetHCLKFreq>
 8003bca:	4601      	mov	r1, r0
 8003bcc:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8003bd0:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	0a9b      	lsrs	r3, r3, #10
 8003bd8:	f003 0207 	and.w	r2, r3, #7
 8003bdc:	f649 5304 	movw	r3, #40196	@ 0x9d04
 8003be0:	f6c0 0300 	movt	r3, #2048	@ 0x800
 8003be4:	5c9b      	ldrb	r3, [r3, r2]
 8003be6:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	bd80      	pop	{r7, pc}

08003bee <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003bee:	b580      	push	{r7, lr}
 8003bf0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003bf2:	f7ff ffda 	bl	8003baa <HAL_RCC_GetHCLKFreq>
 8003bf6:	4601      	mov	r1, r0
 8003bf8:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8003bfc:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8003c00:	689b      	ldr	r3, [r3, #8]
 8003c02:	0b5b      	lsrs	r3, r3, #13
 8003c04:	f003 0207 	and.w	r2, r3, #7
 8003c08:	f649 5304 	movw	r3, #40196	@ 0x9d04
 8003c0c:	f6c0 0300 	movt	r3, #2048	@ 0x800
 8003c10:	5c9b      	ldrb	r3, [r3, r2]
 8003c12:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	bd80      	pop	{r7, pc}

08003c1a <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003c1a:	b480      	push	{r7}
 8003c1c:	b083      	sub	sp, #12
 8003c1e:	af00      	add	r7, sp, #0
 8003c20:	6078      	str	r0, [r7, #4]
 8003c22:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	220f      	movs	r2, #15
 8003c28:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003c2a:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8003c2e:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	f003 0203 	and.w	r2, r3, #3
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003c3c:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8003c40:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003c4e:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8003c52:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003c60:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8003c64:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	08db      	lsrs	r3, r3, #3
 8003c6c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003c74:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8003c78:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f003 0207 	and.w	r2, r3, #7
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	601a      	str	r2, [r3, #0]
}
 8003c86:	bf00      	nop
 8003c88:	370c      	adds	r7, #12
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c90:	4770      	bx	lr

08003c92 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c92:	b580      	push	{r7, lr}
 8003c94:	b082      	sub	sp, #8
 8003c96:	af00      	add	r7, sp, #0
 8003c98:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d101      	bne.n	8003ca4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	e041      	b.n	8003d28 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003caa:	b2db      	uxtb	r3, r3
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d106      	bne.n	8003cbe <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003cb8:	6878      	ldr	r0, [r7, #4]
 8003cba:	f7fd ff48 	bl	8001b4e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2202      	movs	r2, #2
 8003cc2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681a      	ldr	r2, [r3, #0]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	3304      	adds	r3, #4
 8003cce:	4619      	mov	r1, r3
 8003cd0:	4610      	mov	r0, r2
 8003cd2:	f000 fcdf 	bl	8004694 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2201      	movs	r2, #1
 8003cda:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2201      	movs	r2, #1
 8003ce2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2201      	movs	r2, #1
 8003cea:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2201      	movs	r2, #1
 8003cf2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2201      	movs	r2, #1
 8003cfa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2201      	movs	r2, #1
 8003d02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2201      	movs	r2, #1
 8003d0a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2201      	movs	r2, #1
 8003d12:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2201      	movs	r2, #1
 8003d1a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2201      	movs	r2, #1
 8003d22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003d26:	2300      	movs	r3, #0
}
 8003d28:	4618      	mov	r0, r3
 8003d2a:	3708      	adds	r7, #8
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd80      	pop	{r7, pc}

08003d30 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b085      	sub	sp, #20
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d3e:	b2db      	uxtb	r3, r3
 8003d40:	2b01      	cmp	r3, #1
 8003d42:	d001      	beq.n	8003d48 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003d44:	2301      	movs	r3, #1
 8003d46:	e062      	b.n	8003e0e <HAL_TIM_Base_Start_IT+0xde>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2202      	movs	r2, #2
 8003d4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	68da      	ldr	r2, [r3, #12]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f042 0201 	orr.w	r2, r2, #1
 8003d5e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	2300      	movs	r3, #0
 8003d66:	f2c4 0301 	movt	r3, #16385	@ 0x4001
 8003d6a:	429a      	cmp	r2, r3
 8003d6c:	d034      	beq.n	8003dd8 <HAL_TIM_Base_Start_IT+0xa8>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d76:	d02f      	beq.n	8003dd8 <HAL_TIM_Base_Start_IT+0xa8>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681a      	ldr	r2, [r3, #0]
 8003d7c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003d80:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 8003d84:	429a      	cmp	r2, r3
 8003d86:	d027      	beq.n	8003dd8 <HAL_TIM_Base_Start_IT+0xa8>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681a      	ldr	r2, [r3, #0]
 8003d8c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003d90:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 8003d94:	429a      	cmp	r2, r3
 8003d96:	d01f      	beq.n	8003dd8 <HAL_TIM_Base_Start_IT+0xa8>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681a      	ldr	r2, [r3, #0]
 8003d9c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003da0:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 8003da4:	429a      	cmp	r2, r3
 8003da6:	d017      	beq.n	8003dd8 <HAL_TIM_Base_Start_IT+0xa8>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003db0:	f2c4 0301 	movt	r3, #16385	@ 0x4001
 8003db4:	429a      	cmp	r2, r3
 8003db6:	d00f      	beq.n	8003dd8 <HAL_TIM_Base_Start_IT+0xa8>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681a      	ldr	r2, [r3, #0]
 8003dbc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003dc0:	f2c4 0301 	movt	r3, #16385	@ 0x4001
 8003dc4:	429a      	cmp	r2, r3
 8003dc6:	d007      	beq.n	8003dd8 <HAL_TIM_Base_Start_IT+0xa8>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681a      	ldr	r2, [r3, #0]
 8003dcc:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8003dd0:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 8003dd4:	429a      	cmp	r2, r3
 8003dd6:	d111      	bne.n	8003dfc <HAL_TIM_Base_Start_IT+0xcc>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	f003 0307 	and.w	r3, r3, #7
 8003de2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	2b06      	cmp	r3, #6
 8003de8:	d010      	beq.n	8003e0c <HAL_TIM_Base_Start_IT+0xdc>
    {
      __HAL_TIM_ENABLE(htim);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	681a      	ldr	r2, [r3, #0]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f042 0201 	orr.w	r2, r2, #1
 8003df8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dfa:	e007      	b.n	8003e0c <HAL_TIM_Base_Start_IT+0xdc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f042 0201 	orr.w	r2, r2, #1
 8003e0a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e0c:	2300      	movs	r3, #0
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	3714      	adds	r7, #20
 8003e12:	46bd      	mov	sp, r7
 8003e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e18:	4770      	bx	lr

08003e1a <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003e1a:	b580      	push	{r7, lr}
 8003e1c:	b082      	sub	sp, #8
 8003e1e:	af00      	add	r7, sp, #0
 8003e20:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d101      	bne.n	8003e2c <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	e041      	b.n	8003eb0 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e32:	b2db      	uxtb	r3, r3
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d106      	bne.n	8003e46 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003e40:	6878      	ldr	r0, [r7, #4]
 8003e42:	f000 f839 	bl	8003eb8 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2202      	movs	r2, #2
 8003e4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681a      	ldr	r2, [r3, #0]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	3304      	adds	r3, #4
 8003e56:	4619      	mov	r1, r3
 8003e58:	4610      	mov	r0, r2
 8003e5a:	f000 fc1b 	bl	8004694 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2201      	movs	r2, #1
 8003e62:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2201      	movs	r2, #1
 8003e6a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2201      	movs	r2, #1
 8003e72:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2201      	movs	r2, #1
 8003e7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2201      	movs	r2, #1
 8003e82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2201      	movs	r2, #1
 8003e8a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2201      	movs	r2, #1
 8003e92:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2201      	movs	r2, #1
 8003e9a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003eae:	2300      	movs	r3, #0
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	3708      	adds	r7, #8
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}

08003eb8 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b083      	sub	sp, #12
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8003ec0:	bf00      	nop
 8003ec2:	370c      	adds	r7, #12
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eca:	4770      	bx	lr

08003ecc <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b084      	sub	sp, #16
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
 8003ed4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d104      	bne.n	8003eea <HAL_TIM_IC_Start_IT+0x1e>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003ee6:	b2db      	uxtb	r3, r3
 8003ee8:	e013      	b.n	8003f12 <HAL_TIM_IC_Start_IT+0x46>
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	2b04      	cmp	r3, #4
 8003eee:	d104      	bne.n	8003efa <HAL_TIM_IC_Start_IT+0x2e>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003ef6:	b2db      	uxtb	r3, r3
 8003ef8:	e00b      	b.n	8003f12 <HAL_TIM_IC_Start_IT+0x46>
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	2b08      	cmp	r3, #8
 8003efe:	d104      	bne.n	8003f0a <HAL_TIM_IC_Start_IT+0x3e>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003f06:	b2db      	uxtb	r3, r3
 8003f08:	e003      	b.n	8003f12 <HAL_TIM_IC_Start_IT+0x46>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f10:	b2db      	uxtb	r3, r3
 8003f12:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d104      	bne.n	8003f24 <HAL_TIM_IC_Start_IT+0x58>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003f20:	b2db      	uxtb	r3, r3
 8003f22:	e013      	b.n	8003f4c <HAL_TIM_IC_Start_IT+0x80>
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	2b04      	cmp	r3, #4
 8003f28:	d104      	bne.n	8003f34 <HAL_TIM_IC_Start_IT+0x68>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003f30:	b2db      	uxtb	r3, r3
 8003f32:	e00b      	b.n	8003f4c <HAL_TIM_IC_Start_IT+0x80>
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	2b08      	cmp	r3, #8
 8003f38:	d104      	bne.n	8003f44 <HAL_TIM_IC_Start_IT+0x78>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003f40:	b2db      	uxtb	r3, r3
 8003f42:	e003      	b.n	8003f4c <HAL_TIM_IC_Start_IT+0x80>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003f4a:	b2db      	uxtb	r3, r3
 8003f4c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8003f4e:	7bbb      	ldrb	r3, [r7, #14]
 8003f50:	2b01      	cmp	r3, #1
 8003f52:	d102      	bne.n	8003f5a <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003f54:	7b7b      	ldrb	r3, [r7, #13]
 8003f56:	2b01      	cmp	r3, #1
 8003f58:	d001      	beq.n	8003f5e <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e0e0      	b.n	8004120 <HAL_TIM_IC_Start_IT+0x254>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d104      	bne.n	8003f6e <HAL_TIM_IC_Start_IT+0xa2>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2202      	movs	r2, #2
 8003f68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003f6c:	e013      	b.n	8003f96 <HAL_TIM_IC_Start_IT+0xca>
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	2b04      	cmp	r3, #4
 8003f72:	d104      	bne.n	8003f7e <HAL_TIM_IC_Start_IT+0xb2>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2202      	movs	r2, #2
 8003f78:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003f7c:	e00b      	b.n	8003f96 <HAL_TIM_IC_Start_IT+0xca>
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	2b08      	cmp	r3, #8
 8003f82:	d104      	bne.n	8003f8e <HAL_TIM_IC_Start_IT+0xc2>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2202      	movs	r2, #2
 8003f88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003f8c:	e003      	b.n	8003f96 <HAL_TIM_IC_Start_IT+0xca>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2202      	movs	r2, #2
 8003f92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d104      	bne.n	8003fa6 <HAL_TIM_IC_Start_IT+0xda>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2202      	movs	r2, #2
 8003fa0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003fa4:	e013      	b.n	8003fce <HAL_TIM_IC_Start_IT+0x102>
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	2b04      	cmp	r3, #4
 8003faa:	d104      	bne.n	8003fb6 <HAL_TIM_IC_Start_IT+0xea>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2202      	movs	r2, #2
 8003fb0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003fb4:	e00b      	b.n	8003fce <HAL_TIM_IC_Start_IT+0x102>
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	2b08      	cmp	r3, #8
 8003fba:	d104      	bne.n	8003fc6 <HAL_TIM_IC_Start_IT+0xfa>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2202      	movs	r2, #2
 8003fc0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003fc4:	e003      	b.n	8003fce <HAL_TIM_IC_Start_IT+0x102>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2202      	movs	r2, #2
 8003fca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	2b0c      	cmp	r3, #12
 8003fd2:	d841      	bhi.n	8004058 <HAL_TIM_IC_Start_IT+0x18c>
 8003fd4:	a201      	add	r2, pc, #4	@ (adr r2, 8003fdc <HAL_TIM_IC_Start_IT+0x110>)
 8003fd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fda:	bf00      	nop
 8003fdc:	08004011 	.word	0x08004011
 8003fe0:	08004059 	.word	0x08004059
 8003fe4:	08004059 	.word	0x08004059
 8003fe8:	08004059 	.word	0x08004059
 8003fec:	08004023 	.word	0x08004023
 8003ff0:	08004059 	.word	0x08004059
 8003ff4:	08004059 	.word	0x08004059
 8003ff8:	08004059 	.word	0x08004059
 8003ffc:	08004035 	.word	0x08004035
 8004000:	08004059 	.word	0x08004059
 8004004:	08004059 	.word	0x08004059
 8004008:	08004059 	.word	0x08004059
 800400c:	08004047 	.word	0x08004047
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	68da      	ldr	r2, [r3, #12]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f042 0202 	orr.w	r2, r2, #2
 800401e:	60da      	str	r2, [r3, #12]
      break;
 8004020:	e01d      	b.n	800405e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	68da      	ldr	r2, [r3, #12]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f042 0204 	orr.w	r2, r2, #4
 8004030:	60da      	str	r2, [r3, #12]
      break;
 8004032:	e014      	b.n	800405e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	68da      	ldr	r2, [r3, #12]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f042 0208 	orr.w	r2, r2, #8
 8004042:	60da      	str	r2, [r3, #12]
      break;
 8004044:	e00b      	b.n	800405e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	68da      	ldr	r2, [r3, #12]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f042 0210 	orr.w	r2, r2, #16
 8004054:	60da      	str	r2, [r3, #12]
      break;
 8004056:	e002      	b.n	800405e <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8004058:	2301      	movs	r3, #1
 800405a:	73fb      	strb	r3, [r7, #15]
      break;
 800405c:	bf00      	nop
  }

  if (status == HAL_OK)
 800405e:	7bfb      	ldrb	r3, [r7, #15]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d15c      	bne.n	800411e <HAL_TIM_IC_Start_IT+0x252>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	2201      	movs	r2, #1
 800406a:	6839      	ldr	r1, [r7, #0]
 800406c:	4618      	mov	r0, r3
 800406e:	f000 fda2 	bl	8004bb6 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	2300      	movs	r3, #0
 8004078:	f2c4 0301 	movt	r3, #16385	@ 0x4001
 800407c:	429a      	cmp	r2, r3
 800407e:	d034      	beq.n	80040ea <HAL_TIM_IC_Start_IT+0x21e>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004088:	d02f      	beq.n	80040ea <HAL_TIM_IC_Start_IT+0x21e>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681a      	ldr	r2, [r3, #0]
 800408e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004092:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 8004096:	429a      	cmp	r2, r3
 8004098:	d027      	beq.n	80040ea <HAL_TIM_IC_Start_IT+0x21e>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681a      	ldr	r2, [r3, #0]
 800409e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80040a2:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 80040a6:	429a      	cmp	r2, r3
 80040a8:	d01f      	beq.n	80040ea <HAL_TIM_IC_Start_IT+0x21e>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681a      	ldr	r2, [r3, #0]
 80040ae:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80040b2:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 80040b6:	429a      	cmp	r2, r3
 80040b8:	d017      	beq.n	80040ea <HAL_TIM_IC_Start_IT+0x21e>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681a      	ldr	r2, [r3, #0]
 80040be:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80040c2:	f2c4 0301 	movt	r3, #16385	@ 0x4001
 80040c6:	429a      	cmp	r2, r3
 80040c8:	d00f      	beq.n	80040ea <HAL_TIM_IC_Start_IT+0x21e>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681a      	ldr	r2, [r3, #0]
 80040ce:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80040d2:	f2c4 0301 	movt	r3, #16385	@ 0x4001
 80040d6:	429a      	cmp	r2, r3
 80040d8:	d007      	beq.n	80040ea <HAL_TIM_IC_Start_IT+0x21e>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681a      	ldr	r2, [r3, #0]
 80040de:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80040e2:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 80040e6:	429a      	cmp	r2, r3
 80040e8:	d111      	bne.n	800410e <HAL_TIM_IC_Start_IT+0x242>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	689b      	ldr	r3, [r3, #8]
 80040f0:	f003 0307 	and.w	r3, r3, #7
 80040f4:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	2b06      	cmp	r3, #6
 80040fa:	d010      	beq.n	800411e <HAL_TIM_IC_Start_IT+0x252>
      {
        __HAL_TIM_ENABLE(htim);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	681a      	ldr	r2, [r3, #0]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f042 0201 	orr.w	r2, r2, #1
 800410a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800410c:	e007      	b.n	800411e <HAL_TIM_IC_Start_IT+0x252>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	681a      	ldr	r2, [r3, #0]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f042 0201 	orr.w	r2, r2, #1
 800411c:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800411e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004120:	4618      	mov	r0, r3
 8004122:	3710      	adds	r7, #16
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}

08004128 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b084      	sub	sp, #16
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	68db      	ldr	r3, [r3, #12]
 8004136:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	691b      	ldr	r3, [r3, #16]
 800413e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	f003 0302 	and.w	r3, r3, #2
 8004146:	2b00      	cmp	r3, #0
 8004148:	d020      	beq.n	800418c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	f003 0302 	and.w	r3, r3, #2
 8004150:	2b00      	cmp	r3, #0
 8004152:	d01b      	beq.n	800418c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f06f 0202 	mvn.w	r2, #2
 800415c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2201      	movs	r2, #1
 8004162:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	699b      	ldr	r3, [r3, #24]
 800416a:	f003 0303 	and.w	r3, r3, #3
 800416e:	2b00      	cmp	r3, #0
 8004170:	d003      	beq.n	800417a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	f7fd ff7c 	bl	8002070 <HAL_TIM_IC_CaptureCallback>
 8004178:	e005      	b.n	8004186 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800417a:	6878      	ldr	r0, [r7, #4]
 800417c:	f000 fa6c 	bl	8004658 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004180:	6878      	ldr	r0, [r7, #4]
 8004182:	f000 fa73 	bl	800466c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2200      	movs	r2, #0
 800418a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	f003 0304 	and.w	r3, r3, #4
 8004192:	2b00      	cmp	r3, #0
 8004194:	d020      	beq.n	80041d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	f003 0304 	and.w	r3, r3, #4
 800419c:	2b00      	cmp	r3, #0
 800419e:	d01b      	beq.n	80041d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f06f 0204 	mvn.w	r2, #4
 80041a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2202      	movs	r2, #2
 80041ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	699b      	ldr	r3, [r3, #24]
 80041b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d003      	beq.n	80041c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	f7fd ff56 	bl	8002070 <HAL_TIM_IC_CaptureCallback>
 80041c4:	e005      	b.n	80041d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	f000 fa46 	bl	8004658 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041cc:	6878      	ldr	r0, [r7, #4]
 80041ce:	f000 fa4d 	bl	800466c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2200      	movs	r2, #0
 80041d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	f003 0308 	and.w	r3, r3, #8
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d020      	beq.n	8004224 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	f003 0308 	and.w	r3, r3, #8
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d01b      	beq.n	8004224 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f06f 0208 	mvn.w	r2, #8
 80041f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2204      	movs	r2, #4
 80041fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	69db      	ldr	r3, [r3, #28]
 8004202:	f003 0303 	and.w	r3, r3, #3
 8004206:	2b00      	cmp	r3, #0
 8004208:	d003      	beq.n	8004212 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800420a:	6878      	ldr	r0, [r7, #4]
 800420c:	f7fd ff30 	bl	8002070 <HAL_TIM_IC_CaptureCallback>
 8004210:	e005      	b.n	800421e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004212:	6878      	ldr	r0, [r7, #4]
 8004214:	f000 fa20 	bl	8004658 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004218:	6878      	ldr	r0, [r7, #4]
 800421a:	f000 fa27 	bl	800466c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2200      	movs	r2, #0
 8004222:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	f003 0310 	and.w	r3, r3, #16
 800422a:	2b00      	cmp	r3, #0
 800422c:	d020      	beq.n	8004270 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	f003 0310 	and.w	r3, r3, #16
 8004234:	2b00      	cmp	r3, #0
 8004236:	d01b      	beq.n	8004270 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f06f 0210 	mvn.w	r2, #16
 8004240:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2208      	movs	r2, #8
 8004246:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	69db      	ldr	r3, [r3, #28]
 800424e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004252:	2b00      	cmp	r3, #0
 8004254:	d003      	beq.n	800425e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f7fd ff0a 	bl	8002070 <HAL_TIM_IC_CaptureCallback>
 800425c:	e005      	b.n	800426a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	f000 f9fa 	bl	8004658 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004264:	6878      	ldr	r0, [r7, #4]
 8004266:	f000 fa01 	bl	800466c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2200      	movs	r2, #0
 800426e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	f003 0301 	and.w	r3, r3, #1
 8004276:	2b00      	cmp	r3, #0
 8004278:	d00c      	beq.n	8004294 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	f003 0301 	and.w	r3, r3, #1
 8004280:	2b00      	cmp	r3, #0
 8004282:	d007      	beq.n	8004294 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f06f 0201 	mvn.w	r2, #1
 800428c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800428e:	6878      	ldr	r0, [r7, #4]
 8004290:	f7fd fbb7 	bl	8001a02 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800429a:	2b00      	cmp	r3, #0
 800429c:	d00c      	beq.n	80042b8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d007      	beq.n	80042b8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80042b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80042b2:	6878      	ldr	r0, [r7, #4]
 80042b4:	f000 fd2f 	bl	8004d16 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d00c      	beq.n	80042dc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d007      	beq.n	80042dc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80042d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	f000 f9d2 	bl	8004680 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	f003 0320 	and.w	r3, r3, #32
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d00c      	beq.n	8004300 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	f003 0320 	and.w	r3, r3, #32
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d007      	beq.n	8004300 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f06f 0220 	mvn.w	r2, #32
 80042f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	f000 fd01 	bl	8004d02 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004300:	bf00      	nop
 8004302:	3710      	adds	r7, #16
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}

08004308 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b086      	sub	sp, #24
 800430c:	af00      	add	r7, sp, #0
 800430e:	60f8      	str	r0, [r7, #12]
 8004310:	60b9      	str	r1, [r7, #8]
 8004312:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004314:	2300      	movs	r3, #0
 8004316:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800431e:	2b01      	cmp	r3, #1
 8004320:	d101      	bne.n	8004326 <HAL_TIM_IC_ConfigChannel+0x1e>
 8004322:	2302      	movs	r3, #2
 8004324:	e088      	b.n	8004438 <HAL_TIM_IC_ConfigChannel+0x130>
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	2201      	movs	r2, #1
 800432a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d11b      	bne.n	800436c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8004344:	f000 fa6e 	bl	8004824 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	699a      	ldr	r2, [r3, #24]
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f022 020c 	bic.w	r2, r2, #12
 8004356:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	6999      	ldr	r1, [r3, #24]
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	689a      	ldr	r2, [r3, #8]
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	430a      	orrs	r2, r1
 8004368:	619a      	str	r2, [r3, #24]
 800436a:	e060      	b.n	800442e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2b04      	cmp	r3, #4
 8004370:	d11c      	bne.n	80043ac <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8004382:	f000 faf7 	bl	8004974 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	699a      	ldr	r2, [r3, #24]
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8004394:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	6999      	ldr	r1, [r3, #24]
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	689b      	ldr	r3, [r3, #8]
 80043a0:	021a      	lsls	r2, r3, #8
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	430a      	orrs	r2, r1
 80043a8:	619a      	str	r2, [r3, #24]
 80043aa:	e040      	b.n	800442e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2b08      	cmp	r3, #8
 80043b0:	d11b      	bne.n	80043ea <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80043c2:	f000 fb44 	bl	8004a4e <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	69da      	ldr	r2, [r3, #28]
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f022 020c 	bic.w	r2, r2, #12
 80043d4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	69d9      	ldr	r1, [r3, #28]
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	689a      	ldr	r2, [r3, #8]
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	430a      	orrs	r2, r1
 80043e6:	61da      	str	r2, [r3, #28]
 80043e8:	e021      	b.n	800442e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2b0c      	cmp	r3, #12
 80043ee:	d11c      	bne.n	800442a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8004400:	f000 fb61 	bl	8004ac6 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	69da      	ldr	r2, [r3, #28]
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8004412:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	69d9      	ldr	r1, [r3, #28]
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	689b      	ldr	r3, [r3, #8]
 800441e:	021a      	lsls	r2, r3, #8
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	430a      	orrs	r2, r1
 8004426:	61da      	str	r2, [r3, #28]
 8004428:	e001      	b.n	800442e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800442a:	2301      	movs	r3, #1
 800442c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	2200      	movs	r2, #0
 8004432:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004436:	7dfb      	ldrb	r3, [r7, #23]
}
 8004438:	4618      	mov	r0, r3
 800443a:	3718      	adds	r7, #24
 800443c:	46bd      	mov	sp, r7
 800443e:	bd80      	pop	{r7, pc}

08004440 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b084      	sub	sp, #16
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
 8004448:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800444a:	2300      	movs	r3, #0
 800444c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004454:	2b01      	cmp	r3, #1
 8004456:	d101      	bne.n	800445c <HAL_TIM_ConfigClockSource+0x1c>
 8004458:	2302      	movs	r3, #2
 800445a:	e0b4      	b.n	80045c6 <HAL_TIM_ConfigClockSource+0x186>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2201      	movs	r2, #1
 8004460:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2202      	movs	r2, #2
 8004468:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800447a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004482:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	68ba      	ldr	r2, [r7, #8]
 800448a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004494:	d03e      	beq.n	8004514 <HAL_TIM_ConfigClockSource+0xd4>
 8004496:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800449a:	f200 8087 	bhi.w	80045ac <HAL_TIM_ConfigClockSource+0x16c>
 800449e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80044a2:	f000 8086 	beq.w	80045b2 <HAL_TIM_ConfigClockSource+0x172>
 80044a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80044aa:	d87f      	bhi.n	80045ac <HAL_TIM_ConfigClockSource+0x16c>
 80044ac:	2b70      	cmp	r3, #112	@ 0x70
 80044ae:	d01a      	beq.n	80044e6 <HAL_TIM_ConfigClockSource+0xa6>
 80044b0:	2b70      	cmp	r3, #112	@ 0x70
 80044b2:	d87b      	bhi.n	80045ac <HAL_TIM_ConfigClockSource+0x16c>
 80044b4:	2b60      	cmp	r3, #96	@ 0x60
 80044b6:	d050      	beq.n	800455a <HAL_TIM_ConfigClockSource+0x11a>
 80044b8:	2b60      	cmp	r3, #96	@ 0x60
 80044ba:	d877      	bhi.n	80045ac <HAL_TIM_ConfigClockSource+0x16c>
 80044bc:	2b50      	cmp	r3, #80	@ 0x50
 80044be:	d03c      	beq.n	800453a <HAL_TIM_ConfigClockSource+0xfa>
 80044c0:	2b50      	cmp	r3, #80	@ 0x50
 80044c2:	d873      	bhi.n	80045ac <HAL_TIM_ConfigClockSource+0x16c>
 80044c4:	2b40      	cmp	r3, #64	@ 0x40
 80044c6:	d058      	beq.n	800457a <HAL_TIM_ConfigClockSource+0x13a>
 80044c8:	2b40      	cmp	r3, #64	@ 0x40
 80044ca:	d86f      	bhi.n	80045ac <HAL_TIM_ConfigClockSource+0x16c>
 80044cc:	2b30      	cmp	r3, #48	@ 0x30
 80044ce:	d064      	beq.n	800459a <HAL_TIM_ConfigClockSource+0x15a>
 80044d0:	2b30      	cmp	r3, #48	@ 0x30
 80044d2:	d86b      	bhi.n	80045ac <HAL_TIM_ConfigClockSource+0x16c>
 80044d4:	2b20      	cmp	r3, #32
 80044d6:	d060      	beq.n	800459a <HAL_TIM_ConfigClockSource+0x15a>
 80044d8:	2b20      	cmp	r3, #32
 80044da:	d867      	bhi.n	80045ac <HAL_TIM_ConfigClockSource+0x16c>
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d05c      	beq.n	800459a <HAL_TIM_ConfigClockSource+0x15a>
 80044e0:	2b10      	cmp	r3, #16
 80044e2:	d05a      	beq.n	800459a <HAL_TIM_ConfigClockSource+0x15a>
 80044e4:	e062      	b.n	80045ac <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80044f6:	f000 fb3e 	bl	8004b76 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	689b      	ldr	r3, [r3, #8]
 8004500:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004508:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	68ba      	ldr	r2, [r7, #8]
 8004510:	609a      	str	r2, [r3, #8]
      break;
 8004512:	e04f      	b.n	80045b4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004524:	f000 fb27 	bl	8004b76 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	689a      	ldr	r2, [r3, #8]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004536:	609a      	str	r2, [r3, #8]
      break;
 8004538:	e03c      	b.n	80045b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004546:	461a      	mov	r2, r3
 8004548:	f000 f9e5 	bl	8004916 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	2150      	movs	r1, #80	@ 0x50
 8004552:	4618      	mov	r0, r3
 8004554:	f000 faf4 	bl	8004b40 <TIM_ITRx_SetConfig>
      break;
 8004558:	e02c      	b.n	80045b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004566:	461a      	mov	r2, r3
 8004568:	f000 fa41 	bl	80049ee <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	2160      	movs	r1, #96	@ 0x60
 8004572:	4618      	mov	r0, r3
 8004574:	f000 fae4 	bl	8004b40 <TIM_ITRx_SetConfig>
      break;
 8004578:	e01c      	b.n	80045b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004586:	461a      	mov	r2, r3
 8004588:	f000 f9c5 	bl	8004916 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	2140      	movs	r1, #64	@ 0x40
 8004592:	4618      	mov	r0, r3
 8004594:	f000 fad4 	bl	8004b40 <TIM_ITRx_SetConfig>
      break;
 8004598:	e00c      	b.n	80045b4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681a      	ldr	r2, [r3, #0]
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4619      	mov	r1, r3
 80045a4:	4610      	mov	r0, r2
 80045a6:	f000 facb 	bl	8004b40 <TIM_ITRx_SetConfig>
      break;
 80045aa:	e003      	b.n	80045b4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80045ac:	2301      	movs	r3, #1
 80045ae:	73fb      	strb	r3, [r7, #15]
      break;
 80045b0:	e000      	b.n	80045b4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80045b2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2201      	movs	r2, #1
 80045b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2200      	movs	r2, #0
 80045c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80045c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80045c6:	4618      	mov	r0, r3
 80045c8:	3710      	adds	r7, #16
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}
	...

080045d0 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b085      	sub	sp, #20
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
 80045d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80045da:	2300      	movs	r3, #0
 80045dc:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	2b0c      	cmp	r3, #12
 80045e2:	d831      	bhi.n	8004648 <HAL_TIM_ReadCapturedValue+0x78>
 80045e4:	a201      	add	r2, pc, #4	@ (adr r2, 80045ec <HAL_TIM_ReadCapturedValue+0x1c>)
 80045e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045ea:	bf00      	nop
 80045ec:	08004621 	.word	0x08004621
 80045f0:	08004649 	.word	0x08004649
 80045f4:	08004649 	.word	0x08004649
 80045f8:	08004649 	.word	0x08004649
 80045fc:	0800462b 	.word	0x0800462b
 8004600:	08004649 	.word	0x08004649
 8004604:	08004649 	.word	0x08004649
 8004608:	08004649 	.word	0x08004649
 800460c:	08004635 	.word	0x08004635
 8004610:	08004649 	.word	0x08004649
 8004614:	08004649 	.word	0x08004649
 8004618:	08004649 	.word	0x08004649
 800461c:	0800463f 	.word	0x0800463f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004626:	60fb      	str	r3, [r7, #12]

      break;
 8004628:	e00f      	b.n	800464a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004630:	60fb      	str	r3, [r7, #12]

      break;
 8004632:	e00a      	b.n	800464a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800463a:	60fb      	str	r3, [r7, #12]

      break;
 800463c:	e005      	b.n	800464a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004644:	60fb      	str	r3, [r7, #12]

      break;
 8004646:	e000      	b.n	800464a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8004648:	bf00      	nop
  }

  return tmpreg;
 800464a:	68fb      	ldr	r3, [r7, #12]
}
 800464c:	4618      	mov	r0, r3
 800464e:	3714      	adds	r7, #20
 8004650:	46bd      	mov	sp, r7
 8004652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004656:	4770      	bx	lr

08004658 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004658:	b480      	push	{r7}
 800465a:	b083      	sub	sp, #12
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004660:	bf00      	nop
 8004662:	370c      	adds	r7, #12
 8004664:	46bd      	mov	sp, r7
 8004666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466a:	4770      	bx	lr

0800466c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800466c:	b480      	push	{r7}
 800466e:	b083      	sub	sp, #12
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004674:	bf00      	nop
 8004676:	370c      	adds	r7, #12
 8004678:	46bd      	mov	sp, r7
 800467a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467e:	4770      	bx	lr

08004680 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004680:	b480      	push	{r7}
 8004682:	b083      	sub	sp, #12
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004688:	bf00      	nop
 800468a:	370c      	adds	r7, #12
 800468c:	46bd      	mov	sp, r7
 800468e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004692:	4770      	bx	lr

08004694 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004694:	b480      	push	{r7}
 8004696:	b085      	sub	sp, #20
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
 800469c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80046a4:	687a      	ldr	r2, [r7, #4]
 80046a6:	2300      	movs	r3, #0
 80046a8:	f2c4 0301 	movt	r3, #16385	@ 0x4001
 80046ac:	429a      	cmp	r2, r3
 80046ae:	d01f      	beq.n	80046f0 <TIM_Base_SetConfig+0x5c>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046b6:	d01b      	beq.n	80046f0 <TIM_Base_SetConfig+0x5c>
 80046b8:	687a      	ldr	r2, [r7, #4]
 80046ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80046be:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 80046c2:	429a      	cmp	r2, r3
 80046c4:	d014      	beq.n	80046f0 <TIM_Base_SetConfig+0x5c>
 80046c6:	687a      	ldr	r2, [r7, #4]
 80046c8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80046cc:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 80046d0:	429a      	cmp	r2, r3
 80046d2:	d00d      	beq.n	80046f0 <TIM_Base_SetConfig+0x5c>
 80046d4:	687a      	ldr	r2, [r7, #4]
 80046d6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80046da:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 80046de:	429a      	cmp	r2, r3
 80046e0:	d006      	beq.n	80046f0 <TIM_Base_SetConfig+0x5c>
 80046e2:	687a      	ldr	r2, [r7, #4]
 80046e4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80046e8:	f2c4 0301 	movt	r3, #16385	@ 0x4001
 80046ec:	429a      	cmp	r2, r3
 80046ee:	d108      	bne.n	8004702 <TIM_Base_SetConfig+0x6e>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	68fa      	ldr	r2, [r7, #12]
 80046fe:	4313      	orrs	r3, r2
 8004700:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004702:	687a      	ldr	r2, [r7, #4]
 8004704:	2300      	movs	r3, #0
 8004706:	f2c4 0301 	movt	r3, #16385	@ 0x4001
 800470a:	429a      	cmp	r2, r3
 800470c:	d049      	beq.n	80047a2 <TIM_Base_SetConfig+0x10e>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004714:	d045      	beq.n	80047a2 <TIM_Base_SetConfig+0x10e>
 8004716:	687a      	ldr	r2, [r7, #4]
 8004718:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800471c:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 8004720:	429a      	cmp	r2, r3
 8004722:	d03e      	beq.n	80047a2 <TIM_Base_SetConfig+0x10e>
 8004724:	687a      	ldr	r2, [r7, #4]
 8004726:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800472a:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 800472e:	429a      	cmp	r2, r3
 8004730:	d037      	beq.n	80047a2 <TIM_Base_SetConfig+0x10e>
 8004732:	687a      	ldr	r2, [r7, #4]
 8004734:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8004738:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 800473c:	429a      	cmp	r2, r3
 800473e:	d030      	beq.n	80047a2 <TIM_Base_SetConfig+0x10e>
 8004740:	687a      	ldr	r2, [r7, #4]
 8004742:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004746:	f2c4 0301 	movt	r3, #16385	@ 0x4001
 800474a:	429a      	cmp	r2, r3
 800474c:	d029      	beq.n	80047a2 <TIM_Base_SetConfig+0x10e>
 800474e:	687a      	ldr	r2, [r7, #4]
 8004750:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004754:	f2c4 0301 	movt	r3, #16385	@ 0x4001
 8004758:	429a      	cmp	r2, r3
 800475a:	d022      	beq.n	80047a2 <TIM_Base_SetConfig+0x10e>
 800475c:	687a      	ldr	r2, [r7, #4]
 800475e:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8004762:	f2c4 0301 	movt	r3, #16385	@ 0x4001
 8004766:	429a      	cmp	r2, r3
 8004768:	d01b      	beq.n	80047a2 <TIM_Base_SetConfig+0x10e>
 800476a:	687a      	ldr	r2, [r7, #4]
 800476c:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 8004770:	f2c4 0301 	movt	r3, #16385	@ 0x4001
 8004774:	429a      	cmp	r2, r3
 8004776:	d014      	beq.n	80047a2 <TIM_Base_SetConfig+0x10e>
 8004778:	687a      	ldr	r2, [r7, #4]
 800477a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800477e:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 8004782:	429a      	cmp	r2, r3
 8004784:	d00d      	beq.n	80047a2 <TIM_Base_SetConfig+0x10e>
 8004786:	687a      	ldr	r2, [r7, #4]
 8004788:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800478c:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 8004790:	429a      	cmp	r2, r3
 8004792:	d006      	beq.n	80047a2 <TIM_Base_SetConfig+0x10e>
 8004794:	687a      	ldr	r2, [r7, #4]
 8004796:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800479a:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 800479e:	429a      	cmp	r2, r3
 80047a0:	d108      	bne.n	80047b4 <TIM_Base_SetConfig+0x120>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80047a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	68db      	ldr	r3, [r3, #12]
 80047ae:	68fa      	ldr	r2, [r7, #12]
 80047b0:	4313      	orrs	r3, r2
 80047b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	695b      	ldr	r3, [r3, #20]
 80047be:	4313      	orrs	r3, r2
 80047c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	68fa      	ldr	r2, [r7, #12]
 80047c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	689a      	ldr	r2, [r3, #8]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80047d8:	687a      	ldr	r2, [r7, #4]
 80047da:	2300      	movs	r3, #0
 80047dc:	f2c4 0301 	movt	r3, #16385	@ 0x4001
 80047e0:	429a      	cmp	r2, r3
 80047e2:	d006      	beq.n	80047f2 <TIM_Base_SetConfig+0x15e>
 80047e4:	687a      	ldr	r2, [r7, #4]
 80047e6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80047ea:	f2c4 0301 	movt	r3, #16385	@ 0x4001
 80047ee:	429a      	cmp	r2, r3
 80047f0:	d103      	bne.n	80047fa <TIM_Base_SetConfig+0x166>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	691a      	ldr	r2, [r3, #16]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2201      	movs	r2, #1
 80047fe:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	691b      	ldr	r3, [r3, #16]
 8004804:	f003 0301 	and.w	r3, r3, #1
 8004808:	2b01      	cmp	r3, #1
 800480a:	d105      	bne.n	8004818 <TIM_Base_SetConfig+0x184>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	691b      	ldr	r3, [r3, #16]
 8004810:	f023 0201 	bic.w	r2, r3, #1
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	611a      	str	r2, [r3, #16]
  }
}
 8004818:	bf00      	nop
 800481a:	3714      	adds	r7, #20
 800481c:	46bd      	mov	sp, r7
 800481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004822:	4770      	bx	lr

08004824 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004824:	b480      	push	{r7}
 8004826:	b087      	sub	sp, #28
 8004828:	af00      	add	r7, sp, #0
 800482a:	60f8      	str	r0, [r7, #12]
 800482c:	60b9      	str	r1, [r7, #8]
 800482e:	607a      	str	r2, [r7, #4]
 8004830:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	6a1b      	ldr	r3, [r3, #32]
 8004836:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	6a1b      	ldr	r3, [r3, #32]
 800483c:	f023 0201 	bic.w	r2, r3, #1
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	699b      	ldr	r3, [r3, #24]
 8004848:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800484a:	68fa      	ldr	r2, [r7, #12]
 800484c:	2300      	movs	r3, #0
 800484e:	f2c4 0301 	movt	r3, #16385	@ 0x4001
 8004852:	429a      	cmp	r2, r3
 8004854:	d02d      	beq.n	80048b2 <TIM_TI1_SetConfig+0x8e>
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800485c:	d029      	beq.n	80048b2 <TIM_TI1_SetConfig+0x8e>
 800485e:	68fa      	ldr	r2, [r7, #12]
 8004860:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004864:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 8004868:	429a      	cmp	r2, r3
 800486a:	d022      	beq.n	80048b2 <TIM_TI1_SetConfig+0x8e>
 800486c:	68fa      	ldr	r2, [r7, #12]
 800486e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004872:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 8004876:	429a      	cmp	r2, r3
 8004878:	d01b      	beq.n	80048b2 <TIM_TI1_SetConfig+0x8e>
 800487a:	68fa      	ldr	r2, [r7, #12]
 800487c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8004880:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 8004884:	429a      	cmp	r2, r3
 8004886:	d014      	beq.n	80048b2 <TIM_TI1_SetConfig+0x8e>
 8004888:	68fa      	ldr	r2, [r7, #12]
 800488a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800488e:	f2c4 0301 	movt	r3, #16385	@ 0x4001
 8004892:	429a      	cmp	r2, r3
 8004894:	d00d      	beq.n	80048b2 <TIM_TI1_SetConfig+0x8e>
 8004896:	68fa      	ldr	r2, [r7, #12]
 8004898:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800489c:	f2c4 0301 	movt	r3, #16385	@ 0x4001
 80048a0:	429a      	cmp	r2, r3
 80048a2:	d006      	beq.n	80048b2 <TIM_TI1_SetConfig+0x8e>
 80048a4:	68fa      	ldr	r2, [r7, #12]
 80048a6:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80048aa:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 80048ae:	429a      	cmp	r2, r3
 80048b0:	d101      	bne.n	80048b6 <TIM_TI1_SetConfig+0x92>
 80048b2:	2301      	movs	r3, #1
 80048b4:	e000      	b.n	80048b8 <TIM_TI1_SetConfig+0x94>
 80048b6:	2300      	movs	r3, #0
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d008      	beq.n	80048ce <TIM_TI1_SetConfig+0xaa>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	f023 0303 	bic.w	r3, r3, #3
 80048c2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80048c4:	697a      	ldr	r2, [r7, #20]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	4313      	orrs	r3, r2
 80048ca:	617b      	str	r3, [r7, #20]
 80048cc:	e003      	b.n	80048d6 <TIM_TI1_SetConfig+0xb2>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80048ce:	697b      	ldr	r3, [r7, #20]
 80048d0:	f043 0301 	orr.w	r3, r3, #1
 80048d4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80048d6:	697b      	ldr	r3, [r7, #20]
 80048d8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80048dc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	011b      	lsls	r3, r3, #4
 80048e2:	b2db      	uxtb	r3, r3
 80048e4:	697a      	ldr	r2, [r7, #20]
 80048e6:	4313      	orrs	r3, r2
 80048e8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80048ea:	693b      	ldr	r3, [r7, #16]
 80048ec:	f023 030a 	bic.w	r3, r3, #10
 80048f0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	f003 030a 	and.w	r3, r3, #10
 80048f8:	693a      	ldr	r2, [r7, #16]
 80048fa:	4313      	orrs	r3, r2
 80048fc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	697a      	ldr	r2, [r7, #20]
 8004902:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	693a      	ldr	r2, [r7, #16]
 8004908:	621a      	str	r2, [r3, #32]
}
 800490a:	bf00      	nop
 800490c:	371c      	adds	r7, #28
 800490e:	46bd      	mov	sp, r7
 8004910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004914:	4770      	bx	lr

08004916 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004916:	b480      	push	{r7}
 8004918:	b087      	sub	sp, #28
 800491a:	af00      	add	r7, sp, #0
 800491c:	60f8      	str	r0, [r7, #12]
 800491e:	60b9      	str	r1, [r7, #8]
 8004920:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	6a1b      	ldr	r3, [r3, #32]
 8004926:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	6a1b      	ldr	r3, [r3, #32]
 800492c:	f023 0201 	bic.w	r2, r3, #1
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	699b      	ldr	r3, [r3, #24]
 8004938:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004940:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	011b      	lsls	r3, r3, #4
 8004946:	693a      	ldr	r2, [r7, #16]
 8004948:	4313      	orrs	r3, r2
 800494a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	f023 030a 	bic.w	r3, r3, #10
 8004952:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004954:	697a      	ldr	r2, [r7, #20]
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	4313      	orrs	r3, r2
 800495a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	693a      	ldr	r2, [r7, #16]
 8004960:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	697a      	ldr	r2, [r7, #20]
 8004966:	621a      	str	r2, [r3, #32]
}
 8004968:	bf00      	nop
 800496a:	371c      	adds	r7, #28
 800496c:	46bd      	mov	sp, r7
 800496e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004972:	4770      	bx	lr

08004974 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004974:	b480      	push	{r7}
 8004976:	b087      	sub	sp, #28
 8004978:	af00      	add	r7, sp, #0
 800497a:	60f8      	str	r0, [r7, #12]
 800497c:	60b9      	str	r1, [r7, #8]
 800497e:	607a      	str	r2, [r7, #4]
 8004980:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	6a1b      	ldr	r3, [r3, #32]
 8004986:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	6a1b      	ldr	r3, [r3, #32]
 800498c:	f023 0210 	bic.w	r2, r3, #16
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	699b      	ldr	r3, [r3, #24]
 8004998:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80049a0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	021b      	lsls	r3, r3, #8
 80049a6:	693a      	ldr	r2, [r7, #16]
 80049a8:	4313      	orrs	r3, r2
 80049aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80049ac:	693b      	ldr	r3, [r7, #16]
 80049ae:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80049b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	031b      	lsls	r3, r3, #12
 80049b8:	b29b      	uxth	r3, r3
 80049ba:	693a      	ldr	r2, [r7, #16]
 80049bc:	4313      	orrs	r3, r2
 80049be:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80049c6:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	011b      	lsls	r3, r3, #4
 80049cc:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80049d0:	697a      	ldr	r2, [r7, #20]
 80049d2:	4313      	orrs	r3, r2
 80049d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	693a      	ldr	r2, [r7, #16]
 80049da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	697a      	ldr	r2, [r7, #20]
 80049e0:	621a      	str	r2, [r3, #32]
}
 80049e2:	bf00      	nop
 80049e4:	371c      	adds	r7, #28
 80049e6:	46bd      	mov	sp, r7
 80049e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ec:	4770      	bx	lr

080049ee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80049ee:	b480      	push	{r7}
 80049f0:	b087      	sub	sp, #28
 80049f2:	af00      	add	r7, sp, #0
 80049f4:	60f8      	str	r0, [r7, #12]
 80049f6:	60b9      	str	r1, [r7, #8]
 80049f8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	6a1b      	ldr	r3, [r3, #32]
 80049fe:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	6a1b      	ldr	r3, [r3, #32]
 8004a04:	f023 0210 	bic.w	r2, r3, #16
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	699b      	ldr	r3, [r3, #24]
 8004a10:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004a12:	693b      	ldr	r3, [r7, #16]
 8004a14:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004a18:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	031b      	lsls	r3, r3, #12
 8004a1e:	693a      	ldr	r2, [r7, #16]
 8004a20:	4313      	orrs	r3, r2
 8004a22:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004a2a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	011b      	lsls	r3, r3, #4
 8004a30:	697a      	ldr	r2, [r7, #20]
 8004a32:	4313      	orrs	r3, r2
 8004a34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	693a      	ldr	r2, [r7, #16]
 8004a3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	697a      	ldr	r2, [r7, #20]
 8004a40:	621a      	str	r2, [r3, #32]
}
 8004a42:	bf00      	nop
 8004a44:	371c      	adds	r7, #28
 8004a46:	46bd      	mov	sp, r7
 8004a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4c:	4770      	bx	lr

08004a4e <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004a4e:	b480      	push	{r7}
 8004a50:	b087      	sub	sp, #28
 8004a52:	af00      	add	r7, sp, #0
 8004a54:	60f8      	str	r0, [r7, #12]
 8004a56:	60b9      	str	r1, [r7, #8]
 8004a58:	607a      	str	r2, [r7, #4]
 8004a5a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	6a1b      	ldr	r3, [r3, #32]
 8004a60:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	6a1b      	ldr	r3, [r3, #32]
 8004a66:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	69db      	ldr	r3, [r3, #28]
 8004a72:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004a74:	693b      	ldr	r3, [r7, #16]
 8004a76:	f023 0303 	bic.w	r3, r3, #3
 8004a7a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8004a7c:	693a      	ldr	r2, [r7, #16]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	4313      	orrs	r3, r2
 8004a82:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004a84:	693b      	ldr	r3, [r7, #16]
 8004a86:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004a8a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	011b      	lsls	r3, r3, #4
 8004a90:	b2db      	uxtb	r3, r3
 8004a92:	693a      	ldr	r2, [r7, #16]
 8004a94:	4313      	orrs	r3, r2
 8004a96:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8004a9e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	021b      	lsls	r3, r3, #8
 8004aa4:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8004aa8:	697a      	ldr	r2, [r7, #20]
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	693a      	ldr	r2, [r7, #16]
 8004ab2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	697a      	ldr	r2, [r7, #20]
 8004ab8:	621a      	str	r2, [r3, #32]
}
 8004aba:	bf00      	nop
 8004abc:	371c      	adds	r7, #28
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac4:	4770      	bx	lr

08004ac6 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004ac6:	b480      	push	{r7}
 8004ac8:	b087      	sub	sp, #28
 8004aca:	af00      	add	r7, sp, #0
 8004acc:	60f8      	str	r0, [r7, #12]
 8004ace:	60b9      	str	r1, [r7, #8]
 8004ad0:	607a      	str	r2, [r7, #4]
 8004ad2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	6a1b      	ldr	r3, [r3, #32]
 8004ad8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	6a1b      	ldr	r3, [r3, #32]
 8004ade:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	69db      	ldr	r3, [r3, #28]
 8004aea:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004aec:	693b      	ldr	r3, [r7, #16]
 8004aee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004af2:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	021b      	lsls	r3, r3, #8
 8004af8:	693a      	ldr	r2, [r7, #16]
 8004afa:	4313      	orrs	r3, r2
 8004afc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004afe:	693b      	ldr	r3, [r7, #16]
 8004b00:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004b04:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	031b      	lsls	r3, r3, #12
 8004b0a:	b29b      	uxth	r3, r3
 8004b0c:	693a      	ldr	r2, [r7, #16]
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8004b18:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	031b      	lsls	r3, r3, #12
 8004b1e:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8004b22:	697a      	ldr	r2, [r7, #20]
 8004b24:	4313      	orrs	r3, r2
 8004b26:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	693a      	ldr	r2, [r7, #16]
 8004b2c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	697a      	ldr	r2, [r7, #20]
 8004b32:	621a      	str	r2, [r3, #32]
}
 8004b34:	bf00      	nop
 8004b36:	371c      	adds	r7, #28
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3e:	4770      	bx	lr

08004b40 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b085      	sub	sp, #20
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
 8004b48:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	689b      	ldr	r3, [r3, #8]
 8004b4e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b56:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004b58:	683a      	ldr	r2, [r7, #0]
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	f043 0307 	orr.w	r3, r3, #7
 8004b62:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	68fa      	ldr	r2, [r7, #12]
 8004b68:	609a      	str	r2, [r3, #8]
}
 8004b6a:	bf00      	nop
 8004b6c:	3714      	adds	r7, #20
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b74:	4770      	bx	lr

08004b76 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004b76:	b480      	push	{r7}
 8004b78:	b087      	sub	sp, #28
 8004b7a:	af00      	add	r7, sp, #0
 8004b7c:	60f8      	str	r0, [r7, #12]
 8004b7e:	60b9      	str	r1, [r7, #8]
 8004b80:	607a      	str	r2, [r7, #4]
 8004b82:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b8a:	697b      	ldr	r3, [r7, #20]
 8004b8c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004b90:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	021a      	lsls	r2, r3, #8
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	431a      	orrs	r2, r3
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	697a      	ldr	r2, [r7, #20]
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	697a      	ldr	r2, [r7, #20]
 8004ba8:	609a      	str	r2, [r3, #8]
}
 8004baa:	bf00      	nop
 8004bac:	371c      	adds	r7, #28
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb4:	4770      	bx	lr

08004bb6 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004bb6:	b480      	push	{r7}
 8004bb8:	b087      	sub	sp, #28
 8004bba:	af00      	add	r7, sp, #0
 8004bbc:	60f8      	str	r0, [r7, #12]
 8004bbe:	60b9      	str	r1, [r7, #8]
 8004bc0:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	f003 031f 	and.w	r3, r3, #31
 8004bc8:	2201      	movs	r2, #1
 8004bca:	fa02 f303 	lsl.w	r3, r2, r3
 8004bce:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	6a1a      	ldr	r2, [r3, #32]
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	43db      	mvns	r3, r3
 8004bd8:	401a      	ands	r2, r3
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	6a1a      	ldr	r2, [r3, #32]
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	f003 031f 	and.w	r3, r3, #31
 8004be8:	6879      	ldr	r1, [r7, #4]
 8004bea:	fa01 f303 	lsl.w	r3, r1, r3
 8004bee:	431a      	orrs	r2, r3
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	621a      	str	r2, [r3, #32]
}
 8004bf4:	bf00      	nop
 8004bf6:	371c      	adds	r7, #28
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfe:	4770      	bx	lr

08004c00 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004c00:	b480      	push	{r7}
 8004c02:	b085      	sub	sp, #20
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
 8004c08:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c10:	2b01      	cmp	r3, #1
 8004c12:	d101      	bne.n	8004c18 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004c14:	2302      	movs	r3, #2
 8004c16:	e06e      	b.n	8004cf6 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2202      	movs	r2, #2
 8004c24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	689b      	ldr	r3, [r3, #8]
 8004c36:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c3e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	68fa      	ldr	r2, [r7, #12]
 8004c46:	4313      	orrs	r3, r2
 8004c48:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	68fa      	ldr	r2, [r7, #12]
 8004c50:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681a      	ldr	r2, [r3, #0]
 8004c56:	2300      	movs	r3, #0
 8004c58:	f2c4 0301 	movt	r3, #16385	@ 0x4001
 8004c5c:	429a      	cmp	r2, r3
 8004c5e:	d034      	beq.n	8004cca <HAL_TIMEx_MasterConfigSynchronization+0xca>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c68:	d02f      	beq.n	8004cca <HAL_TIMEx_MasterConfigSynchronization+0xca>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681a      	ldr	r2, [r3, #0]
 8004c6e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004c72:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 8004c76:	429a      	cmp	r2, r3
 8004c78:	d027      	beq.n	8004cca <HAL_TIMEx_MasterConfigSynchronization+0xca>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681a      	ldr	r2, [r3, #0]
 8004c7e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004c82:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 8004c86:	429a      	cmp	r2, r3
 8004c88:	d01f      	beq.n	8004cca <HAL_TIMEx_MasterConfigSynchronization+0xca>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681a      	ldr	r2, [r3, #0]
 8004c8e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8004c92:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 8004c96:	429a      	cmp	r2, r3
 8004c98:	d017      	beq.n	8004cca <HAL_TIMEx_MasterConfigSynchronization+0xca>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681a      	ldr	r2, [r3, #0]
 8004c9e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004ca2:	f2c4 0301 	movt	r3, #16385	@ 0x4001
 8004ca6:	429a      	cmp	r2, r3
 8004ca8:	d00f      	beq.n	8004cca <HAL_TIMEx_MasterConfigSynchronization+0xca>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681a      	ldr	r2, [r3, #0]
 8004cae:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004cb2:	f2c4 0301 	movt	r3, #16385	@ 0x4001
 8004cb6:	429a      	cmp	r2, r3
 8004cb8:	d007      	beq.n	8004cca <HAL_TIMEx_MasterConfigSynchronization+0xca>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681a      	ldr	r2, [r3, #0]
 8004cbe:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8004cc2:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 8004cc6:	429a      	cmp	r2, r3
 8004cc8:	d10c      	bne.n	8004ce4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004cd0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	68ba      	ldr	r2, [r7, #8]
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	68ba      	ldr	r2, [r7, #8]
 8004ce2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004cf4:	2300      	movs	r3, #0
}
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	3714      	adds	r7, #20
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d00:	4770      	bx	lr

08004d02 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004d02:	b480      	push	{r7}
 8004d04:	b083      	sub	sp, #12
 8004d06:	af00      	add	r7, sp, #0
 8004d08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004d0a:	bf00      	nop
 8004d0c:	370c      	adds	r7, #12
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d14:	4770      	bx	lr

08004d16 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004d16:	b480      	push	{r7}
 8004d18:	b083      	sub	sp, #12
 8004d1a:	af00      	add	r7, sp, #0
 8004d1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004d1e:	bf00      	nop
 8004d20:	370c      	adds	r7, #12
 8004d22:	46bd      	mov	sp, r7
 8004d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d28:	4770      	bx	lr

08004d2a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d2a:	b580      	push	{r7, lr}
 8004d2c:	b082      	sub	sp, #8
 8004d2e:	af00      	add	r7, sp, #0
 8004d30:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d101      	bne.n	8004d3c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	e042      	b.n	8004dc2 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d42:	b2db      	uxtb	r3, r3
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d106      	bne.n	8004d56 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d50:	6878      	ldr	r0, [r7, #4]
 8004d52:	f7fc ff5e 	bl	8001c12 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2224      	movs	r2, #36	@ 0x24
 8004d5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	68da      	ldr	r2, [r3, #12]
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004d6c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004d6e:	6878      	ldr	r0, [r7, #4]
 8004d70:	f000 f972 	bl	8005058 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	691a      	ldr	r2, [r3, #16]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004d82:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	695a      	ldr	r2, [r3, #20]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004d92:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	68da      	ldr	r2, [r3, #12]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004da2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2200      	movs	r2, #0
 8004da8:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2220      	movs	r2, #32
 8004dae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2220      	movs	r2, #32
 8004db6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004dc0:	2300      	movs	r3, #0
}
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	3708      	adds	r7, #8
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bd80      	pop	{r7, pc}

08004dca <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004dca:	b580      	push	{r7, lr}
 8004dcc:	b08a      	sub	sp, #40	@ 0x28
 8004dce:	af02      	add	r7, sp, #8
 8004dd0:	60f8      	str	r0, [r7, #12]
 8004dd2:	60b9      	str	r1, [r7, #8]
 8004dd4:	603b      	str	r3, [r7, #0]
 8004dd6:	4613      	mov	r3, r2
 8004dd8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004dda:	2300      	movs	r3, #0
 8004ddc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004de4:	b2db      	uxtb	r3, r3
 8004de6:	2b20      	cmp	r3, #32
 8004de8:	d175      	bne.n	8004ed6 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d002      	beq.n	8004df6 <HAL_UART_Transmit+0x2c>
 8004df0:	88fb      	ldrh	r3, [r7, #6]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d101      	bne.n	8004dfa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004df6:	2301      	movs	r3, #1
 8004df8:	e06e      	b.n	8004ed8 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	2221      	movs	r2, #33	@ 0x21
 8004e04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004e08:	f7fd fa90 	bl	800232c <HAL_GetTick>
 8004e0c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	88fa      	ldrh	r2, [r7, #6]
 8004e12:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	88fa      	ldrh	r2, [r7, #6]
 8004e18:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	689b      	ldr	r3, [r3, #8]
 8004e1e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e22:	d108      	bne.n	8004e36 <HAL_UART_Transmit+0x6c>
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	691b      	ldr	r3, [r3, #16]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d104      	bne.n	8004e36 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	61bb      	str	r3, [r7, #24]
 8004e34:	e003      	b.n	8004e3e <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004e3e:	e02e      	b.n	8004e9e <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	9300      	str	r3, [sp, #0]
 8004e44:	697b      	ldr	r3, [r7, #20]
 8004e46:	2200      	movs	r2, #0
 8004e48:	2180      	movs	r1, #128	@ 0x80
 8004e4a:	68f8      	ldr	r0, [r7, #12]
 8004e4c:	f000 f848 	bl	8004ee0 <UART_WaitOnFlagUntilTimeout>
 8004e50:	4603      	mov	r3, r0
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d005      	beq.n	8004e62 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	2220      	movs	r2, #32
 8004e5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004e5e:	2303      	movs	r3, #3
 8004e60:	e03a      	b.n	8004ed8 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004e62:	69fb      	ldr	r3, [r7, #28]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d10b      	bne.n	8004e80 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004e68:	69bb      	ldr	r3, [r7, #24]
 8004e6a:	881b      	ldrh	r3, [r3, #0]
 8004e6c:	461a      	mov	r2, r3
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e76:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004e78:	69bb      	ldr	r3, [r7, #24]
 8004e7a:	3302      	adds	r3, #2
 8004e7c:	61bb      	str	r3, [r7, #24]
 8004e7e:	e007      	b.n	8004e90 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004e80:	69fb      	ldr	r3, [r7, #28]
 8004e82:	781a      	ldrb	r2, [r3, #0]
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004e8a:	69fb      	ldr	r3, [r7, #28]
 8004e8c:	3301      	adds	r3, #1
 8004e8e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004e94:	b29b      	uxth	r3, r3
 8004e96:	3b01      	subs	r3, #1
 8004e98:	b29a      	uxth	r2, r3
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004ea2:	b29b      	uxth	r3, r3
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d1cb      	bne.n	8004e40 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	9300      	str	r3, [sp, #0]
 8004eac:	697b      	ldr	r3, [r7, #20]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	2140      	movs	r1, #64	@ 0x40
 8004eb2:	68f8      	ldr	r0, [r7, #12]
 8004eb4:	f000 f814 	bl	8004ee0 <UART_WaitOnFlagUntilTimeout>
 8004eb8:	4603      	mov	r3, r0
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d005      	beq.n	8004eca <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	2220      	movs	r2, #32
 8004ec2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004ec6:	2303      	movs	r3, #3
 8004ec8:	e006      	b.n	8004ed8 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	2220      	movs	r2, #32
 8004ece:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	e000      	b.n	8004ed8 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004ed6:	2302      	movs	r3, #2
  }
}
 8004ed8:	4618      	mov	r0, r3
 8004eda:	3720      	adds	r7, #32
 8004edc:	46bd      	mov	sp, r7
 8004ede:	bd80      	pop	{r7, pc}

08004ee0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b086      	sub	sp, #24
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	60f8      	str	r0, [r7, #12]
 8004ee8:	60b9      	str	r1, [r7, #8]
 8004eea:	603b      	str	r3, [r7, #0]
 8004eec:	4613      	mov	r3, r2
 8004eee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ef0:	e03b      	b.n	8004f6a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ef2:	6a3b      	ldr	r3, [r7, #32]
 8004ef4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004ef8:	d037      	beq.n	8004f6a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004efa:	f7fd fa17 	bl	800232c <HAL_GetTick>
 8004efe:	4602      	mov	r2, r0
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	1ad3      	subs	r3, r2, r3
 8004f04:	6a3a      	ldr	r2, [r7, #32]
 8004f06:	429a      	cmp	r2, r3
 8004f08:	d302      	bcc.n	8004f10 <UART_WaitOnFlagUntilTimeout+0x30>
 8004f0a:	6a3b      	ldr	r3, [r7, #32]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d101      	bne.n	8004f14 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004f10:	2303      	movs	r3, #3
 8004f12:	e03a      	b.n	8004f8a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	68db      	ldr	r3, [r3, #12]
 8004f1a:	f003 0304 	and.w	r3, r3, #4
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d023      	beq.n	8004f6a <UART_WaitOnFlagUntilTimeout+0x8a>
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	2b80      	cmp	r3, #128	@ 0x80
 8004f26:	d020      	beq.n	8004f6a <UART_WaitOnFlagUntilTimeout+0x8a>
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	2b40      	cmp	r3, #64	@ 0x40
 8004f2c:	d01d      	beq.n	8004f6a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f003 0308 	and.w	r3, r3, #8
 8004f38:	2b08      	cmp	r3, #8
 8004f3a:	d116      	bne.n	8004f6a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	617b      	str	r3, [r7, #20]
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	617b      	str	r3, [r7, #20]
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	617b      	str	r3, [r7, #20]
 8004f50:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004f52:	68f8      	ldr	r0, [r7, #12]
 8004f54:	f000 f81d 	bl	8004f92 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	2208      	movs	r2, #8
 8004f5c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	2200      	movs	r2, #0
 8004f62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004f66:	2301      	movs	r3, #1
 8004f68:	e00f      	b.n	8004f8a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	681a      	ldr	r2, [r3, #0]
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	4013      	ands	r3, r2
 8004f74:	68ba      	ldr	r2, [r7, #8]
 8004f76:	429a      	cmp	r2, r3
 8004f78:	bf0c      	ite	eq
 8004f7a:	2301      	moveq	r3, #1
 8004f7c:	2300      	movne	r3, #0
 8004f7e:	b2db      	uxtb	r3, r3
 8004f80:	461a      	mov	r2, r3
 8004f82:	79fb      	ldrb	r3, [r7, #7]
 8004f84:	429a      	cmp	r2, r3
 8004f86:	d0b4      	beq.n	8004ef2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f88:	2300      	movs	r3, #0
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	3718      	adds	r7, #24
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd80      	pop	{r7, pc}

08004f92 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f92:	b480      	push	{r7}
 8004f94:	b095      	sub	sp, #84	@ 0x54
 8004f96:	af00      	add	r7, sp, #0
 8004f98:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	330c      	adds	r3, #12
 8004fa0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fa2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fa4:	e853 3f00 	ldrex	r3, [r3]
 8004fa8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004faa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004fb0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	330c      	adds	r3, #12
 8004fb8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004fba:	643a      	str	r2, [r7, #64]	@ 0x40
 8004fbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fbe:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004fc0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004fc2:	e841 2300 	strex	r3, r2, [r1]
 8004fc6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004fc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d1e5      	bne.n	8004f9a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	3314      	adds	r3, #20
 8004fd4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fd6:	6a3b      	ldr	r3, [r7, #32]
 8004fd8:	e853 3f00 	ldrex	r3, [r3]
 8004fdc:	61fb      	str	r3, [r7, #28]
   return(result);
 8004fde:	69fb      	ldr	r3, [r7, #28]
 8004fe0:	f023 0301 	bic.w	r3, r3, #1
 8004fe4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	3314      	adds	r3, #20
 8004fec:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004fee:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004ff0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ff2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004ff4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004ff6:	e841 2300 	strex	r3, r2, [r1]
 8004ffa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d1e5      	bne.n	8004fce <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005006:	2b01      	cmp	r3, #1
 8005008:	d119      	bne.n	800503e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	330c      	adds	r3, #12
 8005010:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	e853 3f00 	ldrex	r3, [r3]
 8005018:	60bb      	str	r3, [r7, #8]
   return(result);
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	f023 0310 	bic.w	r3, r3, #16
 8005020:	647b      	str	r3, [r7, #68]	@ 0x44
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	330c      	adds	r3, #12
 8005028:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800502a:	61ba      	str	r2, [r7, #24]
 800502c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800502e:	6979      	ldr	r1, [r7, #20]
 8005030:	69ba      	ldr	r2, [r7, #24]
 8005032:	e841 2300 	strex	r3, r2, [r1]
 8005036:	613b      	str	r3, [r7, #16]
   return(result);
 8005038:	693b      	ldr	r3, [r7, #16]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d1e5      	bne.n	800500a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2220      	movs	r2, #32
 8005042:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2200      	movs	r2, #0
 800504a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800504c:	bf00      	nop
 800504e:	3754      	adds	r7, #84	@ 0x54
 8005050:	46bd      	mov	sp, r7
 8005052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005056:	4770      	bx	lr

08005058 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005058:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800505c:	b0cc      	sub	sp, #304	@ 0x130
 800505e:	af00      	add	r7, sp, #0
 8005060:	f8c7 0124 	str.w	r0, [r7, #292]	@ 0x124
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005064:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	691b      	ldr	r3, [r3, #16]
 800506c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005070:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8005074:	68d9      	ldr	r1, [r3, #12]
 8005076:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800507a:	681a      	ldr	r2, [r3, #0]
 800507c:	ea40 0301 	orr.w	r3, r0, r1
 8005080:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005082:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8005086:	689a      	ldr	r2, [r3, #8]
 8005088:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800508c:	691b      	ldr	r3, [r3, #16]
 800508e:	431a      	orrs	r2, r3
 8005090:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8005094:	695b      	ldr	r3, [r3, #20]
 8005096:	431a      	orrs	r2, r3
 8005098:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800509c:	69db      	ldr	r3, [r3, #28]
 800509e:	4313      	orrs	r3, r2
 80050a0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  MODIFY_REG(huart->Instance->CR1,
 80050a4:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	68db      	ldr	r3, [r3, #12]
 80050ac:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80050b0:	f021 010c 	bic.w	r1, r1, #12
 80050b4:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80050b8:	681a      	ldr	r2, [r3, #0]
 80050ba:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80050be:	430b      	orrs	r3, r1
 80050c0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80050c2:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	695b      	ldr	r3, [r3, #20]
 80050ca:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80050ce:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80050d2:	6999      	ldr	r1, [r3, #24]
 80050d4:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80050d8:	681a      	ldr	r2, [r3, #0]
 80050da:	ea40 0301 	orr.w	r3, r0, r1
 80050de:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80050e0:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80050e4:	681a      	ldr	r2, [r3, #0]
 80050e6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80050ea:	f2c4 0301 	movt	r3, #16385	@ 0x4001
 80050ee:	429a      	cmp	r2, r3
 80050f0:	d008      	beq.n	8005104 <UART_SetConfig+0xac>
 80050f2:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80050f6:	681a      	ldr	r2, [r3, #0]
 80050f8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80050fc:	f2c4 0301 	movt	r3, #16385	@ 0x4001
 8005100:	429a      	cmp	r2, r3
 8005102:	d104      	bne.n	800510e <UART_SetConfig+0xb6>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005104:	f7fe fd73 	bl	8003bee <HAL_RCC_GetPCLK2Freq>
 8005108:	f8c7 012c 	str.w	r0, [r7, #300]	@ 0x12c
 800510c:	e003      	b.n	8005116 <UART_SetConfig+0xbe>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800510e:	f7fe fd58 	bl	8003bc2 <HAL_RCC_GetPCLK1Freq>
 8005112:	f8c7 012c 	str.w	r0, [r7, #300]	@ 0x12c
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005116:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800511a:	69db      	ldr	r3, [r3, #28]
 800511c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005120:	f040 811d 	bne.w	800535e <UART_SetConfig+0x306>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005124:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005128:	2200      	movs	r2, #0
 800512a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 800512e:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8005132:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	@ 0x118
 8005136:	4622      	mov	r2, r4
 8005138:	462b      	mov	r3, r5
 800513a:	1891      	adds	r1, r2, r2
 800513c:	f8c7 1088 	str.w	r1, [r7, #136]	@ 0x88
 8005140:	415b      	adcs	r3, r3
 8005142:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005146:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800514a:	4621      	mov	r1, r4
 800514c:	eb12 0801 	adds.w	r8, r2, r1
 8005150:	4629      	mov	r1, r5
 8005152:	eb43 0901 	adc.w	r9, r3, r1
 8005156:	f04f 0200 	mov.w	r2, #0
 800515a:	f04f 0300 	mov.w	r3, #0
 800515e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005162:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005166:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800516a:	4690      	mov	r8, r2
 800516c:	4699      	mov	r9, r3
 800516e:	4623      	mov	r3, r4
 8005170:	eb18 0303 	adds.w	r3, r8, r3
 8005174:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8005178:	462b      	mov	r3, r5
 800517a:	eb49 0303 	adc.w	r3, r9, r3
 800517e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8005182:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	2200      	movs	r2, #0
 800518a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800518e:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
 8005192:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8005196:	460b      	mov	r3, r1
 8005198:	18db      	adds	r3, r3, r3
 800519a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800519e:	4613      	mov	r3, r2
 80051a0:	eb42 0303 	adc.w	r3, r2, r3
 80051a4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80051a8:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 80051ac:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 80051b0:	f7fb fd1a 	bl	8000be8 <__aeabi_uldivmod>
 80051b4:	4602      	mov	r2, r0
 80051b6:	460b      	mov	r3, r1
 80051b8:	f248 531f 	movw	r3, #34079	@ 0x851f
 80051bc:	f2c5 13eb 	movt	r3, #20971	@ 0x51eb
 80051c0:	fba3 2302 	umull	r2, r3, r3, r2
 80051c4:	095b      	lsrs	r3, r3, #5
 80051c6:	011c      	lsls	r4, r3, #4
 80051c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80051cc:	2200      	movs	r2, #0
 80051ce:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80051d2:	f8c7 2104 	str.w	r2, [r7, #260]	@ 0x104
 80051d6:	e9d7 8940 	ldrd	r8, r9, [r7, #256]	@ 0x100
 80051da:	4642      	mov	r2, r8
 80051dc:	464b      	mov	r3, r9
 80051de:	1891      	adds	r1, r2, r2
 80051e0:	67b9      	str	r1, [r7, #120]	@ 0x78
 80051e2:	415b      	adcs	r3, r3
 80051e4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80051e6:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 80051ea:	4641      	mov	r1, r8
 80051ec:	1851      	adds	r1, r2, r1
 80051ee:	6739      	str	r1, [r7, #112]	@ 0x70
 80051f0:	4649      	mov	r1, r9
 80051f2:	414b      	adcs	r3, r1
 80051f4:	677b      	str	r3, [r7, #116]	@ 0x74
 80051f6:	f04f 0200 	mov.w	r2, #0
 80051fa:	f04f 0300 	mov.w	r3, #0
 80051fe:	e9d7 ab1c 	ldrd	sl, fp, [r7, #112]	@ 0x70
 8005202:	4659      	mov	r1, fp
 8005204:	00cb      	lsls	r3, r1, #3
 8005206:	4651      	mov	r1, sl
 8005208:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800520c:	4651      	mov	r1, sl
 800520e:	00ca      	lsls	r2, r1, #3
 8005210:	4610      	mov	r0, r2
 8005212:	4619      	mov	r1, r3
 8005214:	4603      	mov	r3, r0
 8005216:	4642      	mov	r2, r8
 8005218:	189b      	adds	r3, r3, r2
 800521a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800521e:	464b      	mov	r3, r9
 8005220:	460a      	mov	r2, r1
 8005222:	eb42 0303 	adc.w	r3, r2, r3
 8005226:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800522a:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800522e:	685b      	ldr	r3, [r3, #4]
 8005230:	2200      	movs	r2, #0
 8005232:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005236:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 800523a:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800523e:	460b      	mov	r3, r1
 8005240:	18db      	adds	r3, r3, r3
 8005242:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005244:	4613      	mov	r3, r2
 8005246:	eb42 0303 	adc.w	r3, r2, r3
 800524a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800524c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8005250:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	@ 0xf8
 8005254:	f7fb fcc8 	bl	8000be8 <__aeabi_uldivmod>
 8005258:	4602      	mov	r2, r0
 800525a:	460b      	mov	r3, r1
 800525c:	4611      	mov	r1, r2
 800525e:	f248 531f 	movw	r3, #34079	@ 0x851f
 8005262:	f2c5 13eb 	movt	r3, #20971	@ 0x51eb
 8005266:	fba3 2301 	umull	r2, r3, r3, r1
 800526a:	095b      	lsrs	r3, r3, #5
 800526c:	2264      	movs	r2, #100	@ 0x64
 800526e:	fb02 f303 	mul.w	r3, r2, r3
 8005272:	1acb      	subs	r3, r1, r3
 8005274:	00db      	lsls	r3, r3, #3
 8005276:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800527a:	f248 531f 	movw	r3, #34079	@ 0x851f
 800527e:	f2c5 13eb 	movt	r3, #20971	@ 0x51eb
 8005282:	fba3 2302 	umull	r2, r3, r3, r2
 8005286:	095b      	lsrs	r3, r3, #5
 8005288:	005b      	lsls	r3, r3, #1
 800528a:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800528e:	441c      	add	r4, r3
 8005290:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005294:	2200      	movs	r2, #0
 8005296:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800529a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800529e:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 80052a2:	4642      	mov	r2, r8
 80052a4:	464b      	mov	r3, r9
 80052a6:	1891      	adds	r1, r2, r2
 80052a8:	6639      	str	r1, [r7, #96]	@ 0x60
 80052aa:	415b      	adcs	r3, r3
 80052ac:	667b      	str	r3, [r7, #100]	@ 0x64
 80052ae:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 80052b2:	4641      	mov	r1, r8
 80052b4:	1851      	adds	r1, r2, r1
 80052b6:	65b9      	str	r1, [r7, #88]	@ 0x58
 80052b8:	4649      	mov	r1, r9
 80052ba:	414b      	adcs	r3, r1
 80052bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80052be:	f04f 0200 	mov.w	r2, #0
 80052c2:	f04f 0300 	mov.w	r3, #0
 80052c6:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	@ 0x58
 80052ca:	4659      	mov	r1, fp
 80052cc:	00cb      	lsls	r3, r1, #3
 80052ce:	4651      	mov	r1, sl
 80052d0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80052d4:	4651      	mov	r1, sl
 80052d6:	00ca      	lsls	r2, r1, #3
 80052d8:	4610      	mov	r0, r2
 80052da:	4619      	mov	r1, r3
 80052dc:	4603      	mov	r3, r0
 80052de:	4642      	mov	r2, r8
 80052e0:	189b      	adds	r3, r3, r2
 80052e2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80052e6:	464b      	mov	r3, r9
 80052e8:	460a      	mov	r2, r1
 80052ea:	eb42 0303 	adc.w	r3, r2, r3
 80052ee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80052f2:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80052f6:	685b      	ldr	r3, [r3, #4]
 80052f8:	2200      	movs	r2, #0
 80052fa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80052fe:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005302:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005306:	460b      	mov	r3, r1
 8005308:	18db      	adds	r3, r3, r3
 800530a:	653b      	str	r3, [r7, #80]	@ 0x50
 800530c:	4613      	mov	r3, r2
 800530e:	eb42 0303 	adc.w	r3, r2, r3
 8005312:	657b      	str	r3, [r7, #84]	@ 0x54
 8005314:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005318:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800531c:	f7fb fc64 	bl	8000be8 <__aeabi_uldivmod>
 8005320:	4602      	mov	r2, r0
 8005322:	460b      	mov	r3, r1
 8005324:	f248 531f 	movw	r3, #34079	@ 0x851f
 8005328:	f2c5 13eb 	movt	r3, #20971	@ 0x51eb
 800532c:	fba3 1302 	umull	r1, r3, r3, r2
 8005330:	095b      	lsrs	r3, r3, #5
 8005332:	2164      	movs	r1, #100	@ 0x64
 8005334:	fb01 f303 	mul.w	r3, r1, r3
 8005338:	1ad3      	subs	r3, r2, r3
 800533a:	00db      	lsls	r3, r3, #3
 800533c:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005340:	f248 531f 	movw	r3, #34079	@ 0x851f
 8005344:	f2c5 13eb 	movt	r3, #20971	@ 0x51eb
 8005348:	fba3 2302 	umull	r2, r3, r3, r2
 800534c:	095b      	lsrs	r3, r3, #5
 800534e:	f003 0207 	and.w	r2, r3, #7
 8005352:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4422      	add	r2, r4
 800535a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800535c:	e129      	b.n	80055b2 <UART_SetConfig+0x55a>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800535e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005362:	2200      	movs	r2, #0
 8005364:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005368:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800536c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005370:	4642      	mov	r2, r8
 8005372:	464b      	mov	r3, r9
 8005374:	1891      	adds	r1, r2, r2
 8005376:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005378:	415b      	adcs	r3, r3
 800537a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800537c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005380:	4641      	mov	r1, r8
 8005382:	1854      	adds	r4, r2, r1
 8005384:	4649      	mov	r1, r9
 8005386:	eb43 0501 	adc.w	r5, r3, r1
 800538a:	f04f 0200 	mov.w	r2, #0
 800538e:	f04f 0300 	mov.w	r3, #0
 8005392:	00eb      	lsls	r3, r5, #3
 8005394:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005398:	00e2      	lsls	r2, r4, #3
 800539a:	4614      	mov	r4, r2
 800539c:	461d      	mov	r5, r3
 800539e:	4643      	mov	r3, r8
 80053a0:	18e3      	adds	r3, r4, r3
 80053a2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80053a6:	464b      	mov	r3, r9
 80053a8:	eb45 0303 	adc.w	r3, r5, r3
 80053ac:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80053b0:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	2200      	movs	r2, #0
 80053b8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80053bc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80053c0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80053c4:	460b      	mov	r3, r1
 80053c6:	eb13 0a03 	adds.w	sl, r3, r3
 80053ca:	4613      	mov	r3, r2
 80053cc:	eb43 0b03 	adc.w	fp, r3, r3
 80053d0:	eb1a 030a 	adds.w	r3, sl, sl
 80053d4:	643b      	str	r3, [r7, #64]	@ 0x40
 80053d6:	eb4b 030b 	adc.w	r3, fp, fp
 80053da:	647b      	str	r3, [r7, #68]	@ 0x44
 80053dc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80053e0:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80053e4:	f7fb fc00 	bl	8000be8 <__aeabi_uldivmod>
 80053e8:	4602      	mov	r2, r0
 80053ea:	460b      	mov	r3, r1
 80053ec:	f248 531f 	movw	r3, #34079	@ 0x851f
 80053f0:	f2c5 13eb 	movt	r3, #20971	@ 0x51eb
 80053f4:	fba3 2302 	umull	r2, r3, r3, r2
 80053f8:	095b      	lsrs	r3, r3, #5
 80053fa:	011c      	lsls	r4, r3, #4
 80053fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005400:	2200      	movs	r2, #0
 8005402:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005406:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800540a:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800540e:	4642      	mov	r2, r8
 8005410:	464b      	mov	r3, r9
 8005412:	1891      	adds	r1, r2, r2
 8005414:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005416:	415b      	adcs	r3, r3
 8005418:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800541a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800541e:	4641      	mov	r1, r8
 8005420:	1851      	adds	r1, r2, r1
 8005422:	6339      	str	r1, [r7, #48]	@ 0x30
 8005424:	4649      	mov	r1, r9
 8005426:	414b      	adcs	r3, r1
 8005428:	637b      	str	r3, [r7, #52]	@ 0x34
 800542a:	f04f 0200 	mov.w	r2, #0
 800542e:	f04f 0300 	mov.w	r3, #0
 8005432:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005436:	4659      	mov	r1, fp
 8005438:	00cb      	lsls	r3, r1, #3
 800543a:	4651      	mov	r1, sl
 800543c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005440:	4651      	mov	r1, sl
 8005442:	00ca      	lsls	r2, r1, #3
 8005444:	4610      	mov	r0, r2
 8005446:	4619      	mov	r1, r3
 8005448:	4603      	mov	r3, r0
 800544a:	4642      	mov	r2, r8
 800544c:	189b      	adds	r3, r3, r2
 800544e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005452:	464b      	mov	r3, r9
 8005454:	460a      	mov	r2, r1
 8005456:	eb42 0303 	adc.w	r3, r2, r3
 800545a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800545e:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8005462:	685b      	ldr	r3, [r3, #4]
 8005464:	2200      	movs	r2, #0
 8005466:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800546a:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800546e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005472:	460b      	mov	r3, r1
 8005474:	18db      	adds	r3, r3, r3
 8005476:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005478:	4613      	mov	r3, r2
 800547a:	eb42 0303 	adc.w	r3, r2, r3
 800547e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005480:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8005484:	460b      	mov	r3, r1
 8005486:	18db      	adds	r3, r3, r3
 8005488:	623b      	str	r3, [r7, #32]
 800548a:	4613      	mov	r3, r2
 800548c:	eb42 0303 	adc.w	r3, r2, r3
 8005490:	627b      	str	r3, [r7, #36]	@ 0x24
 8005492:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005496:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800549a:	f7fb fba5 	bl	8000be8 <__aeabi_uldivmod>
 800549e:	4602      	mov	r2, r0
 80054a0:	460b      	mov	r3, r1
 80054a2:	4611      	mov	r1, r2
 80054a4:	f248 531f 	movw	r3, #34079	@ 0x851f
 80054a8:	f2c5 13eb 	movt	r3, #20971	@ 0x51eb
 80054ac:	fba3 2301 	umull	r2, r3, r3, r1
 80054b0:	095b      	lsrs	r3, r3, #5
 80054b2:	2264      	movs	r2, #100	@ 0x64
 80054b4:	fb02 f303 	mul.w	r3, r2, r3
 80054b8:	1acb      	subs	r3, r1, r3
 80054ba:	011b      	lsls	r3, r3, #4
 80054bc:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80054c0:	f248 531f 	movw	r3, #34079	@ 0x851f
 80054c4:	f2c5 13eb 	movt	r3, #20971	@ 0x51eb
 80054c8:	fba3 2302 	umull	r2, r3, r3, r2
 80054cc:	095b      	lsrs	r3, r3, #5
 80054ce:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80054d2:	441c      	add	r4, r3
 80054d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80054d8:	2200      	movs	r2, #0
 80054da:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80054de:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80054e2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80054e6:	4642      	mov	r2, r8
 80054e8:	464b      	mov	r3, r9
 80054ea:	1891      	adds	r1, r2, r2
 80054ec:	61b9      	str	r1, [r7, #24]
 80054ee:	415b      	adcs	r3, r3
 80054f0:	61fb      	str	r3, [r7, #28]
 80054f2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80054f6:	4641      	mov	r1, r8
 80054f8:	1851      	adds	r1, r2, r1
 80054fa:	6139      	str	r1, [r7, #16]
 80054fc:	4649      	mov	r1, r9
 80054fe:	414b      	adcs	r3, r1
 8005500:	617b      	str	r3, [r7, #20]
 8005502:	f04f 0200 	mov.w	r2, #0
 8005506:	f04f 0300 	mov.w	r3, #0
 800550a:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800550e:	4659      	mov	r1, fp
 8005510:	00cb      	lsls	r3, r1, #3
 8005512:	4651      	mov	r1, sl
 8005514:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005518:	4651      	mov	r1, sl
 800551a:	00ca      	lsls	r2, r1, #3
 800551c:	4610      	mov	r0, r2
 800551e:	4619      	mov	r1, r3
 8005520:	4603      	mov	r3, r0
 8005522:	4642      	mov	r2, r8
 8005524:	189b      	adds	r3, r3, r2
 8005526:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800552a:	464b      	mov	r3, r9
 800552c:	460a      	mov	r2, r1
 800552e:	eb42 0303 	adc.w	r3, r2, r3
 8005532:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005536:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800553a:	685b      	ldr	r3, [r3, #4]
 800553c:	2200      	movs	r2, #0
 800553e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005542:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005546:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800554a:	460b      	mov	r3, r1
 800554c:	18db      	adds	r3, r3, r3
 800554e:	60bb      	str	r3, [r7, #8]
 8005550:	4613      	mov	r3, r2
 8005552:	eb42 0303 	adc.w	r3, r2, r3
 8005556:	60fb      	str	r3, [r7, #12]
 8005558:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800555c:	460b      	mov	r3, r1
 800555e:	18db      	adds	r3, r3, r3
 8005560:	603b      	str	r3, [r7, #0]
 8005562:	4613      	mov	r3, r2
 8005564:	eb42 0303 	adc.w	r3, r2, r3
 8005568:	607b      	str	r3, [r7, #4]
 800556a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800556e:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005572:	f7fb fb39 	bl	8000be8 <__aeabi_uldivmod>
 8005576:	4602      	mov	r2, r0
 8005578:	460b      	mov	r3, r1
 800557a:	f248 531f 	movw	r3, #34079	@ 0x851f
 800557e:	f2c5 13eb 	movt	r3, #20971	@ 0x51eb
 8005582:	fba3 1302 	umull	r1, r3, r3, r2
 8005586:	095b      	lsrs	r3, r3, #5
 8005588:	2164      	movs	r1, #100	@ 0x64
 800558a:	fb01 f303 	mul.w	r3, r1, r3
 800558e:	1ad3      	subs	r3, r2, r3
 8005590:	011b      	lsls	r3, r3, #4
 8005592:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005596:	f248 531f 	movw	r3, #34079	@ 0x851f
 800559a:	f2c5 13eb 	movt	r3, #20971	@ 0x51eb
 800559e:	fba3 2302 	umull	r2, r3, r3, r2
 80055a2:	095b      	lsrs	r3, r3, #5
 80055a4:	f003 020f 	and.w	r2, r3, #15
 80055a8:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4422      	add	r2, r4
 80055b0:	609a      	str	r2, [r3, #8]
}
 80055b2:	bf00      	nop
 80055b4:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80055b8:	46bd      	mov	sp, r7
 80055ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080055be <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80055be:	b480      	push	{r7}
 80055c0:	b085      	sub	sp, #20
 80055c2:	af00      	add	r7, sp, #0
 80055c4:	4603      	mov	r3, r0
 80055c6:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80055c8:	2300      	movs	r3, #0
 80055ca:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80055cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80055d0:	2b84      	cmp	r3, #132	@ 0x84
 80055d2:	d005      	beq.n	80055e0 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80055d4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	4413      	add	r3, r2
 80055dc:	3303      	adds	r3, #3
 80055de:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80055e0:	68fb      	ldr	r3, [r7, #12]
}
 80055e2:	4618      	mov	r0, r3
 80055e4:	3714      	adds	r7, #20
 80055e6:	46bd      	mov	sp, r7
 80055e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ec:	4770      	bx	lr

080055ee <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80055ee:	b580      	push	{r7, lr}
 80055f0:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80055f2:	f000 fba2 	bl	8005d3a <vTaskStartScheduler>
  
  return osOK;
 80055f6:	2300      	movs	r3, #0
}
 80055f8:	4618      	mov	r0, r3
 80055fa:	bd80      	pop	{r7, pc}

080055fc <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80055fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80055fe:	b089      	sub	sp, #36	@ 0x24
 8005600:	af04      	add	r7, sp, #16
 8005602:	6078      	str	r0, [r7, #4]
 8005604:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	695b      	ldr	r3, [r3, #20]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d020      	beq.n	8005650 <osThreadCreate+0x54>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	699b      	ldr	r3, [r3, #24]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d01c      	beq.n	8005650 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	685c      	ldr	r4, [r3, #4]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	691e      	ldr	r6, [r3, #16]
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005628:	4618      	mov	r0, r3
 800562a:	f7ff ffc8 	bl	80055be <makeFreeRtosPriority>
 800562e:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	695b      	ldr	r3, [r3, #20]
 8005634:	687a      	ldr	r2, [r7, #4]
 8005636:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005638:	9202      	str	r2, [sp, #8]
 800563a:	9301      	str	r3, [sp, #4]
 800563c:	9100      	str	r1, [sp, #0]
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	4632      	mov	r2, r6
 8005642:	4629      	mov	r1, r5
 8005644:	4620      	mov	r0, r4
 8005646:	f000 f8ed 	bl	8005824 <xTaskCreateStatic>
 800564a:	4603      	mov	r3, r0
 800564c:	60fb      	str	r3, [r7, #12]
 800564e:	e01c      	b.n	800568a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	685c      	ldr	r4, [r3, #4]
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800565c:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005664:	4618      	mov	r0, r3
 8005666:	f7ff ffaa 	bl	80055be <makeFreeRtosPriority>
 800566a:	4602      	mov	r2, r0
 800566c:	f107 030c 	add.w	r3, r7, #12
 8005670:	9301      	str	r3, [sp, #4]
 8005672:	9200      	str	r2, [sp, #0]
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	4632      	mov	r2, r6
 8005678:	4629      	mov	r1, r5
 800567a:	4620      	mov	r0, r4
 800567c:	f000 f932 	bl	80058e4 <xTaskCreate>
 8005680:	4603      	mov	r3, r0
 8005682:	2b01      	cmp	r3, #1
 8005684:	d001      	beq.n	800568a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005686:	2300      	movs	r3, #0
 8005688:	e000      	b.n	800568c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800568a:	68fb      	ldr	r3, [r7, #12]
}
 800568c:	4618      	mov	r0, r3
 800568e:	3714      	adds	r7, #20
 8005690:	46bd      	mov	sp, r7
 8005692:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005694 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b084      	sub	sp, #16
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d001      	beq.n	80056aa <osDelay+0x16>
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	e000      	b.n	80056ac <osDelay+0x18>
 80056aa:	2301      	movs	r3, #1
 80056ac:	4618      	mov	r0, r3
 80056ae:	f000 fb0d 	bl	8005ccc <vTaskDelay>
  
  return osOK;
 80056b2:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80056b4:	4618      	mov	r0, r3
 80056b6:	3710      	adds	r7, #16
 80056b8:	46bd      	mov	sp, r7
 80056ba:	bd80      	pop	{r7, pc}

080056bc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80056bc:	b480      	push	{r7}
 80056be:	b083      	sub	sp, #12
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	f103 0208 	add.w	r2, r3, #8
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80056d4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	f103 0208 	add.w	r2, r3, #8
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	f103 0208 	add.w	r2, r3, #8
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2200      	movs	r2, #0
 80056ee:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80056f0:	bf00      	nop
 80056f2:	370c      	adds	r7, #12
 80056f4:	46bd      	mov	sp, r7
 80056f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fa:	4770      	bx	lr

080056fc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80056fc:	b480      	push	{r7}
 80056fe:	b083      	sub	sp, #12
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2200      	movs	r2, #0
 8005708:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800570a:	bf00      	nop
 800570c:	370c      	adds	r7, #12
 800570e:	46bd      	mov	sp, r7
 8005710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005714:	4770      	bx	lr

08005716 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005716:	b480      	push	{r7}
 8005718:	b085      	sub	sp, #20
 800571a:	af00      	add	r7, sp, #0
 800571c:	6078      	str	r0, [r7, #4]
 800571e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	685b      	ldr	r3, [r3, #4]
 8005724:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	68fa      	ldr	r2, [r7, #12]
 800572a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	689a      	ldr	r2, [r3, #8]
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	689b      	ldr	r3, [r3, #8]
 8005738:	683a      	ldr	r2, [r7, #0]
 800573a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	683a      	ldr	r2, [r7, #0]
 8005740:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	687a      	ldr	r2, [r7, #4]
 8005746:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	1c5a      	adds	r2, r3, #1
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	601a      	str	r2, [r3, #0]
}
 8005752:	bf00      	nop
 8005754:	3714      	adds	r7, #20
 8005756:	46bd      	mov	sp, r7
 8005758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575c:	4770      	bx	lr

0800575e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800575e:	b480      	push	{r7}
 8005760:	b085      	sub	sp, #20
 8005762:	af00      	add	r7, sp, #0
 8005764:	6078      	str	r0, [r7, #4]
 8005766:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005774:	d103      	bne.n	800577e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	691b      	ldr	r3, [r3, #16]
 800577a:	60fb      	str	r3, [r7, #12]
 800577c:	e00c      	b.n	8005798 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	3308      	adds	r3, #8
 8005782:	60fb      	str	r3, [r7, #12]
 8005784:	e002      	b.n	800578c <vListInsert+0x2e>
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	685b      	ldr	r3, [r3, #4]
 800578a:	60fb      	str	r3, [r7, #12]
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	685b      	ldr	r3, [r3, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	68ba      	ldr	r2, [r7, #8]
 8005794:	429a      	cmp	r2, r3
 8005796:	d2f6      	bcs.n	8005786 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	685a      	ldr	r2, [r3, #4]
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	685b      	ldr	r3, [r3, #4]
 80057a4:	683a      	ldr	r2, [r7, #0]
 80057a6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	68fa      	ldr	r2, [r7, #12]
 80057ac:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	683a      	ldr	r2, [r7, #0]
 80057b2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	687a      	ldr	r2, [r7, #4]
 80057b8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	1c5a      	adds	r2, r3, #1
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	601a      	str	r2, [r3, #0]
}
 80057c4:	bf00      	nop
 80057c6:	3714      	adds	r7, #20
 80057c8:	46bd      	mov	sp, r7
 80057ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ce:	4770      	bx	lr

080057d0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80057d0:	b480      	push	{r7}
 80057d2:	b085      	sub	sp, #20
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	691b      	ldr	r3, [r3, #16]
 80057dc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	685b      	ldr	r3, [r3, #4]
 80057e2:	687a      	ldr	r2, [r7, #4]
 80057e4:	6892      	ldr	r2, [r2, #8]
 80057e6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	689b      	ldr	r3, [r3, #8]
 80057ec:	687a      	ldr	r2, [r7, #4]
 80057ee:	6852      	ldr	r2, [r2, #4]
 80057f0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	685b      	ldr	r3, [r3, #4]
 80057f6:	687a      	ldr	r2, [r7, #4]
 80057f8:	429a      	cmp	r2, r3
 80057fa:	d103      	bne.n	8005804 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	689a      	ldr	r2, [r3, #8]
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2200      	movs	r2, #0
 8005808:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	1e5a      	subs	r2, r3, #1
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
}
 8005818:	4618      	mov	r0, r3
 800581a:	3714      	adds	r7, #20
 800581c:	46bd      	mov	sp, r7
 800581e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005822:	4770      	bx	lr

08005824 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005824:	b580      	push	{r7, lr}
 8005826:	b08e      	sub	sp, #56	@ 0x38
 8005828:	af04      	add	r7, sp, #16
 800582a:	60f8      	str	r0, [r7, #12]
 800582c:	60b9      	str	r1, [r7, #8]
 800582e:	607a      	str	r2, [r7, #4]
 8005830:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005832:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005834:	2b00      	cmp	r3, #0
 8005836:	d10b      	bne.n	8005850 <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005838:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800583c:	f383 8811 	msr	BASEPRI, r3
 8005840:	f3bf 8f6f 	isb	sy
 8005844:	f3bf 8f4f 	dsb	sy
 8005848:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800584a:	bf00      	nop
 800584c:	bf00      	nop
 800584e:	e7fd      	b.n	800584c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005850:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005852:	2b00      	cmp	r3, #0
 8005854:	d10b      	bne.n	800586e <xTaskCreateStatic+0x4a>
	__asm volatile
 8005856:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800585a:	f383 8811 	msr	BASEPRI, r3
 800585e:	f3bf 8f6f 	isb	sy
 8005862:	f3bf 8f4f 	dsb	sy
 8005866:	61fb      	str	r3, [r7, #28]
}
 8005868:	bf00      	nop
 800586a:	bf00      	nop
 800586c:	e7fd      	b.n	800586a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800586e:	23a0      	movs	r3, #160	@ 0xa0
 8005870:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005872:	693b      	ldr	r3, [r7, #16]
 8005874:	2ba0      	cmp	r3, #160	@ 0xa0
 8005876:	d00b      	beq.n	8005890 <xTaskCreateStatic+0x6c>
	__asm volatile
 8005878:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800587c:	f383 8811 	msr	BASEPRI, r3
 8005880:	f3bf 8f6f 	isb	sy
 8005884:	f3bf 8f4f 	dsb	sy
 8005888:	61bb      	str	r3, [r7, #24]
}
 800588a:	bf00      	nop
 800588c:	bf00      	nop
 800588e:	e7fd      	b.n	800588c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005890:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005892:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005894:	2b00      	cmp	r3, #0
 8005896:	d01e      	beq.n	80058d6 <xTaskCreateStatic+0xb2>
 8005898:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800589a:	2b00      	cmp	r3, #0
 800589c:	d01b      	beq.n	80058d6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800589e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058a0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80058a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058a4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80058a6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80058a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058aa:	2202      	movs	r2, #2
 80058ac:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80058b0:	2300      	movs	r3, #0
 80058b2:	9303      	str	r3, [sp, #12]
 80058b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058b6:	9302      	str	r3, [sp, #8]
 80058b8:	f107 0314 	add.w	r3, r7, #20
 80058bc:	9301      	str	r3, [sp, #4]
 80058be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058c0:	9300      	str	r3, [sp, #0]
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	687a      	ldr	r2, [r7, #4]
 80058c6:	68b9      	ldr	r1, [r7, #8]
 80058c8:	68f8      	ldr	r0, [r7, #12]
 80058ca:	f000 f851 	bl	8005970 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80058ce:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80058d0:	f000 f8ee 	bl	8005ab0 <prvAddNewTaskToReadyList>
 80058d4:	e001      	b.n	80058da <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80058d6:	2300      	movs	r3, #0
 80058d8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80058da:	697b      	ldr	r3, [r7, #20]
	}
 80058dc:	4618      	mov	r0, r3
 80058de:	3728      	adds	r7, #40	@ 0x28
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bd80      	pop	{r7, pc}

080058e4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b08c      	sub	sp, #48	@ 0x30
 80058e8:	af04      	add	r7, sp, #16
 80058ea:	60f8      	str	r0, [r7, #12]
 80058ec:	60b9      	str	r1, [r7, #8]
 80058ee:	603b      	str	r3, [r7, #0]
 80058f0:	4613      	mov	r3, r2
 80058f2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80058f4:	88fb      	ldrh	r3, [r7, #6]
 80058f6:	009b      	lsls	r3, r3, #2
 80058f8:	4618      	mov	r0, r3
 80058fa:	f001 f8a5 	bl	8006a48 <pvPortMalloc>
 80058fe:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005900:	697b      	ldr	r3, [r7, #20]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d00e      	beq.n	8005924 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005906:	20a0      	movs	r0, #160	@ 0xa0
 8005908:	f001 f89e 	bl	8006a48 <pvPortMalloc>
 800590c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800590e:	69fb      	ldr	r3, [r7, #28]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d003      	beq.n	800591c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005914:	69fb      	ldr	r3, [r7, #28]
 8005916:	697a      	ldr	r2, [r7, #20]
 8005918:	631a      	str	r2, [r3, #48]	@ 0x30
 800591a:	e005      	b.n	8005928 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800591c:	6978      	ldr	r0, [r7, #20]
 800591e:	f001 f984 	bl	8006c2a <vPortFree>
 8005922:	e001      	b.n	8005928 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005924:	2300      	movs	r3, #0
 8005926:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005928:	69fb      	ldr	r3, [r7, #28]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d017      	beq.n	800595e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800592e:	69fb      	ldr	r3, [r7, #28]
 8005930:	2200      	movs	r2, #0
 8005932:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005936:	88fa      	ldrh	r2, [r7, #6]
 8005938:	2300      	movs	r3, #0
 800593a:	9303      	str	r3, [sp, #12]
 800593c:	69fb      	ldr	r3, [r7, #28]
 800593e:	9302      	str	r3, [sp, #8]
 8005940:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005942:	9301      	str	r3, [sp, #4]
 8005944:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005946:	9300      	str	r3, [sp, #0]
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	68b9      	ldr	r1, [r7, #8]
 800594c:	68f8      	ldr	r0, [r7, #12]
 800594e:	f000 f80f 	bl	8005970 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005952:	69f8      	ldr	r0, [r7, #28]
 8005954:	f000 f8ac 	bl	8005ab0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005958:	2301      	movs	r3, #1
 800595a:	61bb      	str	r3, [r7, #24]
 800595c:	e002      	b.n	8005964 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800595e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005962:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005964:	69bb      	ldr	r3, [r7, #24]
	}
 8005966:	4618      	mov	r0, r3
 8005968:	3720      	adds	r7, #32
 800596a:	46bd      	mov	sp, r7
 800596c:	bd80      	pop	{r7, pc}
	...

08005970 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b088      	sub	sp, #32
 8005974:	af00      	add	r7, sp, #0
 8005976:	60f8      	str	r0, [r7, #12]
 8005978:	60b9      	str	r1, [r7, #8]
 800597a:	607a      	str	r2, [r7, #4]
 800597c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800597e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005980:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005988:	3b01      	subs	r3, #1
 800598a:	009b      	lsls	r3, r3, #2
 800598c:	4413      	add	r3, r2
 800598e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005990:	69bb      	ldr	r3, [r7, #24]
 8005992:	f023 0307 	bic.w	r3, r3, #7
 8005996:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005998:	69bb      	ldr	r3, [r7, #24]
 800599a:	f003 0307 	and.w	r3, r3, #7
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d00b      	beq.n	80059ba <prvInitialiseNewTask+0x4a>
	__asm volatile
 80059a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059a6:	f383 8811 	msr	BASEPRI, r3
 80059aa:	f3bf 8f6f 	isb	sy
 80059ae:	f3bf 8f4f 	dsb	sy
 80059b2:	617b      	str	r3, [r7, #20]
}
 80059b4:	bf00      	nop
 80059b6:	bf00      	nop
 80059b8:	e7fd      	b.n	80059b6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d01f      	beq.n	8005a00 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80059c0:	2300      	movs	r3, #0
 80059c2:	61fb      	str	r3, [r7, #28]
 80059c4:	e012      	b.n	80059ec <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80059c6:	68ba      	ldr	r2, [r7, #8]
 80059c8:	69fb      	ldr	r3, [r7, #28]
 80059ca:	4413      	add	r3, r2
 80059cc:	7819      	ldrb	r1, [r3, #0]
 80059ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80059d0:	69fb      	ldr	r3, [r7, #28]
 80059d2:	4413      	add	r3, r2
 80059d4:	3334      	adds	r3, #52	@ 0x34
 80059d6:	460a      	mov	r2, r1
 80059d8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80059da:	68ba      	ldr	r2, [r7, #8]
 80059dc:	69fb      	ldr	r3, [r7, #28]
 80059de:	4413      	add	r3, r2
 80059e0:	781b      	ldrb	r3, [r3, #0]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d006      	beq.n	80059f4 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80059e6:	69fb      	ldr	r3, [r7, #28]
 80059e8:	3301      	adds	r3, #1
 80059ea:	61fb      	str	r3, [r7, #28]
 80059ec:	69fb      	ldr	r3, [r7, #28]
 80059ee:	2b0f      	cmp	r3, #15
 80059f0:	d9e9      	bls.n	80059c6 <prvInitialiseNewTask+0x56>
 80059f2:	e000      	b.n	80059f6 <prvInitialiseNewTask+0x86>
			{
				break;
 80059f4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80059f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059f8:	2200      	movs	r2, #0
 80059fa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80059fe:	e003      	b.n	8005a08 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005a00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a02:	2200      	movs	r2, #0
 8005a04:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005a08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a0a:	2b06      	cmp	r3, #6
 8005a0c:	d901      	bls.n	8005a12 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005a0e:	2306      	movs	r3, #6
 8005a10:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005a12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a14:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005a16:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005a18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a1a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005a1c:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005a1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a20:	2200      	movs	r2, #0
 8005a22:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005a24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a26:	3304      	adds	r3, #4
 8005a28:	4618      	mov	r0, r3
 8005a2a:	f7ff fe67 	bl	80056fc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005a2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a30:	3318      	adds	r3, #24
 8005a32:	4618      	mov	r0, r3
 8005a34:	f7ff fe62 	bl	80056fc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005a38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a3a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a3c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a40:	f1c3 0207 	rsb	r2, r3, #7
 8005a44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a46:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005a48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a4a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a4c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005a4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a50:	2200      	movs	r2, #0
 8005a52:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005a56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a58:	2200      	movs	r2, #0
 8005a5a:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005a5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a60:	334c      	adds	r3, #76	@ 0x4c
 8005a62:	224c      	movs	r2, #76	@ 0x4c
 8005a64:	2100      	movs	r1, #0
 8005a66:	4618      	mov	r0, r3
 8005a68:	f001 ffa3 	bl	80079b2 <memset>
 8005a6c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a6e:	f244 3340 	movw	r3, #17216	@ 0x4340
 8005a72:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8005a76:	6513      	str	r3, [r2, #80]	@ 0x50
 8005a78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a7a:	4a0b      	ldr	r2, [pc, #44]	@ (8005aa8 <prvInitialiseNewTask+0x138>)
 8005a7c:	655a      	str	r2, [r3, #84]	@ 0x54
 8005a7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a80:	4a0a      	ldr	r2, [pc, #40]	@ (8005aac <prvInitialiseNewTask+0x13c>)
 8005a82:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005a84:	683a      	ldr	r2, [r7, #0]
 8005a86:	68f9      	ldr	r1, [r7, #12]
 8005a88:	69b8      	ldr	r0, [r7, #24]
 8005a8a:	f000 fd83 	bl	8006594 <pxPortInitialiseStack>
 8005a8e:	4602      	mov	r2, r0
 8005a90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a92:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005a94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d002      	beq.n	8005aa0 <prvInitialiseNewTask+0x130>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005a9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a9c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a9e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005aa0:	bf00      	nop
 8005aa2:	3720      	adds	r7, #32
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	bd80      	pop	{r7, pc}
 8005aa8:	200043a8 	.word	0x200043a8
 8005aac:	20004410 	.word	0x20004410

08005ab0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b082      	sub	sp, #8
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005ab8:	f000 fecb 	bl	8006852 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005abc:	f240 63ec 	movw	r3, #1772	@ 0x6ec
 8005ac0:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	1c5a      	adds	r2, r3, #1
 8005ac8:	f240 63ec 	movw	r3, #1772	@ 0x6ec
 8005acc:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8005ad0:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8005ad2:	f240 53ec 	movw	r3, #1516	@ 0x5ec
 8005ad6:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d10f      	bne.n	8005b00 <prvAddNewTaskToReadyList+0x50>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005ae0:	f240 53ec 	movw	r3, #1516	@ 0x5ec
 8005ae4:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8005ae8:	687a      	ldr	r2, [r7, #4]
 8005aea:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005aec:	f240 63ec 	movw	r3, #1772	@ 0x6ec
 8005af0:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	2b01      	cmp	r3, #1
 8005af8:	d119      	bne.n	8005b2e <prvAddNewTaskToReadyList+0x7e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005afa:	f000 fbe8 	bl	80062ce <prvInitialiseTaskLists>
 8005afe:	e016      	b.n	8005b2e <prvAddNewTaskToReadyList+0x7e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005b00:	f240 63f8 	movw	r3, #1784	@ 0x6f8
 8005b04:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d10f      	bne.n	8005b2e <prvAddNewTaskToReadyList+0x7e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005b0e:	f240 53ec 	movw	r3, #1516	@ 0x5ec
 8005b12:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b1e:	429a      	cmp	r2, r3
 8005b20:	d805      	bhi.n	8005b2e <prvAddNewTaskToReadyList+0x7e>
				{
					pxCurrentTCB = pxNewTCB;
 8005b22:	f240 53ec 	movw	r3, #1516	@ 0x5ec
 8005b26:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8005b2a:	687a      	ldr	r2, [r7, #4]
 8005b2c:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005b2e:	f240 7308 	movw	r3, #1800	@ 0x708
 8005b32:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	1c5a      	adds	r2, r3, #1
 8005b3a:	f240 7308 	movw	r3, #1800	@ 0x708
 8005b3e:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8005b42:	601a      	str	r2, [r3, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b48:	2201      	movs	r2, #1
 8005b4a:	409a      	lsls	r2, r3
 8005b4c:	f240 63f4 	movw	r3, #1780	@ 0x6f4
 8005b50:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	431a      	orrs	r2, r3
 8005b58:	f240 63f4 	movw	r3, #1780	@ 0x6f4
 8005b5c:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8005b60:	601a      	str	r2, [r3, #0]
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b66:	2214      	movs	r2, #20
 8005b68:	fb03 f202 	mul.w	r2, r3, r2
 8005b6c:	f240 53f0 	movw	r3, #1520	@ 0x5f0
 8005b70:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8005b74:	441a      	add	r2, r3
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	3304      	adds	r3, #4
 8005b7a:	4619      	mov	r1, r3
 8005b7c:	4610      	mov	r0, r2
 8005b7e:	f7ff fdca 	bl	8005716 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005b82:	f000 fe9f 	bl	80068c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005b86:	f240 63f8 	movw	r3, #1784	@ 0x6f8
 8005b8a:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d014      	beq.n	8005bbe <prvAddNewTaskToReadyList+0x10e>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005b94:	f240 53ec 	movw	r3, #1516	@ 0x5ec
 8005b98:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ba4:	429a      	cmp	r2, r3
 8005ba6:	d20a      	bcs.n	8005bbe <prvAddNewTaskToReadyList+0x10e>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005ba8:	f64e 5304 	movw	r3, #60676	@ 0xed04
 8005bac:	f2ce 0300 	movt	r3, #57344	@ 0xe000
 8005bb0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005bb4:	601a      	str	r2, [r3, #0]
 8005bb6:	f3bf 8f4f 	dsb	sy
 8005bba:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005bbe:	bf00      	nop
 8005bc0:	3708      	adds	r7, #8
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bd80      	pop	{r7, pc}

08005bc6 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8005bc6:	b580      	push	{r7, lr}
 8005bc8:	b08a      	sub	sp, #40	@ 0x28
 8005bca:	af00      	add	r7, sp, #0
 8005bcc:	6078      	str	r0, [r7, #4]
 8005bce:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	627b      	str	r3, [r7, #36]	@ 0x24

		configASSERT( pxPreviousWakeTime );
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d10b      	bne.n	8005bf2 <vTaskDelayUntil+0x2c>
	__asm volatile
 8005bda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bde:	f383 8811 	msr	BASEPRI, r3
 8005be2:	f3bf 8f6f 	isb	sy
 8005be6:	f3bf 8f4f 	dsb	sy
 8005bea:	617b      	str	r3, [r7, #20]
}
 8005bec:	bf00      	nop
 8005bee:	bf00      	nop
 8005bf0:	e7fd      	b.n	8005bee <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d10b      	bne.n	8005c10 <vTaskDelayUntil+0x4a>
	__asm volatile
 8005bf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bfc:	f383 8811 	msr	BASEPRI, r3
 8005c00:	f3bf 8f6f 	isb	sy
 8005c04:	f3bf 8f4f 	dsb	sy
 8005c08:	613b      	str	r3, [r7, #16]
}
 8005c0a:	bf00      	nop
 8005c0c:	bf00      	nop
 8005c0e:	e7fd      	b.n	8005c0c <vTaskDelayUntil+0x46>
		configASSERT( uxSchedulerSuspended == 0 );
 8005c10:	f240 7314 	movw	r3, #1812	@ 0x714
 8005c14:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d00b      	beq.n	8005c36 <vTaskDelayUntil+0x70>
	__asm volatile
 8005c1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c22:	f383 8811 	msr	BASEPRI, r3
 8005c26:	f3bf 8f6f 	isb	sy
 8005c2a:	f3bf 8f4f 	dsb	sy
 8005c2e:	60fb      	str	r3, [r7, #12]
}
 8005c30:	bf00      	nop
 8005c32:	bf00      	nop
 8005c34:	e7fd      	b.n	8005c32 <vTaskDelayUntil+0x6c>

		vTaskSuspendAll();
 8005c36:	f000 f8f6 	bl	8005e26 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8005c3a:	f240 63f0 	movw	r3, #1776	@ 0x6f0
 8005c3e:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	683a      	ldr	r2, [r7, #0]
 8005c4c:	4413      	add	r3, r2
 8005c4e:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	6a3a      	ldr	r2, [r7, #32]
 8005c56:	429a      	cmp	r2, r3
 8005c58:	d20b      	bcs.n	8005c72 <vTaskDelayUntil+0xac>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	69fa      	ldr	r2, [r7, #28]
 8005c60:	429a      	cmp	r2, r3
 8005c62:	d211      	bcs.n	8005c88 <vTaskDelayUntil+0xc2>
 8005c64:	69fa      	ldr	r2, [r7, #28]
 8005c66:	6a3b      	ldr	r3, [r7, #32]
 8005c68:	429a      	cmp	r2, r3
 8005c6a:	d90d      	bls.n	8005c88 <vTaskDelayUntil+0xc2>
				{
					xShouldDelay = pdTRUE;
 8005c6c:	2301      	movs	r3, #1
 8005c6e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c70:	e00a      	b.n	8005c88 <vTaskDelayUntil+0xc2>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	69fa      	ldr	r2, [r7, #28]
 8005c78:	429a      	cmp	r2, r3
 8005c7a:	d303      	bcc.n	8005c84 <vTaskDelayUntil+0xbe>
 8005c7c:	69fa      	ldr	r2, [r7, #28]
 8005c7e:	6a3b      	ldr	r3, [r7, #32]
 8005c80:	429a      	cmp	r2, r3
 8005c82:	d901      	bls.n	8005c88 <vTaskDelayUntil+0xc2>
				{
					xShouldDelay = pdTRUE;
 8005c84:	2301      	movs	r3, #1
 8005c86:	627b      	str	r3, [r7, #36]	@ 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	69fa      	ldr	r2, [r7, #28]
 8005c8c:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8005c8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d006      	beq.n	8005ca2 <vTaskDelayUntil+0xdc>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8005c94:	69fa      	ldr	r2, [r7, #28]
 8005c96:	6a3b      	ldr	r3, [r7, #32]
 8005c98:	1ad3      	subs	r3, r2, r3
 8005c9a:	2100      	movs	r1, #0
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	f000 fbf8 	bl	8006492 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8005ca2:	f000 f8d2 	bl	8005e4a <xTaskResumeAll>
 8005ca6:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005ca8:	69bb      	ldr	r3, [r7, #24]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d10a      	bne.n	8005cc4 <vTaskDelayUntil+0xfe>
		{
			portYIELD_WITHIN_API();
 8005cae:	f64e 5304 	movw	r3, #60676	@ 0xed04
 8005cb2:	f2ce 0300 	movt	r3, #57344	@ 0xe000
 8005cb6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005cba:	601a      	str	r2, [r3, #0]
 8005cbc:	f3bf 8f4f 	dsb	sy
 8005cc0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005cc4:	bf00      	nop
 8005cc6:	3728      	adds	r7, #40	@ 0x28
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	bd80      	pop	{r7, pc}

08005ccc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b084      	sub	sp, #16
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d01b      	beq.n	8005d16 <vTaskDelay+0x4a>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005cde:	f240 7314 	movw	r3, #1812	@ 0x714
 8005ce2:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d00b      	beq.n	8005d04 <vTaskDelay+0x38>
	__asm volatile
 8005cec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cf0:	f383 8811 	msr	BASEPRI, r3
 8005cf4:	f3bf 8f6f 	isb	sy
 8005cf8:	f3bf 8f4f 	dsb	sy
 8005cfc:	60bb      	str	r3, [r7, #8]
}
 8005cfe:	bf00      	nop
 8005d00:	bf00      	nop
 8005d02:	e7fd      	b.n	8005d00 <vTaskDelay+0x34>
			vTaskSuspendAll();
 8005d04:	f000 f88f 	bl	8005e26 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005d08:	2100      	movs	r1, #0
 8005d0a:	6878      	ldr	r0, [r7, #4]
 8005d0c:	f000 fbc1 	bl	8006492 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005d10:	f000 f89b 	bl	8005e4a <xTaskResumeAll>
 8005d14:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d10a      	bne.n	8005d32 <vTaskDelay+0x66>
		{
			portYIELD_WITHIN_API();
 8005d1c:	f64e 5304 	movw	r3, #60676	@ 0xed04
 8005d20:	f2ce 0300 	movt	r3, #57344	@ 0xe000
 8005d24:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d28:	601a      	str	r2, [r3, #0]
 8005d2a:	f3bf 8f4f 	dsb	sy
 8005d2e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005d32:	bf00      	nop
 8005d34:	3710      	adds	r7, #16
 8005d36:	46bd      	mov	sp, r7
 8005d38:	bd80      	pop	{r7, pc}

08005d3a <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005d3a:	b580      	push	{r7, lr}
 8005d3c:	b08a      	sub	sp, #40	@ 0x28
 8005d3e:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005d40:	2300      	movs	r3, #0
 8005d42:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005d44:	2300      	movs	r3, #0
 8005d46:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005d48:	463a      	mov	r2, r7
 8005d4a:	1d39      	adds	r1, r7, #4
 8005d4c:	f107 0308 	add.w	r3, r7, #8
 8005d50:	4618      	mov	r0, r3
 8005d52:	f7fb fa8b 	bl	800126c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005d56:	6839      	ldr	r1, [r7, #0]
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	68ba      	ldr	r2, [r7, #8]
 8005d5c:	9202      	str	r2, [sp, #8]
 8005d5e:	9301      	str	r3, [sp, #4]
 8005d60:	2300      	movs	r3, #0
 8005d62:	9300      	str	r3, [sp, #0]
 8005d64:	2300      	movs	r3, #0
 8005d66:	460a      	mov	r2, r1
 8005d68:	f649 41ec 	movw	r1, #40172	@ 0x9cec
 8005d6c:	f6c0 0100 	movt	r1, #2048	@ 0x800
 8005d70:	f246 209d 	movw	r0, #25245	@ 0x629d
 8005d74:	f6c0 0000 	movt	r0, #2048	@ 0x800
 8005d78:	f7ff fd54 	bl	8005824 <xTaskCreateStatic>
 8005d7c:	4602      	mov	r2, r0
 8005d7e:	f240 7310 	movw	r3, #1808	@ 0x710
 8005d82:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8005d86:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005d88:	f240 7310 	movw	r3, #1808	@ 0x710
 8005d8c:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d002      	beq.n	8005d9c <vTaskStartScheduler+0x62>
		{
			xReturn = pdPASS;
 8005d96:	2301      	movs	r3, #1
 8005d98:	617b      	str	r3, [r7, #20]
 8005d9a:	e001      	b.n	8005da0 <vTaskStartScheduler+0x66>
		}
		else
		{
			xReturn = pdFAIL;
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005da0:	697b      	ldr	r3, [r7, #20]
 8005da2:	2b01      	cmp	r3, #1
 8005da4:	d12b      	bne.n	8005dfe <vTaskStartScheduler+0xc4>
	__asm volatile
 8005da6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005daa:	f383 8811 	msr	BASEPRI, r3
 8005dae:	f3bf 8f6f 	isb	sy
 8005db2:	f3bf 8f4f 	dsb	sy
 8005db6:	613b      	str	r3, [r7, #16]
}
 8005db8:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005dba:	f240 53ec 	movw	r3, #1516	@ 0x5ec
 8005dbe:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f103 024c 	add.w	r2, r3, #76	@ 0x4c
 8005dc8:	f240 031c 	movw	r3, #28
 8005dcc:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8005dd0:	601a      	str	r2, [r3, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005dd2:	f240 730c 	movw	r3, #1804	@ 0x70c
 8005dd6:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8005dda:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005dde:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005de0:	f240 63f8 	movw	r3, #1784	@ 0x6f8
 8005de4:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8005de8:	2201      	movs	r2, #1
 8005dea:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005dec:	f240 63f0 	movw	r3, #1776	@ 0x6f0
 8005df0:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8005df4:	2200      	movs	r2, #0
 8005df6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005df8:	f000 fc5a 	bl	80066b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005dfc:	e00f      	b.n	8005e1e <vTaskStartScheduler+0xe4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005dfe:	697b      	ldr	r3, [r7, #20]
 8005e00:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005e04:	d10b      	bne.n	8005e1e <vTaskStartScheduler+0xe4>
	__asm volatile
 8005e06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e0a:	f383 8811 	msr	BASEPRI, r3
 8005e0e:	f3bf 8f6f 	isb	sy
 8005e12:	f3bf 8f4f 	dsb	sy
 8005e16:	60fb      	str	r3, [r7, #12]
}
 8005e18:	bf00      	nop
 8005e1a:	bf00      	nop
 8005e1c:	e7fd      	b.n	8005e1a <vTaskStartScheduler+0xe0>
}
 8005e1e:	bf00      	nop
 8005e20:	3718      	adds	r7, #24
 8005e22:	46bd      	mov	sp, r7
 8005e24:	bd80      	pop	{r7, pc}

08005e26 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005e26:	b480      	push	{r7}
 8005e28:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005e2a:	f240 7314 	movw	r3, #1812	@ 0x714
 8005e2e:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	1c5a      	adds	r2, r3, #1
 8005e36:	f240 7314 	movw	r3, #1812	@ 0x714
 8005e3a:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8005e3e:	601a      	str	r2, [r3, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005e40:	bf00      	nop
 8005e42:	46bd      	mov	sp, r7
 8005e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e48:	4770      	bx	lr

08005e4a <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005e4a:	b580      	push	{r7, lr}
 8005e4c:	b084      	sub	sp, #16
 8005e4e:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005e50:	2300      	movs	r3, #0
 8005e52:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005e54:	2300      	movs	r3, #0
 8005e56:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005e58:	f240 7314 	movw	r3, #1812	@ 0x714
 8005e5c:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d10b      	bne.n	8005e7e <xTaskResumeAll+0x34>
	__asm volatile
 8005e66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e6a:	f383 8811 	msr	BASEPRI, r3
 8005e6e:	f3bf 8f6f 	isb	sy
 8005e72:	f3bf 8f4f 	dsb	sy
 8005e76:	603b      	str	r3, [r7, #0]
}
 8005e78:	bf00      	nop
 8005e7a:	bf00      	nop
 8005e7c:	e7fd      	b.n	8005e7a <xTaskResumeAll+0x30>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005e7e:	f000 fce8 	bl	8006852 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005e82:	f240 7314 	movw	r3, #1812	@ 0x714
 8005e86:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	1e5a      	subs	r2, r3, #1
 8005e8e:	f240 7314 	movw	r3, #1812	@ 0x714
 8005e92:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8005e96:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005e98:	f240 7314 	movw	r3, #1812	@ 0x714
 8005e9c:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	f040 8089 	bne.w	8005fba <xTaskResumeAll+0x170>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005ea8:	f240 63ec 	movw	r3, #1772	@ 0x6ec
 8005eac:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	f000 8081 	beq.w	8005fba <xTaskResumeAll+0x170>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005eb8:	e03f      	b.n	8005f3a <xTaskResumeAll+0xf0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005eba:	f240 63ac 	movw	r3, #1708	@ 0x6ac
 8005ebe:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8005ec2:	68db      	ldr	r3, [r3, #12]
 8005ec4:	68db      	ldr	r3, [r3, #12]
 8005ec6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	3318      	adds	r3, #24
 8005ecc:	4618      	mov	r0, r3
 8005ece:	f7ff fc7f 	bl	80057d0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	3304      	adds	r3, #4
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	f7ff fc7a 	bl	80057d0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ee0:	2201      	movs	r2, #1
 8005ee2:	409a      	lsls	r2, r3
 8005ee4:	f240 63f4 	movw	r3, #1780	@ 0x6f4
 8005ee8:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	431a      	orrs	r2, r3
 8005ef0:	f240 63f4 	movw	r3, #1780	@ 0x6f4
 8005ef4:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8005ef8:	601a      	str	r2, [r3, #0]
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005efe:	2214      	movs	r2, #20
 8005f00:	fb03 f202 	mul.w	r2, r3, r2
 8005f04:	f240 53f0 	movw	r3, #1520	@ 0x5f0
 8005f08:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8005f0c:	441a      	add	r2, r3
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	3304      	adds	r3, #4
 8005f12:	4619      	mov	r1, r3
 8005f14:	4610      	mov	r0, r2
 8005f16:	f7ff fbfe 	bl	8005716 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f1e:	f240 53ec 	movw	r3, #1516	@ 0x5ec
 8005f22:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f2a:	429a      	cmp	r2, r3
 8005f2c:	d305      	bcc.n	8005f3a <xTaskResumeAll+0xf0>
					{
						xYieldPending = pdTRUE;
 8005f2e:	f240 7300 	movw	r3, #1792	@ 0x700
 8005f32:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8005f36:	2201      	movs	r2, #1
 8005f38:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005f3a:	f240 63ac 	movw	r3, #1708	@ 0x6ac
 8005f3e:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d1b8      	bne.n	8005eba <xTaskResumeAll+0x70>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d001      	beq.n	8005f52 <xTaskResumeAll+0x108>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005f4e:	f000 fa78 	bl	8006442 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005f52:	f240 63fc 	movw	r3, #1788	@ 0x6fc
 8005f56:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d016      	beq.n	8005f92 <xTaskResumeAll+0x148>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005f64:	f000 f840 	bl	8005fe8 <xTaskIncrementTick>
 8005f68:	4603      	mov	r3, r0
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d005      	beq.n	8005f7a <xTaskResumeAll+0x130>
							{
								xYieldPending = pdTRUE;
 8005f6e:	f240 7300 	movw	r3, #1792	@ 0x700
 8005f72:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8005f76:	2201      	movs	r2, #1
 8005f78:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	3b01      	subs	r3, #1
 8005f7e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d1ee      	bne.n	8005f64 <xTaskResumeAll+0x11a>

						xPendedTicks = 0;
 8005f86:	f240 63fc 	movw	r3, #1788	@ 0x6fc
 8005f8a:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8005f8e:	2200      	movs	r2, #0
 8005f90:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005f92:	f240 7300 	movw	r3, #1792	@ 0x700
 8005f96:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d00c      	beq.n	8005fba <xTaskResumeAll+0x170>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005fa0:	2301      	movs	r3, #1
 8005fa2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005fa4:	f64e 5304 	movw	r3, #60676	@ 0xed04
 8005fa8:	f2ce 0300 	movt	r3, #57344	@ 0xe000
 8005fac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005fb0:	601a      	str	r2, [r3, #0]
 8005fb2:	f3bf 8f4f 	dsb	sy
 8005fb6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005fba:	f000 fc83 	bl	80068c4 <vPortExitCritical>

	return xAlreadyYielded;
 8005fbe:	68bb      	ldr	r3, [r7, #8]
}
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	3710      	adds	r7, #16
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	bd80      	pop	{r7, pc}

08005fc8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005fc8:	b480      	push	{r7}
 8005fca:	b083      	sub	sp, #12
 8005fcc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005fce:	f240 63f0 	movw	r3, #1776	@ 0x6f0
 8005fd2:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005fda:	687b      	ldr	r3, [r7, #4]
}
 8005fdc:	4618      	mov	r0, r3
 8005fde:	370c      	adds	r7, #12
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe6:	4770      	bx	lr

08005fe8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b086      	sub	sp, #24
 8005fec:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005fee:	2300      	movs	r3, #0
 8005ff0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ff2:	f240 7314 	movw	r3, #1812	@ 0x714
 8005ff6:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	f040 80cc 	bne.w	800619a <xTaskIncrementTick+0x1b2>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006002:	f240 63f0 	movw	r3, #1776	@ 0x6f0
 8006006:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	3301      	adds	r3, #1
 800600e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006010:	f240 63f0 	movw	r3, #1776	@ 0x6f0
 8006014:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8006018:	693a      	ldr	r2, [r7, #16]
 800601a:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800601c:	693b      	ldr	r3, [r7, #16]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d136      	bne.n	8006090 <xTaskIncrementTick+0xa8>
		{
			taskSWITCH_DELAYED_LISTS();
 8006022:	f240 63a4 	movw	r3, #1700	@ 0x6a4
 8006026:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d00b      	beq.n	800604a <xTaskIncrementTick+0x62>
	__asm volatile
 8006032:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006036:	f383 8811 	msr	BASEPRI, r3
 800603a:	f3bf 8f6f 	isb	sy
 800603e:	f3bf 8f4f 	dsb	sy
 8006042:	603b      	str	r3, [r7, #0]
}
 8006044:	bf00      	nop
 8006046:	bf00      	nop
 8006048:	e7fd      	b.n	8006046 <xTaskIncrementTick+0x5e>
 800604a:	f240 63a4 	movw	r3, #1700	@ 0x6a4
 800604e:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	60fb      	str	r3, [r7, #12]
 8006056:	f240 63a8 	movw	r3, #1704	@ 0x6a8
 800605a:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 800605e:	681a      	ldr	r2, [r3, #0]
 8006060:	f240 63a4 	movw	r3, #1700	@ 0x6a4
 8006064:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8006068:	601a      	str	r2, [r3, #0]
 800606a:	f240 63a8 	movw	r3, #1704	@ 0x6a8
 800606e:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8006072:	68fa      	ldr	r2, [r7, #12]
 8006074:	601a      	str	r2, [r3, #0]
 8006076:	f240 7304 	movw	r3, #1796	@ 0x704
 800607a:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	1c5a      	adds	r2, r3, #1
 8006082:	f240 7304 	movw	r3, #1796	@ 0x704
 8006086:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 800608a:	601a      	str	r2, [r3, #0]
 800608c:	f000 f9d9 	bl	8006442 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006090:	f240 730c 	movw	r3, #1804	@ 0x70c
 8006094:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	693a      	ldr	r2, [r7, #16]
 800609c:	429a      	cmp	r2, r3
 800609e:	d35f      	bcc.n	8006160 <xTaskIncrementTick+0x178>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80060a0:	f240 63a4 	movw	r3, #1700	@ 0x6a4
 80060a4:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d107      	bne.n	80060c0 <xTaskIncrementTick+0xd8>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80060b0:	f240 730c 	movw	r3, #1804	@ 0x70c
 80060b4:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80060b8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80060bc:	601a      	str	r2, [r3, #0]
					break;
 80060be:	e04f      	b.n	8006160 <xTaskIncrementTick+0x178>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80060c0:	f240 63a4 	movw	r3, #1700	@ 0x6a4
 80060c4:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	68db      	ldr	r3, [r3, #12]
 80060cc:	68db      	ldr	r3, [r3, #12]
 80060ce:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	685b      	ldr	r3, [r3, #4]
 80060d4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80060d6:	693a      	ldr	r2, [r7, #16]
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	429a      	cmp	r2, r3
 80060dc:	d206      	bcs.n	80060ec <xTaskIncrementTick+0x104>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80060de:	f240 730c 	movw	r3, #1804	@ 0x70c
 80060e2:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80060e6:	687a      	ldr	r2, [r7, #4]
 80060e8:	601a      	str	r2, [r3, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80060ea:	e039      	b.n	8006160 <xTaskIncrementTick+0x178>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	3304      	adds	r3, #4
 80060f0:	4618      	mov	r0, r3
 80060f2:	f7ff fb6d 	bl	80057d0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80060f6:	68bb      	ldr	r3, [r7, #8]
 80060f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d004      	beq.n	8006108 <xTaskIncrementTick+0x120>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	3318      	adds	r3, #24
 8006102:	4618      	mov	r0, r3
 8006104:	f7ff fb64 	bl	80057d0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800610c:	2201      	movs	r2, #1
 800610e:	409a      	lsls	r2, r3
 8006110:	f240 63f4 	movw	r3, #1780	@ 0x6f4
 8006114:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	431a      	orrs	r2, r3
 800611c:	f240 63f4 	movw	r3, #1780	@ 0x6f4
 8006120:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8006124:	601a      	str	r2, [r3, #0]
 8006126:	68bb      	ldr	r3, [r7, #8]
 8006128:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800612a:	2214      	movs	r2, #20
 800612c:	fb03 f202 	mul.w	r2, r3, r2
 8006130:	f240 53f0 	movw	r3, #1520	@ 0x5f0
 8006134:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8006138:	441a      	add	r2, r3
 800613a:	68bb      	ldr	r3, [r7, #8]
 800613c:	3304      	adds	r3, #4
 800613e:	4619      	mov	r1, r3
 8006140:	4610      	mov	r0, r2
 8006142:	f7ff fae8 	bl	8005716 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006146:	68bb      	ldr	r3, [r7, #8]
 8006148:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800614a:	f240 53ec 	movw	r3, #1516	@ 0x5ec
 800614e:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006156:	429a      	cmp	r2, r3
 8006158:	d3a2      	bcc.n	80060a0 <xTaskIncrementTick+0xb8>
						{
							xSwitchRequired = pdTRUE;
 800615a:	2301      	movs	r3, #1
 800615c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800615e:	e79f      	b.n	80060a0 <xTaskIncrementTick+0xb8>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006160:	f240 53ec 	movw	r3, #1516	@ 0x5ec
 8006164:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800616c:	f240 53f0 	movw	r3, #1520	@ 0x5f0
 8006170:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8006174:	2114      	movs	r1, #20
 8006176:	fb01 f202 	mul.w	r2, r1, r2
 800617a:	4413      	add	r3, r2
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	2b01      	cmp	r3, #1
 8006180:	d901      	bls.n	8006186 <xTaskIncrementTick+0x19e>
			{
				xSwitchRequired = pdTRUE;
 8006182:	2301      	movs	r3, #1
 8006184:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006186:	f240 7300 	movw	r3, #1792	@ 0x700
 800618a:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d00d      	beq.n	80061b0 <xTaskIncrementTick+0x1c8>
			{
				xSwitchRequired = pdTRUE;
 8006194:	2301      	movs	r3, #1
 8006196:	617b      	str	r3, [r7, #20]
 8006198:	e00a      	b.n	80061b0 <xTaskIncrementTick+0x1c8>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800619a:	f240 63fc 	movw	r3, #1788	@ 0x6fc
 800619e:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	1c5a      	adds	r2, r3, #1
 80061a6:	f240 63fc 	movw	r3, #1788	@ 0x6fc
 80061aa:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80061ae:	601a      	str	r2, [r3, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80061b0:	697b      	ldr	r3, [r7, #20]
}
 80061b2:	4618      	mov	r0, r3
 80061b4:	3718      	adds	r7, #24
 80061b6:	46bd      	mov	sp, r7
 80061b8:	bd80      	pop	{r7, pc}

080061ba <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80061ba:	b480      	push	{r7}
 80061bc:	b087      	sub	sp, #28
 80061be:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80061c0:	f240 7314 	movw	r3, #1812	@ 0x714
 80061c4:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d006      	beq.n	80061dc <vTaskSwitchContext+0x22>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80061ce:	f240 7300 	movw	r3, #1792	@ 0x700
 80061d2:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80061d6:	2201      	movs	r2, #1
 80061d8:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80061da:	e059      	b.n	8006290 <vTaskSwitchContext+0xd6>
		xYieldPending = pdFALSE;
 80061dc:	f240 7300 	movw	r3, #1792	@ 0x700
 80061e0:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80061e4:	2200      	movs	r2, #0
 80061e6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80061e8:	f240 63f4 	movw	r3, #1780	@ 0x6f4
 80061ec:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	fab3 f383 	clz	r3, r3
 80061fa:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80061fc:	7afb      	ldrb	r3, [r7, #11]
 80061fe:	f1c3 031f 	rsb	r3, r3, #31
 8006202:	617b      	str	r3, [r7, #20]
 8006204:	f240 53f0 	movw	r3, #1520	@ 0x5f0
 8006208:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 800620c:	697a      	ldr	r2, [r7, #20]
 800620e:	2114      	movs	r1, #20
 8006210:	fb01 f202 	mul.w	r2, r1, r2
 8006214:	4413      	add	r3, r2
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d10b      	bne.n	8006234 <vTaskSwitchContext+0x7a>
	__asm volatile
 800621c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006220:	f383 8811 	msr	BASEPRI, r3
 8006224:	f3bf 8f6f 	isb	sy
 8006228:	f3bf 8f4f 	dsb	sy
 800622c:	607b      	str	r3, [r7, #4]
}
 800622e:	bf00      	nop
 8006230:	bf00      	nop
 8006232:	e7fd      	b.n	8006230 <vTaskSwitchContext+0x76>
 8006234:	697b      	ldr	r3, [r7, #20]
 8006236:	2214      	movs	r2, #20
 8006238:	fb03 f202 	mul.w	r2, r3, r2
 800623c:	f240 53f0 	movw	r3, #1520	@ 0x5f0
 8006240:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8006244:	4413      	add	r3, r2
 8006246:	613b      	str	r3, [r7, #16]
 8006248:	693b      	ldr	r3, [r7, #16]
 800624a:	685b      	ldr	r3, [r3, #4]
 800624c:	685a      	ldr	r2, [r3, #4]
 800624e:	693b      	ldr	r3, [r7, #16]
 8006250:	605a      	str	r2, [r3, #4]
 8006252:	693b      	ldr	r3, [r7, #16]
 8006254:	685a      	ldr	r2, [r3, #4]
 8006256:	693b      	ldr	r3, [r7, #16]
 8006258:	3308      	adds	r3, #8
 800625a:	429a      	cmp	r2, r3
 800625c:	d104      	bne.n	8006268 <vTaskSwitchContext+0xae>
 800625e:	693b      	ldr	r3, [r7, #16]
 8006260:	685b      	ldr	r3, [r3, #4]
 8006262:	685a      	ldr	r2, [r3, #4]
 8006264:	693b      	ldr	r3, [r7, #16]
 8006266:	605a      	str	r2, [r3, #4]
 8006268:	693b      	ldr	r3, [r7, #16]
 800626a:	685b      	ldr	r3, [r3, #4]
 800626c:	68da      	ldr	r2, [r3, #12]
 800626e:	f240 53ec 	movw	r3, #1516	@ 0x5ec
 8006272:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8006276:	601a      	str	r2, [r3, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006278:	f240 53ec 	movw	r3, #1516	@ 0x5ec
 800627c:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f103 024c 	add.w	r2, r3, #76	@ 0x4c
 8006286:	f240 031c 	movw	r3, #28
 800628a:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 800628e:	601a      	str	r2, [r3, #0]
}
 8006290:	bf00      	nop
 8006292:	371c      	adds	r7, #28
 8006294:	46bd      	mov	sp, r7
 8006296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629a:	4770      	bx	lr

0800629c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800629c:	b580      	push	{r7, lr}
 800629e:	b082      	sub	sp, #8
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80062a4:	f000 f85f 	bl	8006366 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80062a8:	f240 53f0 	movw	r3, #1520	@ 0x5f0
 80062ac:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	2b01      	cmp	r3, #1
 80062b4:	d9f6      	bls.n	80062a4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80062b6:	f64e 5304 	movw	r3, #60676	@ 0xed04
 80062ba:	f2ce 0300 	movt	r3, #57344	@ 0xe000
 80062be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80062c2:	601a      	str	r2, [r3, #0]
 80062c4:	f3bf 8f4f 	dsb	sy
 80062c8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80062cc:	e7ea      	b.n	80062a4 <prvIdleTask+0x8>

080062ce <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80062ce:	b580      	push	{r7, lr}
 80062d0:	b082      	sub	sp, #8
 80062d2:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80062d4:	2300      	movs	r3, #0
 80062d6:	607b      	str	r3, [r7, #4]
 80062d8:	e00e      	b.n	80062f8 <prvInitialiseTaskLists+0x2a>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2214      	movs	r2, #20
 80062de:	fb03 f202 	mul.w	r2, r3, r2
 80062e2:	f240 53f0 	movw	r3, #1520	@ 0x5f0
 80062e6:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80062ea:	4413      	add	r3, r2
 80062ec:	4618      	mov	r0, r3
 80062ee:	f7ff f9e5 	bl	80056bc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	3301      	adds	r3, #1
 80062f6:	607b      	str	r3, [r7, #4]
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2b06      	cmp	r3, #6
 80062fc:	d9ed      	bls.n	80062da <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80062fe:	f240 607c 	movw	r0, #1660	@ 0x67c
 8006302:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8006306:	f7ff f9d9 	bl	80056bc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800630a:	f240 6090 	movw	r0, #1680	@ 0x690
 800630e:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8006312:	f7ff f9d3 	bl	80056bc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006316:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 800631a:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 800631e:	f7ff f9cd 	bl	80056bc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006322:	f240 60c0 	movw	r0, #1728	@ 0x6c0
 8006326:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 800632a:	f7ff f9c7 	bl	80056bc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800632e:	f240 60d8 	movw	r0, #1752	@ 0x6d8
 8006332:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8006336:	f7ff f9c1 	bl	80056bc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800633a:	f240 63a4 	movw	r3, #1700	@ 0x6a4
 800633e:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8006342:	f240 627c 	movw	r2, #1660	@ 0x67c
 8006346:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 800634a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800634c:	f240 63a8 	movw	r3, #1704	@ 0x6a8
 8006350:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8006354:	f240 6290 	movw	r2, #1680	@ 0x690
 8006358:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 800635c:	601a      	str	r2, [r3, #0]
}
 800635e:	bf00      	nop
 8006360:	3708      	adds	r7, #8
 8006362:	46bd      	mov	sp, r7
 8006364:	bd80      	pop	{r7, pc}

08006366 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006366:	b580      	push	{r7, lr}
 8006368:	b082      	sub	sp, #8
 800636a:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800636c:	e028      	b.n	80063c0 <prvCheckTasksWaitingTermination+0x5a>
		{
			taskENTER_CRITICAL();
 800636e:	f000 fa70 	bl	8006852 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006372:	f240 63c0 	movw	r3, #1728	@ 0x6c0
 8006376:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 800637a:	68db      	ldr	r3, [r3, #12]
 800637c:	68db      	ldr	r3, [r3, #12]
 800637e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	3304      	adds	r3, #4
 8006384:	4618      	mov	r0, r3
 8006386:	f7ff fa23 	bl	80057d0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800638a:	f240 63ec 	movw	r3, #1772	@ 0x6ec
 800638e:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	1e5a      	subs	r2, r3, #1
 8006396:	f240 63ec 	movw	r3, #1772	@ 0x6ec
 800639a:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 800639e:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 80063a0:	f240 63d4 	movw	r3, #1748	@ 0x6d4
 80063a4:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	1e5a      	subs	r2, r3, #1
 80063ac:	f240 63d4 	movw	r3, #1748	@ 0x6d4
 80063b0:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80063b4:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 80063b6:	f000 fa85 	bl	80068c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80063ba:	6878      	ldr	r0, [r7, #4]
 80063bc:	f000 f80c 	bl	80063d8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80063c0:	f240 63d4 	movw	r3, #1748	@ 0x6d4
 80063c4:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d1cf      	bne.n	800636e <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80063ce:	bf00      	nop
 80063d0:	bf00      	nop
 80063d2:	3708      	adds	r7, #8
 80063d4:	46bd      	mov	sp, r7
 80063d6:	bd80      	pop	{r7, pc}

080063d8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b084      	sub	sp, #16
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	334c      	adds	r3, #76	@ 0x4c
 80063e4:	4618      	mov	r0, r3
 80063e6:	f001 fb01 	bl	80079ec <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d108      	bne.n	8006406 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063f8:	4618      	mov	r0, r3
 80063fa:	f000 fc16 	bl	8006c2a <vPortFree>
				vPortFree( pxTCB );
 80063fe:	6878      	ldr	r0, [r7, #4]
 8006400:	f000 fc13 	bl	8006c2a <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006404:	e019      	b.n	800643a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800640c:	2b01      	cmp	r3, #1
 800640e:	d103      	bne.n	8006418 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006410:	6878      	ldr	r0, [r7, #4]
 8006412:	f000 fc0a 	bl	8006c2a <vPortFree>
	}
 8006416:	e010      	b.n	800643a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800641e:	2b02      	cmp	r3, #2
 8006420:	d00b      	beq.n	800643a <prvDeleteTCB+0x62>
	__asm volatile
 8006422:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006426:	f383 8811 	msr	BASEPRI, r3
 800642a:	f3bf 8f6f 	isb	sy
 800642e:	f3bf 8f4f 	dsb	sy
 8006432:	60fb      	str	r3, [r7, #12]
}
 8006434:	bf00      	nop
 8006436:	bf00      	nop
 8006438:	e7fd      	b.n	8006436 <prvDeleteTCB+0x5e>
	}
 800643a:	bf00      	nop
 800643c:	3710      	adds	r7, #16
 800643e:	46bd      	mov	sp, r7
 8006440:	bd80      	pop	{r7, pc}

08006442 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006442:	b480      	push	{r7}
 8006444:	b083      	sub	sp, #12
 8006446:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006448:	f240 63a4 	movw	r3, #1700	@ 0x6a4
 800644c:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d107      	bne.n	8006468 <prvResetNextTaskUnblockTime+0x26>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006458:	f240 730c 	movw	r3, #1804	@ 0x70c
 800645c:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8006460:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006464:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006466:	e00e      	b.n	8006486 <prvResetNextTaskUnblockTime+0x44>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006468:	f240 63a4 	movw	r3, #1700	@ 0x6a4
 800646c:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	68db      	ldr	r3, [r3, #12]
 8006474:	68db      	ldr	r3, [r3, #12]
 8006476:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	685a      	ldr	r2, [r3, #4]
 800647c:	f240 730c 	movw	r3, #1804	@ 0x70c
 8006480:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8006484:	601a      	str	r2, [r3, #0]
}
 8006486:	bf00      	nop
 8006488:	370c      	adds	r7, #12
 800648a:	46bd      	mov	sp, r7
 800648c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006490:	4770      	bx	lr

08006492 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006492:	b580      	push	{r7, lr}
 8006494:	b084      	sub	sp, #16
 8006496:	af00      	add	r7, sp, #0
 8006498:	6078      	str	r0, [r7, #4]
 800649a:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800649c:	f240 63f0 	movw	r3, #1776	@ 0x6f0
 80064a0:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80064a8:	f240 53ec 	movw	r3, #1516	@ 0x5ec
 80064ac:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	3304      	adds	r3, #4
 80064b4:	4618      	mov	r0, r3
 80064b6:	f7ff f98b 	bl	80057d0 <uxListRemove>
 80064ba:	4603      	mov	r3, r0
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d114      	bne.n	80064ea <prvAddCurrentTaskToDelayedList+0x58>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80064c0:	f240 53ec 	movw	r3, #1516	@ 0x5ec
 80064c4:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064cc:	2201      	movs	r2, #1
 80064ce:	fa02 f303 	lsl.w	r3, r2, r3
 80064d2:	43da      	mvns	r2, r3
 80064d4:	f240 63f4 	movw	r3, #1780	@ 0x6f4
 80064d8:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	401a      	ands	r2, r3
 80064e0:	f240 63f4 	movw	r3, #1780	@ 0x6f4
 80064e4:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80064e8:	601a      	str	r2, [r3, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80064f0:	d110      	bne.n	8006514 <prvAddCurrentTaskToDelayedList+0x82>
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d00d      	beq.n	8006514 <prvAddCurrentTaskToDelayedList+0x82>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80064f8:	f240 53ec 	movw	r3, #1516	@ 0x5ec
 80064fc:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	3304      	adds	r3, #4
 8006504:	4619      	mov	r1, r3
 8006506:	f240 60d8 	movw	r0, #1752	@ 0x6d8
 800650a:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 800650e:	f7ff f902 	bl	8005716 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006512:	e03b      	b.n	800658c <prvAddCurrentTaskToDelayedList+0xfa>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006514:	68fa      	ldr	r2, [r7, #12]
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	4413      	add	r3, r2
 800651a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800651c:	f240 53ec 	movw	r3, #1516	@ 0x5ec
 8006520:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	68ba      	ldr	r2, [r7, #8]
 8006528:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800652a:	68ba      	ldr	r2, [r7, #8]
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	429a      	cmp	r2, r3
 8006530:	d20f      	bcs.n	8006552 <prvAddCurrentTaskToDelayedList+0xc0>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006532:	f240 63a8 	movw	r3, #1704	@ 0x6a8
 8006536:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 800653a:	681a      	ldr	r2, [r3, #0]
 800653c:	f240 53ec 	movw	r3, #1516	@ 0x5ec
 8006540:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	3304      	adds	r3, #4
 8006548:	4619      	mov	r1, r3
 800654a:	4610      	mov	r0, r2
 800654c:	f7ff f907 	bl	800575e <vListInsert>
}
 8006550:	e01c      	b.n	800658c <prvAddCurrentTaskToDelayedList+0xfa>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006552:	f240 63a4 	movw	r3, #1700	@ 0x6a4
 8006556:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 800655a:	681a      	ldr	r2, [r3, #0]
 800655c:	f240 53ec 	movw	r3, #1516	@ 0x5ec
 8006560:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	3304      	adds	r3, #4
 8006568:	4619      	mov	r1, r3
 800656a:	4610      	mov	r0, r2
 800656c:	f7ff f8f7 	bl	800575e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006570:	f240 730c 	movw	r3, #1804	@ 0x70c
 8006574:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	68ba      	ldr	r2, [r7, #8]
 800657c:	429a      	cmp	r2, r3
 800657e:	d205      	bcs.n	800658c <prvAddCurrentTaskToDelayedList+0xfa>
					xNextTaskUnblockTime = xTimeToWake;
 8006580:	f240 730c 	movw	r3, #1804	@ 0x70c
 8006584:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8006588:	68ba      	ldr	r2, [r7, #8]
 800658a:	601a      	str	r2, [r3, #0]
}
 800658c:	bf00      	nop
 800658e:	3710      	adds	r7, #16
 8006590:	46bd      	mov	sp, r7
 8006592:	bd80      	pop	{r7, pc}

08006594 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006594:	b480      	push	{r7}
 8006596:	b085      	sub	sp, #20
 8006598:	af00      	add	r7, sp, #0
 800659a:	60f8      	str	r0, [r7, #12]
 800659c:	60b9      	str	r1, [r7, #8]
 800659e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	3b04      	subs	r3, #4
 80065a4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80065ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	3b04      	subs	r3, #4
 80065b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	f023 0201 	bic.w	r2, r3, #1
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	3b04      	subs	r3, #4
 80065c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80065c4:	f246 53ff 	movw	r3, #26111	@ 0x65ff
 80065c8:	f6c0 0300 	movt	r3, #2048	@ 0x800
 80065cc:	68fa      	ldr	r2, [r7, #12]
 80065ce:	6013      	str	r3, [r2, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	3b14      	subs	r3, #20
 80065d4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80065d6:	687a      	ldr	r2, [r7, #4]
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	3b04      	subs	r3, #4
 80065e0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	f06f 0202 	mvn.w	r2, #2
 80065e8:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	3b20      	subs	r3, #32
 80065ee:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80065f0:	68fb      	ldr	r3, [r7, #12]
}
 80065f2:	4618      	mov	r0, r3
 80065f4:	3714      	adds	r7, #20
 80065f6:	46bd      	mov	sp, r7
 80065f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fc:	4770      	bx	lr

080065fe <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80065fe:	b480      	push	{r7}
 8006600:	b085      	sub	sp, #20
 8006602:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006604:	2300      	movs	r3, #0
 8006606:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006608:	f240 030c 	movw	r3, #12
 800660c:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006616:	d00b      	beq.n	8006630 <prvTaskExitError+0x32>
	__asm volatile
 8006618:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800661c:	f383 8811 	msr	BASEPRI, r3
 8006620:	f3bf 8f6f 	isb	sy
 8006624:	f3bf 8f4f 	dsb	sy
 8006628:	60fb      	str	r3, [r7, #12]
}
 800662a:	bf00      	nop
 800662c:	bf00      	nop
 800662e:	e7fd      	b.n	800662c <prvTaskExitError+0x2e>
	__asm volatile
 8006630:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006634:	f383 8811 	msr	BASEPRI, r3
 8006638:	f3bf 8f6f 	isb	sy
 800663c:	f3bf 8f4f 	dsb	sy
 8006640:	60bb      	str	r3, [r7, #8]
}
 8006642:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006644:	bf00      	nop
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d0fc      	beq.n	8006646 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800664c:	bf00      	nop
 800664e:	bf00      	nop
 8006650:	3714      	adds	r7, #20
 8006652:	46bd      	mov	sp, r7
 8006654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006658:	4770      	bx	lr
 800665a:	0000      	movs	r0, r0
 800665c:	0000      	movs	r0, r0
	...

08006660 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006660:	4b07      	ldr	r3, [pc, #28]	@ (8006680 <pxCurrentTCBConst2>)
 8006662:	6819      	ldr	r1, [r3, #0]
 8006664:	6808      	ldr	r0, [r1, #0]
 8006666:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800666a:	f380 8809 	msr	PSP, r0
 800666e:	f3bf 8f6f 	isb	sy
 8006672:	f04f 0000 	mov.w	r0, #0
 8006676:	f380 8811 	msr	BASEPRI, r0
 800667a:	4770      	bx	lr
 800667c:	f3af 8000 	nop.w

08006680 <pxCurrentTCBConst2>:
 8006680:	200005ec 	.word	0x200005ec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006684:	bf00      	nop
 8006686:	bf00      	nop

08006688 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006688:	4808      	ldr	r0, [pc, #32]	@ (80066ac <prvPortStartFirstTask+0x24>)
 800668a:	6800      	ldr	r0, [r0, #0]
 800668c:	6800      	ldr	r0, [r0, #0]
 800668e:	f380 8808 	msr	MSP, r0
 8006692:	f04f 0000 	mov.w	r0, #0
 8006696:	f380 8814 	msr	CONTROL, r0
 800669a:	b662      	cpsie	i
 800669c:	b661      	cpsie	f
 800669e:	f3bf 8f4f 	dsb	sy
 80066a2:	f3bf 8f6f 	isb	sy
 80066a6:	df00      	svc	0
 80066a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80066aa:	bf00      	nop
 80066ac:	e000ed08 	.word	0xe000ed08

080066b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b086      	sub	sp, #24
 80066b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80066b6:	f44f 436d 	mov.w	r3, #60672	@ 0xed00
 80066ba:	f2ce 0300 	movt	r3, #57344	@ 0xe000
 80066be:	681a      	ldr	r2, [r3, #0]
 80066c0:	f24c 2371 	movw	r3, #49777	@ 0xc271
 80066c4:	f2c4 130f 	movt	r3, #16655	@ 0x410f
 80066c8:	429a      	cmp	r2, r3
 80066ca:	d10b      	bne.n	80066e4 <xPortStartScheduler+0x34>
	__asm volatile
 80066cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066d0:	f383 8811 	msr	BASEPRI, r3
 80066d4:	f3bf 8f6f 	isb	sy
 80066d8:	f3bf 8f4f 	dsb	sy
 80066dc:	613b      	str	r3, [r7, #16]
}
 80066de:	bf00      	nop
 80066e0:	bf00      	nop
 80066e2:	e7fd      	b.n	80066e0 <xPortStartScheduler+0x30>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80066e4:	f44f 436d 	mov.w	r3, #60672	@ 0xed00
 80066e8:	f2ce 0300 	movt	r3, #57344	@ 0xe000
 80066ec:	681a      	ldr	r2, [r3, #0]
 80066ee:	f24c 2370 	movw	r3, #49776	@ 0xc270
 80066f2:	f2c4 130f 	movt	r3, #16655	@ 0x410f
 80066f6:	429a      	cmp	r2, r3
 80066f8:	d10b      	bne.n	8006712 <xPortStartScheduler+0x62>
	__asm volatile
 80066fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066fe:	f383 8811 	msr	BASEPRI, r3
 8006702:	f3bf 8f6f 	isb	sy
 8006706:	f3bf 8f4f 	dsb	sy
 800670a:	60fb      	str	r3, [r7, #12]
}
 800670c:	bf00      	nop
 800670e:	bf00      	nop
 8006710:	e7fd      	b.n	800670e <xPortStartScheduler+0x5e>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006712:	f44f 4364 	mov.w	r3, #58368	@ 0xe400
 8006716:	f2ce 0300 	movt	r3, #57344	@ 0xe000
 800671a:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800671c:	697b      	ldr	r3, [r7, #20]
 800671e:	781b      	ldrb	r3, [r3, #0]
 8006720:	b2db      	uxtb	r3, r3
 8006722:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006724:	697b      	ldr	r3, [r7, #20]
 8006726:	22ff      	movs	r2, #255	@ 0xff
 8006728:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800672a:	697b      	ldr	r3, [r7, #20]
 800672c:	781b      	ldrb	r3, [r3, #0]
 800672e:	b2db      	uxtb	r3, r3
 8006730:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006732:	78fb      	ldrb	r3, [r7, #3]
 8006734:	b2db      	uxtb	r3, r3
 8006736:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800673a:	b2da      	uxtb	r2, r3
 800673c:	f240 7318 	movw	r3, #1816	@ 0x718
 8006740:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8006744:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006746:	f240 731c 	movw	r3, #1820	@ 0x71c
 800674a:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 800674e:	2207      	movs	r2, #7
 8006750:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006752:	e00f      	b.n	8006774 <xPortStartScheduler+0xc4>
		{
			ulMaxPRIGROUPValue--;
 8006754:	f240 731c 	movw	r3, #1820	@ 0x71c
 8006758:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	1e5a      	subs	r2, r3, #1
 8006760:	f240 731c 	movw	r3, #1820	@ 0x71c
 8006764:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8006768:	601a      	str	r2, [r3, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800676a:	78fb      	ldrb	r3, [r7, #3]
 800676c:	b2db      	uxtb	r3, r3
 800676e:	005b      	lsls	r3, r3, #1
 8006770:	b2db      	uxtb	r3, r3
 8006772:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006774:	78fb      	ldrb	r3, [r7, #3]
 8006776:	b2db      	uxtb	r3, r3
 8006778:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800677c:	2b80      	cmp	r3, #128	@ 0x80
 800677e:	d0e9      	beq.n	8006754 <xPortStartScheduler+0xa4>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006780:	f240 731c 	movw	r3, #1820	@ 0x71c
 8006784:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f1c3 0307 	rsb	r3, r3, #7
 800678e:	2b04      	cmp	r3, #4
 8006790:	d00b      	beq.n	80067aa <xPortStartScheduler+0xfa>
	__asm volatile
 8006792:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006796:	f383 8811 	msr	BASEPRI, r3
 800679a:	f3bf 8f6f 	isb	sy
 800679e:	f3bf 8f4f 	dsb	sy
 80067a2:	60bb      	str	r3, [r7, #8]
}
 80067a4:	bf00      	nop
 80067a6:	bf00      	nop
 80067a8:	e7fd      	b.n	80067a6 <xPortStartScheduler+0xf6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80067aa:	f240 731c 	movw	r3, #1820	@ 0x71c
 80067ae:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	021a      	lsls	r2, r3, #8
 80067b6:	f240 731c 	movw	r3, #1820	@ 0x71c
 80067ba:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80067be:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80067c0:	f240 731c 	movw	r3, #1820	@ 0x71c
 80067c4:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80067ce:	f240 731c 	movw	r3, #1820	@ 0x71c
 80067d2:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80067d6:	601a      	str	r2, [r3, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	b2da      	uxtb	r2, r3
 80067dc:	697b      	ldr	r3, [r7, #20]
 80067de:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80067e0:	f64e 5320 	movw	r3, #60704	@ 0xed20
 80067e4:	f2ce 0300 	movt	r3, #57344	@ 0xe000
 80067e8:	681a      	ldr	r2, [r3, #0]
 80067ea:	f64e 5320 	movw	r3, #60704	@ 0xed20
 80067ee:	f2ce 0300 	movt	r3, #57344	@ 0xe000
 80067f2:	f442 0270 	orr.w	r2, r2, #15728640	@ 0xf00000
 80067f6:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80067f8:	f64e 5320 	movw	r3, #60704	@ 0xed20
 80067fc:	f2ce 0300 	movt	r3, #57344	@ 0xe000
 8006800:	681a      	ldr	r2, [r3, #0]
 8006802:	f64e 5320 	movw	r3, #60704	@ 0xed20
 8006806:	f2ce 0300 	movt	r3, #57344	@ 0xe000
 800680a:	f042 4270 	orr.w	r2, r2, #4026531840	@ 0xf0000000
 800680e:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006810:	f000 f8e5 	bl	80069de <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006814:	f240 030c 	movw	r3, #12
 8006818:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 800681c:	2200      	movs	r2, #0
 800681e:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006820:	f000 f908 	bl	8006a34 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006824:	f64e 7334 	movw	r3, #61236	@ 0xef34
 8006828:	f2ce 0300 	movt	r3, #57344	@ 0xe000
 800682c:	681a      	ldr	r2, [r3, #0]
 800682e:	f64e 7334 	movw	r3, #61236	@ 0xef34
 8006832:	f2ce 0300 	movt	r3, #57344	@ 0xe000
 8006836:	f042 4240 	orr.w	r2, r2, #3221225472	@ 0xc0000000
 800683a:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800683c:	f7ff ff24 	bl	8006688 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006840:	f7ff fcbb 	bl	80061ba <vTaskSwitchContext>
	prvTaskExitError();
 8006844:	f7ff fedb 	bl	80065fe <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006848:	2300      	movs	r3, #0
}
 800684a:	4618      	mov	r0, r3
 800684c:	3718      	adds	r7, #24
 800684e:	46bd      	mov	sp, r7
 8006850:	bd80      	pop	{r7, pc}

08006852 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006852:	b480      	push	{r7}
 8006854:	b083      	sub	sp, #12
 8006856:	af00      	add	r7, sp, #0
	__asm volatile
 8006858:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800685c:	f383 8811 	msr	BASEPRI, r3
 8006860:	f3bf 8f6f 	isb	sy
 8006864:	f3bf 8f4f 	dsb	sy
 8006868:	607b      	str	r3, [r7, #4]
}
 800686a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800686c:	f240 030c 	movw	r3, #12
 8006870:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	1c5a      	adds	r2, r3, #1
 8006878:	f240 030c 	movw	r3, #12
 800687c:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8006880:	601a      	str	r2, [r3, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006882:	f240 030c 	movw	r3, #12
 8006886:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	2b01      	cmp	r3, #1
 800688e:	d113      	bne.n	80068b8 <vPortEnterCritical+0x66>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006890:	f64e 5304 	movw	r3, #60676	@ 0xed04
 8006894:	f2ce 0300 	movt	r3, #57344	@ 0xe000
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	b2db      	uxtb	r3, r3
 800689c:	2b00      	cmp	r3, #0
 800689e:	d00b      	beq.n	80068b8 <vPortEnterCritical+0x66>
	__asm volatile
 80068a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068a4:	f383 8811 	msr	BASEPRI, r3
 80068a8:	f3bf 8f6f 	isb	sy
 80068ac:	f3bf 8f4f 	dsb	sy
 80068b0:	603b      	str	r3, [r7, #0]
}
 80068b2:	bf00      	nop
 80068b4:	bf00      	nop
 80068b6:	e7fd      	b.n	80068b4 <vPortEnterCritical+0x62>
	}
}
 80068b8:	bf00      	nop
 80068ba:	370c      	adds	r7, #12
 80068bc:	46bd      	mov	sp, r7
 80068be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c2:	4770      	bx	lr

080068c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80068c4:	b480      	push	{r7}
 80068c6:	b083      	sub	sp, #12
 80068c8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80068ca:	f240 030c 	movw	r3, #12
 80068ce:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d10b      	bne.n	80068f0 <vPortExitCritical+0x2c>
	__asm volatile
 80068d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068dc:	f383 8811 	msr	BASEPRI, r3
 80068e0:	f3bf 8f6f 	isb	sy
 80068e4:	f3bf 8f4f 	dsb	sy
 80068e8:	607b      	str	r3, [r7, #4]
}
 80068ea:	bf00      	nop
 80068ec:	bf00      	nop
 80068ee:	e7fd      	b.n	80068ec <vPortExitCritical+0x28>
	uxCriticalNesting--;
 80068f0:	f240 030c 	movw	r3, #12
 80068f4:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	1e5a      	subs	r2, r3, #1
 80068fc:	f240 030c 	movw	r3, #12
 8006900:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8006904:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
 8006906:	f240 030c 	movw	r3, #12
 800690a:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d105      	bne.n	8006920 <vPortExitCritical+0x5c>
 8006914:	2300      	movs	r3, #0
 8006916:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800691e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006920:	bf00      	nop
 8006922:	370c      	adds	r7, #12
 8006924:	46bd      	mov	sp, r7
 8006926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692a:	4770      	bx	lr
 800692c:	0000      	movs	r0, r0
	...

08006930 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006930:	f3ef 8009 	mrs	r0, PSP
 8006934:	f3bf 8f6f 	isb	sy
 8006938:	4b15      	ldr	r3, [pc, #84]	@ (8006990 <pxCurrentTCBConst>)
 800693a:	681a      	ldr	r2, [r3, #0]
 800693c:	f01e 0f10 	tst.w	lr, #16
 8006940:	bf08      	it	eq
 8006942:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006946:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800694a:	6010      	str	r0, [r2, #0]
 800694c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006950:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006954:	f380 8811 	msr	BASEPRI, r0
 8006958:	f3bf 8f4f 	dsb	sy
 800695c:	f3bf 8f6f 	isb	sy
 8006960:	f7ff fc2b 	bl	80061ba <vTaskSwitchContext>
 8006964:	f04f 0000 	mov.w	r0, #0
 8006968:	f380 8811 	msr	BASEPRI, r0
 800696c:	bc09      	pop	{r0, r3}
 800696e:	6819      	ldr	r1, [r3, #0]
 8006970:	6808      	ldr	r0, [r1, #0]
 8006972:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006976:	f01e 0f10 	tst.w	lr, #16
 800697a:	bf08      	it	eq
 800697c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006980:	f380 8809 	msr	PSP, r0
 8006984:	f3bf 8f6f 	isb	sy
 8006988:	4770      	bx	lr
 800698a:	bf00      	nop
 800698c:	f3af 8000 	nop.w

08006990 <pxCurrentTCBConst>:
 8006990:	200005ec 	.word	0x200005ec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006994:	bf00      	nop
 8006996:	bf00      	nop

08006998 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b082      	sub	sp, #8
 800699c:	af00      	add	r7, sp, #0
	__asm volatile
 800699e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069a2:	f383 8811 	msr	BASEPRI, r3
 80069a6:	f3bf 8f6f 	isb	sy
 80069aa:	f3bf 8f4f 	dsb	sy
 80069ae:	607b      	str	r3, [r7, #4]
}
 80069b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80069b2:	f7ff fb19 	bl	8005fe8 <xTaskIncrementTick>
 80069b6:	4603      	mov	r3, r0
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d006      	beq.n	80069ca <SysTick_Handler+0x32>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80069bc:	f64e 5304 	movw	r3, #60676	@ 0xed04
 80069c0:	f2ce 0300 	movt	r3, #57344	@ 0xe000
 80069c4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80069c8:	601a      	str	r2, [r3, #0]
 80069ca:	2300      	movs	r3, #0
 80069cc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	f383 8811 	msr	BASEPRI, r3
}
 80069d4:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80069d6:	bf00      	nop
 80069d8:	3708      	adds	r7, #8
 80069da:	46bd      	mov	sp, r7
 80069dc:	bd80      	pop	{r7, pc}

080069de <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80069de:	b480      	push	{r7}
 80069e0:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80069e2:	f24e 0310 	movw	r3, #57360	@ 0xe010
 80069e6:	f2ce 0300 	movt	r3, #57344	@ 0xe000
 80069ea:	2200      	movs	r2, #0
 80069ec:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80069ee:	f24e 0318 	movw	r3, #57368	@ 0xe018
 80069f2:	f2ce 0300 	movt	r3, #57344	@ 0xe000
 80069f6:	2200      	movs	r2, #0
 80069f8:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80069fa:	f240 0300 	movw	r3, #0
 80069fe:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8006a02:	681a      	ldr	r2, [r3, #0]
 8006a04:	f644 53d3 	movw	r3, #19923	@ 0x4dd3
 8006a08:	f2c1 0362 	movt	r3, #4194	@ 0x1062
 8006a0c:	fba3 2302 	umull	r2, r3, r3, r2
 8006a10:	099a      	lsrs	r2, r3, #6
 8006a12:	f24e 0314 	movw	r3, #57364	@ 0xe014
 8006a16:	f2ce 0300 	movt	r3, #57344	@ 0xe000
 8006a1a:	3a01      	subs	r2, #1
 8006a1c:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006a1e:	f24e 0310 	movw	r3, #57360	@ 0xe010
 8006a22:	f2ce 0300 	movt	r3, #57344	@ 0xe000
 8006a26:	2207      	movs	r2, #7
 8006a28:	601a      	str	r2, [r3, #0]
}
 8006a2a:	bf00      	nop
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a32:	4770      	bx	lr

08006a34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006a34:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006a44 <vPortEnableVFP+0x10>
 8006a38:	6801      	ldr	r1, [r0, #0]
 8006a3a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8006a3e:	6001      	str	r1, [r0, #0]
 8006a40:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006a42:	bf00      	nop
 8006a44:	e000ed88 	.word	0xe000ed88

08006a48 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b08a      	sub	sp, #40	@ 0x28
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006a50:	2300      	movs	r3, #0
 8006a52:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006a54:	f7ff f9e7 	bl	8005e26 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006a58:	f244 3328 	movw	r3, #17192	@ 0x4328
 8006a5c:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d101      	bne.n	8006a6a <pvPortMalloc+0x22>
		{
			prvHeapInit();
 8006a66:	f000 f952 	bl	8006d0e <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006a6a:	f244 333c 	movw	r3, #17212	@ 0x433c
 8006a6e:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8006a72:	681a      	ldr	r2, [r3, #0]
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	4013      	ands	r3, r2
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	f040 80be 	bne.w	8006bfa <pvPortMalloc+0x1b2>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d01e      	beq.n	8006ac2 <pvPortMalloc+0x7a>
			{
				xWantedSize += xHeapStructSize;
 8006a84:	2208      	movs	r2, #8
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	4413      	add	r3, r2
 8006a8a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	f003 0307 	and.w	r3, r3, #7
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d015      	beq.n	8006ac2 <pvPortMalloc+0x7a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	f023 0307 	bic.w	r3, r3, #7
 8006a9c:	3308      	adds	r3, #8
 8006a9e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	f003 0307 	and.w	r3, r3, #7
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d00b      	beq.n	8006ac2 <pvPortMalloc+0x7a>
	__asm volatile
 8006aaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006aae:	f383 8811 	msr	BASEPRI, r3
 8006ab2:	f3bf 8f6f 	isb	sy
 8006ab6:	f3bf 8f4f 	dsb	sy
 8006aba:	617b      	str	r3, [r7, #20]
}
 8006abc:	bf00      	nop
 8006abe:	bf00      	nop
 8006ac0:	e7fd      	b.n	8006abe <pvPortMalloc+0x76>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	f000 8098 	beq.w	8006bfa <pvPortMalloc+0x1b2>
 8006aca:	f244 332c 	movw	r3, #17196	@ 0x432c
 8006ace:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	687a      	ldr	r2, [r7, #4]
 8006ad6:	429a      	cmp	r2, r3
 8006ad8:	f200 808f 	bhi.w	8006bfa <pvPortMalloc+0x1b2>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006adc:	f244 3320 	movw	r3, #17184	@ 0x4320
 8006ae0:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8006ae4:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006ae6:	f244 3320 	movw	r3, #17184	@ 0x4320
 8006aea:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006af2:	e004      	b.n	8006afe <pvPortMalloc+0xb6>
				{
					pxPreviousBlock = pxBlock;
 8006af4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006af6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006af8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b00:	685b      	ldr	r3, [r3, #4]
 8006b02:	687a      	ldr	r2, [r7, #4]
 8006b04:	429a      	cmp	r2, r3
 8006b06:	d903      	bls.n	8006b10 <pvPortMalloc+0xc8>
 8006b08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d1f1      	bne.n	8006af4 <pvPortMalloc+0xac>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006b10:	f244 3328 	movw	r3, #17192	@ 0x4328
 8006b14:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b1c:	429a      	cmp	r2, r3
 8006b1e:	d06c      	beq.n	8006bfa <pvPortMalloc+0x1b2>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006b20:	6a3b      	ldr	r3, [r7, #32]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	2208      	movs	r2, #8
 8006b26:	4413      	add	r3, r2
 8006b28:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006b2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b2c:	681a      	ldr	r2, [r3, #0]
 8006b2e:	6a3b      	ldr	r3, [r7, #32]
 8006b30:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b34:	685a      	ldr	r2, [r3, #4]
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	1ad2      	subs	r2, r2, r3
 8006b3a:	2308      	movs	r3, #8
 8006b3c:	005b      	lsls	r3, r3, #1
 8006b3e:	429a      	cmp	r2, r3
 8006b40:	d920      	bls.n	8006b84 <pvPortMalloc+0x13c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006b42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	4413      	add	r3, r2
 8006b48:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006b4a:	69bb      	ldr	r3, [r7, #24]
 8006b4c:	f003 0307 	and.w	r3, r3, #7
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d00b      	beq.n	8006b6c <pvPortMalloc+0x124>
	__asm volatile
 8006b54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b58:	f383 8811 	msr	BASEPRI, r3
 8006b5c:	f3bf 8f6f 	isb	sy
 8006b60:	f3bf 8f4f 	dsb	sy
 8006b64:	613b      	str	r3, [r7, #16]
}
 8006b66:	bf00      	nop
 8006b68:	bf00      	nop
 8006b6a:	e7fd      	b.n	8006b68 <pvPortMalloc+0x120>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006b6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b6e:	685a      	ldr	r2, [r3, #4]
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	1ad2      	subs	r2, r2, r3
 8006b74:	69bb      	ldr	r3, [r7, #24]
 8006b76:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006b78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b7a:	687a      	ldr	r2, [r7, #4]
 8006b7c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006b7e:	69b8      	ldr	r0, [r7, #24]
 8006b80:	f000 f93c 	bl	8006dfc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006b84:	f244 332c 	movw	r3, #17196	@ 0x432c
 8006b88:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8006b8c:	681a      	ldr	r2, [r3, #0]
 8006b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b90:	685b      	ldr	r3, [r3, #4]
 8006b92:	1ad2      	subs	r2, r2, r3
 8006b94:	f244 332c 	movw	r3, #17196	@ 0x432c
 8006b98:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8006b9c:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006b9e:	f244 332c 	movw	r3, #17196	@ 0x432c
 8006ba2:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8006ba6:	681a      	ldr	r2, [r3, #0]
 8006ba8:	f244 3330 	movw	r3, #17200	@ 0x4330
 8006bac:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	429a      	cmp	r2, r3
 8006bb4:	d209      	bcs.n	8006bca <pvPortMalloc+0x182>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006bb6:	f244 332c 	movw	r3, #17196	@ 0x432c
 8006bba:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8006bbe:	681a      	ldr	r2, [r3, #0]
 8006bc0:	f244 3330 	movw	r3, #17200	@ 0x4330
 8006bc4:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8006bc8:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bcc:	685a      	ldr	r2, [r3, #4]
 8006bce:	f244 333c 	movw	r3, #17212	@ 0x433c
 8006bd2:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	431a      	orrs	r2, r3
 8006bda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bdc:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006bde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006be0:	2200      	movs	r2, #0
 8006be2:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006be4:	f244 3334 	movw	r3, #17204	@ 0x4334
 8006be8:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	1c5a      	adds	r2, r3, #1
 8006bf0:	f244 3334 	movw	r3, #17204	@ 0x4334
 8006bf4:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8006bf8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006bfa:	f7ff f926 	bl	8005e4a <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006bfe:	69fb      	ldr	r3, [r7, #28]
 8006c00:	f003 0307 	and.w	r3, r3, #7
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d00b      	beq.n	8006c20 <pvPortMalloc+0x1d8>
	__asm volatile
 8006c08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c0c:	f383 8811 	msr	BASEPRI, r3
 8006c10:	f3bf 8f6f 	isb	sy
 8006c14:	f3bf 8f4f 	dsb	sy
 8006c18:	60fb      	str	r3, [r7, #12]
}
 8006c1a:	bf00      	nop
 8006c1c:	bf00      	nop
 8006c1e:	e7fd      	b.n	8006c1c <pvPortMalloc+0x1d4>
	return pvReturn;
 8006c20:	69fb      	ldr	r3, [r7, #28]
}
 8006c22:	4618      	mov	r0, r3
 8006c24:	3728      	adds	r7, #40	@ 0x28
 8006c26:	46bd      	mov	sp, r7
 8006c28:	bd80      	pop	{r7, pc}

08006c2a <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006c2a:	b580      	push	{r7, lr}
 8006c2c:	b086      	sub	sp, #24
 8006c2e:	af00      	add	r7, sp, #0
 8006c30:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d064      	beq.n	8006d06 <vPortFree+0xdc>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006c3c:	2308      	movs	r3, #8
 8006c3e:	425b      	negs	r3, r3
 8006c40:	697a      	ldr	r2, [r7, #20]
 8006c42:	4413      	add	r3, r2
 8006c44:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006c46:	697b      	ldr	r3, [r7, #20]
 8006c48:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006c4a:	693b      	ldr	r3, [r7, #16]
 8006c4c:	685a      	ldr	r2, [r3, #4]
 8006c4e:	f244 333c 	movw	r3, #17212	@ 0x433c
 8006c52:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	4013      	ands	r3, r2
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d10b      	bne.n	8006c76 <vPortFree+0x4c>
	__asm volatile
 8006c5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c62:	f383 8811 	msr	BASEPRI, r3
 8006c66:	f3bf 8f6f 	isb	sy
 8006c6a:	f3bf 8f4f 	dsb	sy
 8006c6e:	60fb      	str	r3, [r7, #12]
}
 8006c70:	bf00      	nop
 8006c72:	bf00      	nop
 8006c74:	e7fd      	b.n	8006c72 <vPortFree+0x48>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006c76:	693b      	ldr	r3, [r7, #16]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d00b      	beq.n	8006c96 <vPortFree+0x6c>
	__asm volatile
 8006c7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c82:	f383 8811 	msr	BASEPRI, r3
 8006c86:	f3bf 8f6f 	isb	sy
 8006c8a:	f3bf 8f4f 	dsb	sy
 8006c8e:	60bb      	str	r3, [r7, #8]
}
 8006c90:	bf00      	nop
 8006c92:	bf00      	nop
 8006c94:	e7fd      	b.n	8006c92 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006c96:	693b      	ldr	r3, [r7, #16]
 8006c98:	685a      	ldr	r2, [r3, #4]
 8006c9a:	f244 333c 	movw	r3, #17212	@ 0x433c
 8006c9e:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	4013      	ands	r3, r2
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d02d      	beq.n	8006d06 <vPortFree+0xdc>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006caa:	693b      	ldr	r3, [r7, #16]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d129      	bne.n	8006d06 <vPortFree+0xdc>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006cb2:	693b      	ldr	r3, [r7, #16]
 8006cb4:	685a      	ldr	r2, [r3, #4]
 8006cb6:	f244 333c 	movw	r3, #17212	@ 0x433c
 8006cba:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	43db      	mvns	r3, r3
 8006cc2:	401a      	ands	r2, r3
 8006cc4:	693b      	ldr	r3, [r7, #16]
 8006cc6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006cc8:	f7ff f8ad 	bl	8005e26 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006ccc:	693b      	ldr	r3, [r7, #16]
 8006cce:	685a      	ldr	r2, [r3, #4]
 8006cd0:	f244 332c 	movw	r3, #17196	@ 0x432c
 8006cd4:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	441a      	add	r2, r3
 8006cdc:	f244 332c 	movw	r3, #17196	@ 0x432c
 8006ce0:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8006ce4:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006ce6:	6938      	ldr	r0, [r7, #16]
 8006ce8:	f000 f888 	bl	8006dfc <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006cec:	f244 3338 	movw	r3, #17208	@ 0x4338
 8006cf0:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	1c5a      	adds	r2, r3, #1
 8006cf8:	f244 3338 	movw	r3, #17208	@ 0x4338
 8006cfc:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8006d00:	601a      	str	r2, [r3, #0]
				}
				( void ) xTaskResumeAll();
 8006d02:	f7ff f8a2 	bl	8005e4a <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006d06:	bf00      	nop
 8006d08:	3718      	adds	r7, #24
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	bd80      	pop	{r7, pc}

08006d0e <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006d0e:	b480      	push	{r7}
 8006d10:	b085      	sub	sp, #20
 8006d12:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006d14:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8006d18:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006d1a:	f240 7320 	movw	r3, #1824	@ 0x720
 8006d1e:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8006d22:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	f003 0307 	and.w	r3, r3, #7
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d00f      	beq.n	8006d4e <prvHeapInit+0x40>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	3307      	adds	r3, #7
 8006d32:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	f023 0307 	bic.w	r3, r3, #7
 8006d3a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006d3c:	68ba      	ldr	r2, [r7, #8]
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	1ad2      	subs	r2, r2, r3
 8006d42:	f240 7320 	movw	r3, #1824	@ 0x720
 8006d46:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8006d4a:	4413      	add	r3, r2
 8006d4c:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006d52:	f244 3320 	movw	r3, #17184	@ 0x4320
 8006d56:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8006d5a:	687a      	ldr	r2, [r7, #4]
 8006d5c:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006d5e:	f244 3320 	movw	r3, #17184	@ 0x4320
 8006d62:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8006d66:	2200      	movs	r2, #0
 8006d68:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	68ba      	ldr	r2, [r7, #8]
 8006d6e:	4413      	add	r3, r2
 8006d70:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006d72:	2208      	movs	r2, #8
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	1a9b      	subs	r3, r3, r2
 8006d78:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	f023 0307 	bic.w	r3, r3, #7
 8006d80:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006d82:	68fa      	ldr	r2, [r7, #12]
 8006d84:	f244 3328 	movw	r3, #17192	@ 0x4328
 8006d88:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8006d8c:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 8006d8e:	f244 3328 	movw	r3, #17192	@ 0x4328
 8006d92:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	2200      	movs	r2, #0
 8006d9a:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006d9c:	f244 3328 	movw	r3, #17192	@ 0x4328
 8006da0:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	2200      	movs	r2, #0
 8006da8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	68fa      	ldr	r2, [r7, #12]
 8006db2:	1ad2      	subs	r2, r2, r3
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006db8:	f244 3328 	movw	r3, #17192	@ 0x4328
 8006dbc:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8006dc0:	681a      	ldr	r2, [r3, #0]
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	685a      	ldr	r2, [r3, #4]
 8006dca:	f244 3330 	movw	r3, #17200	@ 0x4330
 8006dce:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8006dd2:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	685a      	ldr	r2, [r3, #4]
 8006dd8:	f244 332c 	movw	r3, #17196	@ 0x432c
 8006ddc:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8006de0:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006de2:	f244 333c 	movw	r3, #17212	@ 0x433c
 8006de6:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8006dea:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006dee:	601a      	str	r2, [r3, #0]
}
 8006df0:	bf00      	nop
 8006df2:	3714      	adds	r7, #20
 8006df4:	46bd      	mov	sp, r7
 8006df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfa:	4770      	bx	lr

08006dfc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006dfc:	b480      	push	{r7}
 8006dfe:	b085      	sub	sp, #20
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006e04:	f244 3320 	movw	r3, #17184	@ 0x4320
 8006e08:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8006e0c:	60fb      	str	r3, [r7, #12]
 8006e0e:	e002      	b.n	8006e16 <prvInsertBlockIntoFreeList+0x1a>
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	60fb      	str	r3, [r7, #12]
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	687a      	ldr	r2, [r7, #4]
 8006e1c:	429a      	cmp	r2, r3
 8006e1e:	d8f7      	bhi.n	8006e10 <prvInsertBlockIntoFreeList+0x14>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	685b      	ldr	r3, [r3, #4]
 8006e28:	68ba      	ldr	r2, [r7, #8]
 8006e2a:	4413      	add	r3, r2
 8006e2c:	687a      	ldr	r2, [r7, #4]
 8006e2e:	429a      	cmp	r2, r3
 8006e30:	d108      	bne.n	8006e44 <prvInsertBlockIntoFreeList+0x48>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	685a      	ldr	r2, [r3, #4]
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	685b      	ldr	r3, [r3, #4]
 8006e3a:	441a      	add	r2, r3
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	685b      	ldr	r3, [r3, #4]
 8006e4c:	68ba      	ldr	r2, [r7, #8]
 8006e4e:	441a      	add	r2, r3
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	429a      	cmp	r2, r3
 8006e56:	d11e      	bne.n	8006e96 <prvInsertBlockIntoFreeList+0x9a>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	681a      	ldr	r2, [r3, #0]
 8006e5c:	f244 3328 	movw	r3, #17192	@ 0x4328
 8006e60:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	429a      	cmp	r2, r3
 8006e68:	d00d      	beq.n	8006e86 <prvInsertBlockIntoFreeList+0x8a>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	685a      	ldr	r2, [r3, #4]
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	685b      	ldr	r3, [r3, #4]
 8006e74:	441a      	add	r2, r3
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	681a      	ldr	r2, [r3, #0]
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	601a      	str	r2, [r3, #0]
 8006e84:	e00b      	b.n	8006e9e <prvInsertBlockIntoFreeList+0xa2>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006e86:	f244 3328 	movw	r3, #17192	@ 0x4328
 8006e8a:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8006e8e:	681a      	ldr	r2, [r3, #0]
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	601a      	str	r2, [r3, #0]
 8006e94:	e003      	b.n	8006e9e <prvInsertBlockIntoFreeList+0xa2>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	681a      	ldr	r2, [r3, #0]
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006e9e:	68fa      	ldr	r2, [r7, #12]
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	429a      	cmp	r2, r3
 8006ea4:	d002      	beq.n	8006eac <prvInsertBlockIntoFreeList+0xb0>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	687a      	ldr	r2, [r7, #4]
 8006eaa:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006eac:	bf00      	nop
 8006eae:	3714      	adds	r7, #20
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb6:	4770      	bx	lr

08006eb8 <__cvt>:
 8006eb8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006ebc:	ec57 6b10 	vmov	r6, r7, d0
 8006ec0:	2f00      	cmp	r7, #0
 8006ec2:	460c      	mov	r4, r1
 8006ec4:	4619      	mov	r1, r3
 8006ec6:	463b      	mov	r3, r7
 8006ec8:	bfbb      	ittet	lt
 8006eca:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8006ece:	461f      	movlt	r7, r3
 8006ed0:	2300      	movge	r3, #0
 8006ed2:	232d      	movlt	r3, #45	@ 0x2d
 8006ed4:	700b      	strb	r3, [r1, #0]
 8006ed6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006ed8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8006edc:	4691      	mov	r9, r2
 8006ede:	f023 0820 	bic.w	r8, r3, #32
 8006ee2:	bfbc      	itt	lt
 8006ee4:	4632      	movlt	r2, r6
 8006ee6:	4616      	movlt	r6, r2
 8006ee8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006eec:	d005      	beq.n	8006efa <__cvt+0x42>
 8006eee:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006ef2:	d100      	bne.n	8006ef6 <__cvt+0x3e>
 8006ef4:	3401      	adds	r4, #1
 8006ef6:	2102      	movs	r1, #2
 8006ef8:	e000      	b.n	8006efc <__cvt+0x44>
 8006efa:	2103      	movs	r1, #3
 8006efc:	ab03      	add	r3, sp, #12
 8006efe:	9301      	str	r3, [sp, #4]
 8006f00:	ab02      	add	r3, sp, #8
 8006f02:	9300      	str	r3, [sp, #0]
 8006f04:	ec47 6b10 	vmov	d0, r6, r7
 8006f08:	4653      	mov	r3, sl
 8006f0a:	4622      	mov	r2, r4
 8006f0c:	f000 fec0 	bl	8007c90 <_dtoa_r>
 8006f10:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006f14:	4605      	mov	r5, r0
 8006f16:	d119      	bne.n	8006f4c <__cvt+0x94>
 8006f18:	f019 0f01 	tst.w	r9, #1
 8006f1c:	d00e      	beq.n	8006f3c <__cvt+0x84>
 8006f1e:	eb00 0904 	add.w	r9, r0, r4
 8006f22:	2200      	movs	r2, #0
 8006f24:	2300      	movs	r3, #0
 8006f26:	4630      	mov	r0, r6
 8006f28:	4639      	mov	r1, r7
 8006f2a:	f7f9 fdcd 	bl	8000ac8 <__aeabi_dcmpeq>
 8006f2e:	b108      	cbz	r0, 8006f34 <__cvt+0x7c>
 8006f30:	f8cd 900c 	str.w	r9, [sp, #12]
 8006f34:	2230      	movs	r2, #48	@ 0x30
 8006f36:	9b03      	ldr	r3, [sp, #12]
 8006f38:	454b      	cmp	r3, r9
 8006f3a:	d31e      	bcc.n	8006f7a <__cvt+0xc2>
 8006f3c:	9b03      	ldr	r3, [sp, #12]
 8006f3e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006f40:	1b5b      	subs	r3, r3, r5
 8006f42:	4628      	mov	r0, r5
 8006f44:	6013      	str	r3, [r2, #0]
 8006f46:	b004      	add	sp, #16
 8006f48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f4c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006f50:	eb00 0904 	add.w	r9, r0, r4
 8006f54:	d1e5      	bne.n	8006f22 <__cvt+0x6a>
 8006f56:	7803      	ldrb	r3, [r0, #0]
 8006f58:	2b30      	cmp	r3, #48	@ 0x30
 8006f5a:	d10a      	bne.n	8006f72 <__cvt+0xba>
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	2300      	movs	r3, #0
 8006f60:	4630      	mov	r0, r6
 8006f62:	4639      	mov	r1, r7
 8006f64:	f7f9 fdb0 	bl	8000ac8 <__aeabi_dcmpeq>
 8006f68:	b918      	cbnz	r0, 8006f72 <__cvt+0xba>
 8006f6a:	f1c4 0401 	rsb	r4, r4, #1
 8006f6e:	f8ca 4000 	str.w	r4, [sl]
 8006f72:	f8da 3000 	ldr.w	r3, [sl]
 8006f76:	4499      	add	r9, r3
 8006f78:	e7d3      	b.n	8006f22 <__cvt+0x6a>
 8006f7a:	1c59      	adds	r1, r3, #1
 8006f7c:	9103      	str	r1, [sp, #12]
 8006f7e:	701a      	strb	r2, [r3, #0]
 8006f80:	e7d9      	b.n	8006f36 <__cvt+0x7e>

08006f82 <__exponent>:
 8006f82:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006f84:	2900      	cmp	r1, #0
 8006f86:	bfba      	itte	lt
 8006f88:	4249      	neglt	r1, r1
 8006f8a:	232d      	movlt	r3, #45	@ 0x2d
 8006f8c:	232b      	movge	r3, #43	@ 0x2b
 8006f8e:	2909      	cmp	r1, #9
 8006f90:	7002      	strb	r2, [r0, #0]
 8006f92:	7043      	strb	r3, [r0, #1]
 8006f94:	dd29      	ble.n	8006fea <__exponent+0x68>
 8006f96:	f10d 0307 	add.w	r3, sp, #7
 8006f9a:	461d      	mov	r5, r3
 8006f9c:	270a      	movs	r7, #10
 8006f9e:	461a      	mov	r2, r3
 8006fa0:	fbb1 f6f7 	udiv	r6, r1, r7
 8006fa4:	fb07 1416 	mls	r4, r7, r6, r1
 8006fa8:	3430      	adds	r4, #48	@ 0x30
 8006faa:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006fae:	460c      	mov	r4, r1
 8006fb0:	2c63      	cmp	r4, #99	@ 0x63
 8006fb2:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8006fb6:	4631      	mov	r1, r6
 8006fb8:	dcf1      	bgt.n	8006f9e <__exponent+0x1c>
 8006fba:	3130      	adds	r1, #48	@ 0x30
 8006fbc:	1e94      	subs	r4, r2, #2
 8006fbe:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006fc2:	1c41      	adds	r1, r0, #1
 8006fc4:	4623      	mov	r3, r4
 8006fc6:	42ab      	cmp	r3, r5
 8006fc8:	d30a      	bcc.n	8006fe0 <__exponent+0x5e>
 8006fca:	f10d 0309 	add.w	r3, sp, #9
 8006fce:	1a9b      	subs	r3, r3, r2
 8006fd0:	42ac      	cmp	r4, r5
 8006fd2:	bf88      	it	hi
 8006fd4:	2300      	movhi	r3, #0
 8006fd6:	3302      	adds	r3, #2
 8006fd8:	4403      	add	r3, r0
 8006fda:	1a18      	subs	r0, r3, r0
 8006fdc:	b003      	add	sp, #12
 8006fde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006fe0:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006fe4:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006fe8:	e7ed      	b.n	8006fc6 <__exponent+0x44>
 8006fea:	2330      	movs	r3, #48	@ 0x30
 8006fec:	3130      	adds	r1, #48	@ 0x30
 8006fee:	7083      	strb	r3, [r0, #2]
 8006ff0:	70c1      	strb	r1, [r0, #3]
 8006ff2:	1d03      	adds	r3, r0, #4
 8006ff4:	e7f1      	b.n	8006fda <__exponent+0x58>
	...

08006ff8 <_printf_float>:
 8006ff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ffc:	b08d      	sub	sp, #52	@ 0x34
 8006ffe:	460c      	mov	r4, r1
 8007000:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007004:	4616      	mov	r6, r2
 8007006:	461f      	mov	r7, r3
 8007008:	4605      	mov	r5, r0
 800700a:	f000 fcdb 	bl	80079c4 <_localeconv_r>
 800700e:	6803      	ldr	r3, [r0, #0]
 8007010:	9304      	str	r3, [sp, #16]
 8007012:	4618      	mov	r0, r3
 8007014:	f7f9 f92c 	bl	8000270 <strlen>
 8007018:	2300      	movs	r3, #0
 800701a:	930a      	str	r3, [sp, #40]	@ 0x28
 800701c:	f8d8 3000 	ldr.w	r3, [r8]
 8007020:	9005      	str	r0, [sp, #20]
 8007022:	3307      	adds	r3, #7
 8007024:	f023 0307 	bic.w	r3, r3, #7
 8007028:	f103 0208 	add.w	r2, r3, #8
 800702c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007030:	f8d4 b000 	ldr.w	fp, [r4]
 8007034:	f8c8 2000 	str.w	r2, [r8]
 8007038:	e9d3 8900 	ldrd	r8, r9, [r3]
 800703c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007040:	9307      	str	r3, [sp, #28]
 8007042:	f8cd 8018 	str.w	r8, [sp, #24]
 8007046:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800704a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800704e:	4b9c      	ldr	r3, [pc, #624]	@ (80072c0 <_printf_float+0x2c8>)
 8007050:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007054:	f7f9 fd6a 	bl	8000b2c <__aeabi_dcmpun>
 8007058:	bb70      	cbnz	r0, 80070b8 <_printf_float+0xc0>
 800705a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800705e:	4b98      	ldr	r3, [pc, #608]	@ (80072c0 <_printf_float+0x2c8>)
 8007060:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007064:	f7f9 fd44 	bl	8000af0 <__aeabi_dcmple>
 8007068:	bb30      	cbnz	r0, 80070b8 <_printf_float+0xc0>
 800706a:	2200      	movs	r2, #0
 800706c:	2300      	movs	r3, #0
 800706e:	4640      	mov	r0, r8
 8007070:	4649      	mov	r1, r9
 8007072:	f7f9 fd33 	bl	8000adc <__aeabi_dcmplt>
 8007076:	b110      	cbz	r0, 800707e <_printf_float+0x86>
 8007078:	232d      	movs	r3, #45	@ 0x2d
 800707a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800707e:	4a91      	ldr	r2, [pc, #580]	@ (80072c4 <_printf_float+0x2cc>)
 8007080:	4b91      	ldr	r3, [pc, #580]	@ (80072c8 <_printf_float+0x2d0>)
 8007082:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007086:	bf94      	ite	ls
 8007088:	4690      	movls	r8, r2
 800708a:	4698      	movhi	r8, r3
 800708c:	2303      	movs	r3, #3
 800708e:	6123      	str	r3, [r4, #16]
 8007090:	f02b 0304 	bic.w	r3, fp, #4
 8007094:	6023      	str	r3, [r4, #0]
 8007096:	f04f 0900 	mov.w	r9, #0
 800709a:	9700      	str	r7, [sp, #0]
 800709c:	4633      	mov	r3, r6
 800709e:	aa0b      	add	r2, sp, #44	@ 0x2c
 80070a0:	4621      	mov	r1, r4
 80070a2:	4628      	mov	r0, r5
 80070a4:	f000 f9d2 	bl	800744c <_printf_common>
 80070a8:	3001      	adds	r0, #1
 80070aa:	f040 808d 	bne.w	80071c8 <_printf_float+0x1d0>
 80070ae:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80070b2:	b00d      	add	sp, #52	@ 0x34
 80070b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070b8:	4642      	mov	r2, r8
 80070ba:	464b      	mov	r3, r9
 80070bc:	4640      	mov	r0, r8
 80070be:	4649      	mov	r1, r9
 80070c0:	f7f9 fd34 	bl	8000b2c <__aeabi_dcmpun>
 80070c4:	b140      	cbz	r0, 80070d8 <_printf_float+0xe0>
 80070c6:	464b      	mov	r3, r9
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	bfbc      	itt	lt
 80070cc:	232d      	movlt	r3, #45	@ 0x2d
 80070ce:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80070d2:	4a7e      	ldr	r2, [pc, #504]	@ (80072cc <_printf_float+0x2d4>)
 80070d4:	4b7e      	ldr	r3, [pc, #504]	@ (80072d0 <_printf_float+0x2d8>)
 80070d6:	e7d4      	b.n	8007082 <_printf_float+0x8a>
 80070d8:	6863      	ldr	r3, [r4, #4]
 80070da:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80070de:	9206      	str	r2, [sp, #24]
 80070e0:	1c5a      	adds	r2, r3, #1
 80070e2:	d13b      	bne.n	800715c <_printf_float+0x164>
 80070e4:	2306      	movs	r3, #6
 80070e6:	6063      	str	r3, [r4, #4]
 80070e8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80070ec:	2300      	movs	r3, #0
 80070ee:	6022      	str	r2, [r4, #0]
 80070f0:	9303      	str	r3, [sp, #12]
 80070f2:	ab0a      	add	r3, sp, #40	@ 0x28
 80070f4:	e9cd a301 	strd	sl, r3, [sp, #4]
 80070f8:	ab09      	add	r3, sp, #36	@ 0x24
 80070fa:	9300      	str	r3, [sp, #0]
 80070fc:	6861      	ldr	r1, [r4, #4]
 80070fe:	ec49 8b10 	vmov	d0, r8, r9
 8007102:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007106:	4628      	mov	r0, r5
 8007108:	f7ff fed6 	bl	8006eb8 <__cvt>
 800710c:	9b06      	ldr	r3, [sp, #24]
 800710e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007110:	2b47      	cmp	r3, #71	@ 0x47
 8007112:	4680      	mov	r8, r0
 8007114:	d129      	bne.n	800716a <_printf_float+0x172>
 8007116:	1cc8      	adds	r0, r1, #3
 8007118:	db02      	blt.n	8007120 <_printf_float+0x128>
 800711a:	6863      	ldr	r3, [r4, #4]
 800711c:	4299      	cmp	r1, r3
 800711e:	dd41      	ble.n	80071a4 <_printf_float+0x1ac>
 8007120:	f1aa 0a02 	sub.w	sl, sl, #2
 8007124:	fa5f fa8a 	uxtb.w	sl, sl
 8007128:	3901      	subs	r1, #1
 800712a:	4652      	mov	r2, sl
 800712c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007130:	9109      	str	r1, [sp, #36]	@ 0x24
 8007132:	f7ff ff26 	bl	8006f82 <__exponent>
 8007136:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007138:	1813      	adds	r3, r2, r0
 800713a:	2a01      	cmp	r2, #1
 800713c:	4681      	mov	r9, r0
 800713e:	6123      	str	r3, [r4, #16]
 8007140:	dc02      	bgt.n	8007148 <_printf_float+0x150>
 8007142:	6822      	ldr	r2, [r4, #0]
 8007144:	07d2      	lsls	r2, r2, #31
 8007146:	d501      	bpl.n	800714c <_printf_float+0x154>
 8007148:	3301      	adds	r3, #1
 800714a:	6123      	str	r3, [r4, #16]
 800714c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007150:	2b00      	cmp	r3, #0
 8007152:	d0a2      	beq.n	800709a <_printf_float+0xa2>
 8007154:	232d      	movs	r3, #45	@ 0x2d
 8007156:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800715a:	e79e      	b.n	800709a <_printf_float+0xa2>
 800715c:	9a06      	ldr	r2, [sp, #24]
 800715e:	2a47      	cmp	r2, #71	@ 0x47
 8007160:	d1c2      	bne.n	80070e8 <_printf_float+0xf0>
 8007162:	2b00      	cmp	r3, #0
 8007164:	d1c0      	bne.n	80070e8 <_printf_float+0xf0>
 8007166:	2301      	movs	r3, #1
 8007168:	e7bd      	b.n	80070e6 <_printf_float+0xee>
 800716a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800716e:	d9db      	bls.n	8007128 <_printf_float+0x130>
 8007170:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007174:	d118      	bne.n	80071a8 <_printf_float+0x1b0>
 8007176:	2900      	cmp	r1, #0
 8007178:	6863      	ldr	r3, [r4, #4]
 800717a:	dd0b      	ble.n	8007194 <_printf_float+0x19c>
 800717c:	6121      	str	r1, [r4, #16]
 800717e:	b913      	cbnz	r3, 8007186 <_printf_float+0x18e>
 8007180:	6822      	ldr	r2, [r4, #0]
 8007182:	07d0      	lsls	r0, r2, #31
 8007184:	d502      	bpl.n	800718c <_printf_float+0x194>
 8007186:	3301      	adds	r3, #1
 8007188:	440b      	add	r3, r1
 800718a:	6123      	str	r3, [r4, #16]
 800718c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800718e:	f04f 0900 	mov.w	r9, #0
 8007192:	e7db      	b.n	800714c <_printf_float+0x154>
 8007194:	b913      	cbnz	r3, 800719c <_printf_float+0x1a4>
 8007196:	6822      	ldr	r2, [r4, #0]
 8007198:	07d2      	lsls	r2, r2, #31
 800719a:	d501      	bpl.n	80071a0 <_printf_float+0x1a8>
 800719c:	3302      	adds	r3, #2
 800719e:	e7f4      	b.n	800718a <_printf_float+0x192>
 80071a0:	2301      	movs	r3, #1
 80071a2:	e7f2      	b.n	800718a <_printf_float+0x192>
 80071a4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80071a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80071aa:	4299      	cmp	r1, r3
 80071ac:	db05      	blt.n	80071ba <_printf_float+0x1c2>
 80071ae:	6823      	ldr	r3, [r4, #0]
 80071b0:	6121      	str	r1, [r4, #16]
 80071b2:	07d8      	lsls	r0, r3, #31
 80071b4:	d5ea      	bpl.n	800718c <_printf_float+0x194>
 80071b6:	1c4b      	adds	r3, r1, #1
 80071b8:	e7e7      	b.n	800718a <_printf_float+0x192>
 80071ba:	2900      	cmp	r1, #0
 80071bc:	bfd4      	ite	le
 80071be:	f1c1 0202 	rsble	r2, r1, #2
 80071c2:	2201      	movgt	r2, #1
 80071c4:	4413      	add	r3, r2
 80071c6:	e7e0      	b.n	800718a <_printf_float+0x192>
 80071c8:	6823      	ldr	r3, [r4, #0]
 80071ca:	055a      	lsls	r2, r3, #21
 80071cc:	d407      	bmi.n	80071de <_printf_float+0x1e6>
 80071ce:	6923      	ldr	r3, [r4, #16]
 80071d0:	4642      	mov	r2, r8
 80071d2:	4631      	mov	r1, r6
 80071d4:	4628      	mov	r0, r5
 80071d6:	47b8      	blx	r7
 80071d8:	3001      	adds	r0, #1
 80071da:	d12b      	bne.n	8007234 <_printf_float+0x23c>
 80071dc:	e767      	b.n	80070ae <_printf_float+0xb6>
 80071de:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80071e2:	f240 80dd 	bls.w	80073a0 <_printf_float+0x3a8>
 80071e6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80071ea:	2200      	movs	r2, #0
 80071ec:	2300      	movs	r3, #0
 80071ee:	f7f9 fc6b 	bl	8000ac8 <__aeabi_dcmpeq>
 80071f2:	2800      	cmp	r0, #0
 80071f4:	d033      	beq.n	800725e <_printf_float+0x266>
 80071f6:	4a37      	ldr	r2, [pc, #220]	@ (80072d4 <_printf_float+0x2dc>)
 80071f8:	2301      	movs	r3, #1
 80071fa:	4631      	mov	r1, r6
 80071fc:	4628      	mov	r0, r5
 80071fe:	47b8      	blx	r7
 8007200:	3001      	adds	r0, #1
 8007202:	f43f af54 	beq.w	80070ae <_printf_float+0xb6>
 8007206:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800720a:	4543      	cmp	r3, r8
 800720c:	db02      	blt.n	8007214 <_printf_float+0x21c>
 800720e:	6823      	ldr	r3, [r4, #0]
 8007210:	07d8      	lsls	r0, r3, #31
 8007212:	d50f      	bpl.n	8007234 <_printf_float+0x23c>
 8007214:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007218:	4631      	mov	r1, r6
 800721a:	4628      	mov	r0, r5
 800721c:	47b8      	blx	r7
 800721e:	3001      	adds	r0, #1
 8007220:	f43f af45 	beq.w	80070ae <_printf_float+0xb6>
 8007224:	f04f 0900 	mov.w	r9, #0
 8007228:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800722c:	f104 0a1a 	add.w	sl, r4, #26
 8007230:	45c8      	cmp	r8, r9
 8007232:	dc09      	bgt.n	8007248 <_printf_float+0x250>
 8007234:	6823      	ldr	r3, [r4, #0]
 8007236:	079b      	lsls	r3, r3, #30
 8007238:	f100 8103 	bmi.w	8007442 <_printf_float+0x44a>
 800723c:	68e0      	ldr	r0, [r4, #12]
 800723e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007240:	4298      	cmp	r0, r3
 8007242:	bfb8      	it	lt
 8007244:	4618      	movlt	r0, r3
 8007246:	e734      	b.n	80070b2 <_printf_float+0xba>
 8007248:	2301      	movs	r3, #1
 800724a:	4652      	mov	r2, sl
 800724c:	4631      	mov	r1, r6
 800724e:	4628      	mov	r0, r5
 8007250:	47b8      	blx	r7
 8007252:	3001      	adds	r0, #1
 8007254:	f43f af2b 	beq.w	80070ae <_printf_float+0xb6>
 8007258:	f109 0901 	add.w	r9, r9, #1
 800725c:	e7e8      	b.n	8007230 <_printf_float+0x238>
 800725e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007260:	2b00      	cmp	r3, #0
 8007262:	dc39      	bgt.n	80072d8 <_printf_float+0x2e0>
 8007264:	4a1b      	ldr	r2, [pc, #108]	@ (80072d4 <_printf_float+0x2dc>)
 8007266:	2301      	movs	r3, #1
 8007268:	4631      	mov	r1, r6
 800726a:	4628      	mov	r0, r5
 800726c:	47b8      	blx	r7
 800726e:	3001      	adds	r0, #1
 8007270:	f43f af1d 	beq.w	80070ae <_printf_float+0xb6>
 8007274:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007278:	ea59 0303 	orrs.w	r3, r9, r3
 800727c:	d102      	bne.n	8007284 <_printf_float+0x28c>
 800727e:	6823      	ldr	r3, [r4, #0]
 8007280:	07d9      	lsls	r1, r3, #31
 8007282:	d5d7      	bpl.n	8007234 <_printf_float+0x23c>
 8007284:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007288:	4631      	mov	r1, r6
 800728a:	4628      	mov	r0, r5
 800728c:	47b8      	blx	r7
 800728e:	3001      	adds	r0, #1
 8007290:	f43f af0d 	beq.w	80070ae <_printf_float+0xb6>
 8007294:	f04f 0a00 	mov.w	sl, #0
 8007298:	f104 0b1a 	add.w	fp, r4, #26
 800729c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800729e:	425b      	negs	r3, r3
 80072a0:	4553      	cmp	r3, sl
 80072a2:	dc01      	bgt.n	80072a8 <_printf_float+0x2b0>
 80072a4:	464b      	mov	r3, r9
 80072a6:	e793      	b.n	80071d0 <_printf_float+0x1d8>
 80072a8:	2301      	movs	r3, #1
 80072aa:	465a      	mov	r2, fp
 80072ac:	4631      	mov	r1, r6
 80072ae:	4628      	mov	r0, r5
 80072b0:	47b8      	blx	r7
 80072b2:	3001      	adds	r0, #1
 80072b4:	f43f aefb 	beq.w	80070ae <_printf_float+0xb6>
 80072b8:	f10a 0a01 	add.w	sl, sl, #1
 80072bc:	e7ee      	b.n	800729c <_printf_float+0x2a4>
 80072be:	bf00      	nop
 80072c0:	7fefffff 	.word	0x7fefffff
 80072c4:	08009d0c 	.word	0x08009d0c
 80072c8:	08009d10 	.word	0x08009d10
 80072cc:	08009d14 	.word	0x08009d14
 80072d0:	08009d18 	.word	0x08009d18
 80072d4:	08009d1c 	.word	0x08009d1c
 80072d8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80072da:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80072de:	4553      	cmp	r3, sl
 80072e0:	bfa8      	it	ge
 80072e2:	4653      	movge	r3, sl
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	4699      	mov	r9, r3
 80072e8:	dc36      	bgt.n	8007358 <_printf_float+0x360>
 80072ea:	f04f 0b00 	mov.w	fp, #0
 80072ee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80072f2:	f104 021a 	add.w	r2, r4, #26
 80072f6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80072f8:	9306      	str	r3, [sp, #24]
 80072fa:	eba3 0309 	sub.w	r3, r3, r9
 80072fe:	455b      	cmp	r3, fp
 8007300:	dc31      	bgt.n	8007366 <_printf_float+0x36e>
 8007302:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007304:	459a      	cmp	sl, r3
 8007306:	dc3a      	bgt.n	800737e <_printf_float+0x386>
 8007308:	6823      	ldr	r3, [r4, #0]
 800730a:	07da      	lsls	r2, r3, #31
 800730c:	d437      	bmi.n	800737e <_printf_float+0x386>
 800730e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007310:	ebaa 0903 	sub.w	r9, sl, r3
 8007314:	9b06      	ldr	r3, [sp, #24]
 8007316:	ebaa 0303 	sub.w	r3, sl, r3
 800731a:	4599      	cmp	r9, r3
 800731c:	bfa8      	it	ge
 800731e:	4699      	movge	r9, r3
 8007320:	f1b9 0f00 	cmp.w	r9, #0
 8007324:	dc33      	bgt.n	800738e <_printf_float+0x396>
 8007326:	f04f 0800 	mov.w	r8, #0
 800732a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800732e:	f104 0b1a 	add.w	fp, r4, #26
 8007332:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007334:	ebaa 0303 	sub.w	r3, sl, r3
 8007338:	eba3 0309 	sub.w	r3, r3, r9
 800733c:	4543      	cmp	r3, r8
 800733e:	f77f af79 	ble.w	8007234 <_printf_float+0x23c>
 8007342:	2301      	movs	r3, #1
 8007344:	465a      	mov	r2, fp
 8007346:	4631      	mov	r1, r6
 8007348:	4628      	mov	r0, r5
 800734a:	47b8      	blx	r7
 800734c:	3001      	adds	r0, #1
 800734e:	f43f aeae 	beq.w	80070ae <_printf_float+0xb6>
 8007352:	f108 0801 	add.w	r8, r8, #1
 8007356:	e7ec      	b.n	8007332 <_printf_float+0x33a>
 8007358:	4642      	mov	r2, r8
 800735a:	4631      	mov	r1, r6
 800735c:	4628      	mov	r0, r5
 800735e:	47b8      	blx	r7
 8007360:	3001      	adds	r0, #1
 8007362:	d1c2      	bne.n	80072ea <_printf_float+0x2f2>
 8007364:	e6a3      	b.n	80070ae <_printf_float+0xb6>
 8007366:	2301      	movs	r3, #1
 8007368:	4631      	mov	r1, r6
 800736a:	4628      	mov	r0, r5
 800736c:	9206      	str	r2, [sp, #24]
 800736e:	47b8      	blx	r7
 8007370:	3001      	adds	r0, #1
 8007372:	f43f ae9c 	beq.w	80070ae <_printf_float+0xb6>
 8007376:	9a06      	ldr	r2, [sp, #24]
 8007378:	f10b 0b01 	add.w	fp, fp, #1
 800737c:	e7bb      	b.n	80072f6 <_printf_float+0x2fe>
 800737e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007382:	4631      	mov	r1, r6
 8007384:	4628      	mov	r0, r5
 8007386:	47b8      	blx	r7
 8007388:	3001      	adds	r0, #1
 800738a:	d1c0      	bne.n	800730e <_printf_float+0x316>
 800738c:	e68f      	b.n	80070ae <_printf_float+0xb6>
 800738e:	9a06      	ldr	r2, [sp, #24]
 8007390:	464b      	mov	r3, r9
 8007392:	4442      	add	r2, r8
 8007394:	4631      	mov	r1, r6
 8007396:	4628      	mov	r0, r5
 8007398:	47b8      	blx	r7
 800739a:	3001      	adds	r0, #1
 800739c:	d1c3      	bne.n	8007326 <_printf_float+0x32e>
 800739e:	e686      	b.n	80070ae <_printf_float+0xb6>
 80073a0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80073a4:	f1ba 0f01 	cmp.w	sl, #1
 80073a8:	dc01      	bgt.n	80073ae <_printf_float+0x3b6>
 80073aa:	07db      	lsls	r3, r3, #31
 80073ac:	d536      	bpl.n	800741c <_printf_float+0x424>
 80073ae:	2301      	movs	r3, #1
 80073b0:	4642      	mov	r2, r8
 80073b2:	4631      	mov	r1, r6
 80073b4:	4628      	mov	r0, r5
 80073b6:	47b8      	blx	r7
 80073b8:	3001      	adds	r0, #1
 80073ba:	f43f ae78 	beq.w	80070ae <_printf_float+0xb6>
 80073be:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80073c2:	4631      	mov	r1, r6
 80073c4:	4628      	mov	r0, r5
 80073c6:	47b8      	blx	r7
 80073c8:	3001      	adds	r0, #1
 80073ca:	f43f ae70 	beq.w	80070ae <_printf_float+0xb6>
 80073ce:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80073d2:	2200      	movs	r2, #0
 80073d4:	2300      	movs	r3, #0
 80073d6:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80073da:	f7f9 fb75 	bl	8000ac8 <__aeabi_dcmpeq>
 80073de:	b9c0      	cbnz	r0, 8007412 <_printf_float+0x41a>
 80073e0:	4653      	mov	r3, sl
 80073e2:	f108 0201 	add.w	r2, r8, #1
 80073e6:	4631      	mov	r1, r6
 80073e8:	4628      	mov	r0, r5
 80073ea:	47b8      	blx	r7
 80073ec:	3001      	adds	r0, #1
 80073ee:	d10c      	bne.n	800740a <_printf_float+0x412>
 80073f0:	e65d      	b.n	80070ae <_printf_float+0xb6>
 80073f2:	2301      	movs	r3, #1
 80073f4:	465a      	mov	r2, fp
 80073f6:	4631      	mov	r1, r6
 80073f8:	4628      	mov	r0, r5
 80073fa:	47b8      	blx	r7
 80073fc:	3001      	adds	r0, #1
 80073fe:	f43f ae56 	beq.w	80070ae <_printf_float+0xb6>
 8007402:	f108 0801 	add.w	r8, r8, #1
 8007406:	45d0      	cmp	r8, sl
 8007408:	dbf3      	blt.n	80073f2 <_printf_float+0x3fa>
 800740a:	464b      	mov	r3, r9
 800740c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007410:	e6df      	b.n	80071d2 <_printf_float+0x1da>
 8007412:	f04f 0800 	mov.w	r8, #0
 8007416:	f104 0b1a 	add.w	fp, r4, #26
 800741a:	e7f4      	b.n	8007406 <_printf_float+0x40e>
 800741c:	2301      	movs	r3, #1
 800741e:	4642      	mov	r2, r8
 8007420:	e7e1      	b.n	80073e6 <_printf_float+0x3ee>
 8007422:	2301      	movs	r3, #1
 8007424:	464a      	mov	r2, r9
 8007426:	4631      	mov	r1, r6
 8007428:	4628      	mov	r0, r5
 800742a:	47b8      	blx	r7
 800742c:	3001      	adds	r0, #1
 800742e:	f43f ae3e 	beq.w	80070ae <_printf_float+0xb6>
 8007432:	f108 0801 	add.w	r8, r8, #1
 8007436:	68e3      	ldr	r3, [r4, #12]
 8007438:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800743a:	1a5b      	subs	r3, r3, r1
 800743c:	4543      	cmp	r3, r8
 800743e:	dcf0      	bgt.n	8007422 <_printf_float+0x42a>
 8007440:	e6fc      	b.n	800723c <_printf_float+0x244>
 8007442:	f04f 0800 	mov.w	r8, #0
 8007446:	f104 0919 	add.w	r9, r4, #25
 800744a:	e7f4      	b.n	8007436 <_printf_float+0x43e>

0800744c <_printf_common>:
 800744c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007450:	4616      	mov	r6, r2
 8007452:	4698      	mov	r8, r3
 8007454:	688a      	ldr	r2, [r1, #8]
 8007456:	690b      	ldr	r3, [r1, #16]
 8007458:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800745c:	4293      	cmp	r3, r2
 800745e:	bfb8      	it	lt
 8007460:	4613      	movlt	r3, r2
 8007462:	6033      	str	r3, [r6, #0]
 8007464:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007468:	4607      	mov	r7, r0
 800746a:	460c      	mov	r4, r1
 800746c:	b10a      	cbz	r2, 8007472 <_printf_common+0x26>
 800746e:	3301      	adds	r3, #1
 8007470:	6033      	str	r3, [r6, #0]
 8007472:	6823      	ldr	r3, [r4, #0]
 8007474:	0699      	lsls	r1, r3, #26
 8007476:	bf42      	ittt	mi
 8007478:	6833      	ldrmi	r3, [r6, #0]
 800747a:	3302      	addmi	r3, #2
 800747c:	6033      	strmi	r3, [r6, #0]
 800747e:	6825      	ldr	r5, [r4, #0]
 8007480:	f015 0506 	ands.w	r5, r5, #6
 8007484:	d106      	bne.n	8007494 <_printf_common+0x48>
 8007486:	f104 0a19 	add.w	sl, r4, #25
 800748a:	68e3      	ldr	r3, [r4, #12]
 800748c:	6832      	ldr	r2, [r6, #0]
 800748e:	1a9b      	subs	r3, r3, r2
 8007490:	42ab      	cmp	r3, r5
 8007492:	dc26      	bgt.n	80074e2 <_printf_common+0x96>
 8007494:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007498:	6822      	ldr	r2, [r4, #0]
 800749a:	3b00      	subs	r3, #0
 800749c:	bf18      	it	ne
 800749e:	2301      	movne	r3, #1
 80074a0:	0692      	lsls	r2, r2, #26
 80074a2:	d42b      	bmi.n	80074fc <_printf_common+0xb0>
 80074a4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80074a8:	4641      	mov	r1, r8
 80074aa:	4638      	mov	r0, r7
 80074ac:	47c8      	blx	r9
 80074ae:	3001      	adds	r0, #1
 80074b0:	d01e      	beq.n	80074f0 <_printf_common+0xa4>
 80074b2:	6823      	ldr	r3, [r4, #0]
 80074b4:	6922      	ldr	r2, [r4, #16]
 80074b6:	f003 0306 	and.w	r3, r3, #6
 80074ba:	2b04      	cmp	r3, #4
 80074bc:	bf02      	ittt	eq
 80074be:	68e5      	ldreq	r5, [r4, #12]
 80074c0:	6833      	ldreq	r3, [r6, #0]
 80074c2:	1aed      	subeq	r5, r5, r3
 80074c4:	68a3      	ldr	r3, [r4, #8]
 80074c6:	bf0c      	ite	eq
 80074c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80074cc:	2500      	movne	r5, #0
 80074ce:	4293      	cmp	r3, r2
 80074d0:	bfc4      	itt	gt
 80074d2:	1a9b      	subgt	r3, r3, r2
 80074d4:	18ed      	addgt	r5, r5, r3
 80074d6:	2600      	movs	r6, #0
 80074d8:	341a      	adds	r4, #26
 80074da:	42b5      	cmp	r5, r6
 80074dc:	d11a      	bne.n	8007514 <_printf_common+0xc8>
 80074de:	2000      	movs	r0, #0
 80074e0:	e008      	b.n	80074f4 <_printf_common+0xa8>
 80074e2:	2301      	movs	r3, #1
 80074e4:	4652      	mov	r2, sl
 80074e6:	4641      	mov	r1, r8
 80074e8:	4638      	mov	r0, r7
 80074ea:	47c8      	blx	r9
 80074ec:	3001      	adds	r0, #1
 80074ee:	d103      	bne.n	80074f8 <_printf_common+0xac>
 80074f0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80074f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074f8:	3501      	adds	r5, #1
 80074fa:	e7c6      	b.n	800748a <_printf_common+0x3e>
 80074fc:	18e1      	adds	r1, r4, r3
 80074fe:	1c5a      	adds	r2, r3, #1
 8007500:	2030      	movs	r0, #48	@ 0x30
 8007502:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007506:	4422      	add	r2, r4
 8007508:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800750c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007510:	3302      	adds	r3, #2
 8007512:	e7c7      	b.n	80074a4 <_printf_common+0x58>
 8007514:	2301      	movs	r3, #1
 8007516:	4622      	mov	r2, r4
 8007518:	4641      	mov	r1, r8
 800751a:	4638      	mov	r0, r7
 800751c:	47c8      	blx	r9
 800751e:	3001      	adds	r0, #1
 8007520:	d0e6      	beq.n	80074f0 <_printf_common+0xa4>
 8007522:	3601      	adds	r6, #1
 8007524:	e7d9      	b.n	80074da <_printf_common+0x8e>
	...

08007528 <_printf_i>:
 8007528:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800752c:	7e0f      	ldrb	r7, [r1, #24]
 800752e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007530:	2f78      	cmp	r7, #120	@ 0x78
 8007532:	4691      	mov	r9, r2
 8007534:	4680      	mov	r8, r0
 8007536:	460c      	mov	r4, r1
 8007538:	469a      	mov	sl, r3
 800753a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800753e:	d807      	bhi.n	8007550 <_printf_i+0x28>
 8007540:	2f62      	cmp	r7, #98	@ 0x62
 8007542:	d80a      	bhi.n	800755a <_printf_i+0x32>
 8007544:	2f00      	cmp	r7, #0
 8007546:	f000 80d2 	beq.w	80076ee <_printf_i+0x1c6>
 800754a:	2f58      	cmp	r7, #88	@ 0x58
 800754c:	f000 80b9 	beq.w	80076c2 <_printf_i+0x19a>
 8007550:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007554:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007558:	e03a      	b.n	80075d0 <_printf_i+0xa8>
 800755a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800755e:	2b15      	cmp	r3, #21
 8007560:	d8f6      	bhi.n	8007550 <_printf_i+0x28>
 8007562:	a101      	add	r1, pc, #4	@ (adr r1, 8007568 <_printf_i+0x40>)
 8007564:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007568:	080075c1 	.word	0x080075c1
 800756c:	080075d5 	.word	0x080075d5
 8007570:	08007551 	.word	0x08007551
 8007574:	08007551 	.word	0x08007551
 8007578:	08007551 	.word	0x08007551
 800757c:	08007551 	.word	0x08007551
 8007580:	080075d5 	.word	0x080075d5
 8007584:	08007551 	.word	0x08007551
 8007588:	08007551 	.word	0x08007551
 800758c:	08007551 	.word	0x08007551
 8007590:	08007551 	.word	0x08007551
 8007594:	080076d5 	.word	0x080076d5
 8007598:	080075ff 	.word	0x080075ff
 800759c:	0800768f 	.word	0x0800768f
 80075a0:	08007551 	.word	0x08007551
 80075a4:	08007551 	.word	0x08007551
 80075a8:	080076f7 	.word	0x080076f7
 80075ac:	08007551 	.word	0x08007551
 80075b0:	080075ff 	.word	0x080075ff
 80075b4:	08007551 	.word	0x08007551
 80075b8:	08007551 	.word	0x08007551
 80075bc:	08007697 	.word	0x08007697
 80075c0:	6833      	ldr	r3, [r6, #0]
 80075c2:	1d1a      	adds	r2, r3, #4
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	6032      	str	r2, [r6, #0]
 80075c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80075cc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80075d0:	2301      	movs	r3, #1
 80075d2:	e09d      	b.n	8007710 <_printf_i+0x1e8>
 80075d4:	6833      	ldr	r3, [r6, #0]
 80075d6:	6820      	ldr	r0, [r4, #0]
 80075d8:	1d19      	adds	r1, r3, #4
 80075da:	6031      	str	r1, [r6, #0]
 80075dc:	0606      	lsls	r6, r0, #24
 80075de:	d501      	bpl.n	80075e4 <_printf_i+0xbc>
 80075e0:	681d      	ldr	r5, [r3, #0]
 80075e2:	e003      	b.n	80075ec <_printf_i+0xc4>
 80075e4:	0645      	lsls	r5, r0, #25
 80075e6:	d5fb      	bpl.n	80075e0 <_printf_i+0xb8>
 80075e8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80075ec:	2d00      	cmp	r5, #0
 80075ee:	da03      	bge.n	80075f8 <_printf_i+0xd0>
 80075f0:	232d      	movs	r3, #45	@ 0x2d
 80075f2:	426d      	negs	r5, r5
 80075f4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80075f8:	4859      	ldr	r0, [pc, #356]	@ (8007760 <_printf_i+0x238>)
 80075fa:	230a      	movs	r3, #10
 80075fc:	e011      	b.n	8007622 <_printf_i+0xfa>
 80075fe:	6821      	ldr	r1, [r4, #0]
 8007600:	6833      	ldr	r3, [r6, #0]
 8007602:	0608      	lsls	r0, r1, #24
 8007604:	f853 5b04 	ldr.w	r5, [r3], #4
 8007608:	d402      	bmi.n	8007610 <_printf_i+0xe8>
 800760a:	0649      	lsls	r1, r1, #25
 800760c:	bf48      	it	mi
 800760e:	b2ad      	uxthmi	r5, r5
 8007610:	2f6f      	cmp	r7, #111	@ 0x6f
 8007612:	4853      	ldr	r0, [pc, #332]	@ (8007760 <_printf_i+0x238>)
 8007614:	6033      	str	r3, [r6, #0]
 8007616:	bf14      	ite	ne
 8007618:	230a      	movne	r3, #10
 800761a:	2308      	moveq	r3, #8
 800761c:	2100      	movs	r1, #0
 800761e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007622:	6866      	ldr	r6, [r4, #4]
 8007624:	60a6      	str	r6, [r4, #8]
 8007626:	2e00      	cmp	r6, #0
 8007628:	bfa2      	ittt	ge
 800762a:	6821      	ldrge	r1, [r4, #0]
 800762c:	f021 0104 	bicge.w	r1, r1, #4
 8007630:	6021      	strge	r1, [r4, #0]
 8007632:	b90d      	cbnz	r5, 8007638 <_printf_i+0x110>
 8007634:	2e00      	cmp	r6, #0
 8007636:	d04b      	beq.n	80076d0 <_printf_i+0x1a8>
 8007638:	4616      	mov	r6, r2
 800763a:	fbb5 f1f3 	udiv	r1, r5, r3
 800763e:	fb03 5711 	mls	r7, r3, r1, r5
 8007642:	5dc7      	ldrb	r7, [r0, r7]
 8007644:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007648:	462f      	mov	r7, r5
 800764a:	42bb      	cmp	r3, r7
 800764c:	460d      	mov	r5, r1
 800764e:	d9f4      	bls.n	800763a <_printf_i+0x112>
 8007650:	2b08      	cmp	r3, #8
 8007652:	d10b      	bne.n	800766c <_printf_i+0x144>
 8007654:	6823      	ldr	r3, [r4, #0]
 8007656:	07df      	lsls	r7, r3, #31
 8007658:	d508      	bpl.n	800766c <_printf_i+0x144>
 800765a:	6923      	ldr	r3, [r4, #16]
 800765c:	6861      	ldr	r1, [r4, #4]
 800765e:	4299      	cmp	r1, r3
 8007660:	bfde      	ittt	le
 8007662:	2330      	movle	r3, #48	@ 0x30
 8007664:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007668:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800766c:	1b92      	subs	r2, r2, r6
 800766e:	6122      	str	r2, [r4, #16]
 8007670:	f8cd a000 	str.w	sl, [sp]
 8007674:	464b      	mov	r3, r9
 8007676:	aa03      	add	r2, sp, #12
 8007678:	4621      	mov	r1, r4
 800767a:	4640      	mov	r0, r8
 800767c:	f7ff fee6 	bl	800744c <_printf_common>
 8007680:	3001      	adds	r0, #1
 8007682:	d14a      	bne.n	800771a <_printf_i+0x1f2>
 8007684:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007688:	b004      	add	sp, #16
 800768a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800768e:	6823      	ldr	r3, [r4, #0]
 8007690:	f043 0320 	orr.w	r3, r3, #32
 8007694:	6023      	str	r3, [r4, #0]
 8007696:	4833      	ldr	r0, [pc, #204]	@ (8007764 <_printf_i+0x23c>)
 8007698:	2778      	movs	r7, #120	@ 0x78
 800769a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800769e:	6823      	ldr	r3, [r4, #0]
 80076a0:	6831      	ldr	r1, [r6, #0]
 80076a2:	061f      	lsls	r7, r3, #24
 80076a4:	f851 5b04 	ldr.w	r5, [r1], #4
 80076a8:	d402      	bmi.n	80076b0 <_printf_i+0x188>
 80076aa:	065f      	lsls	r7, r3, #25
 80076ac:	bf48      	it	mi
 80076ae:	b2ad      	uxthmi	r5, r5
 80076b0:	6031      	str	r1, [r6, #0]
 80076b2:	07d9      	lsls	r1, r3, #31
 80076b4:	bf44      	itt	mi
 80076b6:	f043 0320 	orrmi.w	r3, r3, #32
 80076ba:	6023      	strmi	r3, [r4, #0]
 80076bc:	b11d      	cbz	r5, 80076c6 <_printf_i+0x19e>
 80076be:	2310      	movs	r3, #16
 80076c0:	e7ac      	b.n	800761c <_printf_i+0xf4>
 80076c2:	4827      	ldr	r0, [pc, #156]	@ (8007760 <_printf_i+0x238>)
 80076c4:	e7e9      	b.n	800769a <_printf_i+0x172>
 80076c6:	6823      	ldr	r3, [r4, #0]
 80076c8:	f023 0320 	bic.w	r3, r3, #32
 80076cc:	6023      	str	r3, [r4, #0]
 80076ce:	e7f6      	b.n	80076be <_printf_i+0x196>
 80076d0:	4616      	mov	r6, r2
 80076d2:	e7bd      	b.n	8007650 <_printf_i+0x128>
 80076d4:	6833      	ldr	r3, [r6, #0]
 80076d6:	6825      	ldr	r5, [r4, #0]
 80076d8:	6961      	ldr	r1, [r4, #20]
 80076da:	1d18      	adds	r0, r3, #4
 80076dc:	6030      	str	r0, [r6, #0]
 80076de:	062e      	lsls	r6, r5, #24
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	d501      	bpl.n	80076e8 <_printf_i+0x1c0>
 80076e4:	6019      	str	r1, [r3, #0]
 80076e6:	e002      	b.n	80076ee <_printf_i+0x1c6>
 80076e8:	0668      	lsls	r0, r5, #25
 80076ea:	d5fb      	bpl.n	80076e4 <_printf_i+0x1bc>
 80076ec:	8019      	strh	r1, [r3, #0]
 80076ee:	2300      	movs	r3, #0
 80076f0:	6123      	str	r3, [r4, #16]
 80076f2:	4616      	mov	r6, r2
 80076f4:	e7bc      	b.n	8007670 <_printf_i+0x148>
 80076f6:	6833      	ldr	r3, [r6, #0]
 80076f8:	1d1a      	adds	r2, r3, #4
 80076fa:	6032      	str	r2, [r6, #0]
 80076fc:	681e      	ldr	r6, [r3, #0]
 80076fe:	6862      	ldr	r2, [r4, #4]
 8007700:	2100      	movs	r1, #0
 8007702:	4630      	mov	r0, r6
 8007704:	f7f8 fd64 	bl	80001d0 <memchr>
 8007708:	b108      	cbz	r0, 800770e <_printf_i+0x1e6>
 800770a:	1b80      	subs	r0, r0, r6
 800770c:	6060      	str	r0, [r4, #4]
 800770e:	6863      	ldr	r3, [r4, #4]
 8007710:	6123      	str	r3, [r4, #16]
 8007712:	2300      	movs	r3, #0
 8007714:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007718:	e7aa      	b.n	8007670 <_printf_i+0x148>
 800771a:	6923      	ldr	r3, [r4, #16]
 800771c:	4632      	mov	r2, r6
 800771e:	4649      	mov	r1, r9
 8007720:	4640      	mov	r0, r8
 8007722:	47d0      	blx	sl
 8007724:	3001      	adds	r0, #1
 8007726:	d0ad      	beq.n	8007684 <_printf_i+0x15c>
 8007728:	6823      	ldr	r3, [r4, #0]
 800772a:	079b      	lsls	r3, r3, #30
 800772c:	d413      	bmi.n	8007756 <_printf_i+0x22e>
 800772e:	68e0      	ldr	r0, [r4, #12]
 8007730:	9b03      	ldr	r3, [sp, #12]
 8007732:	4298      	cmp	r0, r3
 8007734:	bfb8      	it	lt
 8007736:	4618      	movlt	r0, r3
 8007738:	e7a6      	b.n	8007688 <_printf_i+0x160>
 800773a:	2301      	movs	r3, #1
 800773c:	4632      	mov	r2, r6
 800773e:	4649      	mov	r1, r9
 8007740:	4640      	mov	r0, r8
 8007742:	47d0      	blx	sl
 8007744:	3001      	adds	r0, #1
 8007746:	d09d      	beq.n	8007684 <_printf_i+0x15c>
 8007748:	3501      	adds	r5, #1
 800774a:	68e3      	ldr	r3, [r4, #12]
 800774c:	9903      	ldr	r1, [sp, #12]
 800774e:	1a5b      	subs	r3, r3, r1
 8007750:	42ab      	cmp	r3, r5
 8007752:	dcf2      	bgt.n	800773a <_printf_i+0x212>
 8007754:	e7eb      	b.n	800772e <_printf_i+0x206>
 8007756:	2500      	movs	r5, #0
 8007758:	f104 0619 	add.w	r6, r4, #25
 800775c:	e7f5      	b.n	800774a <_printf_i+0x222>
 800775e:	bf00      	nop
 8007760:	08009d1e 	.word	0x08009d1e
 8007764:	08009d2f 	.word	0x08009d2f

08007768 <std>:
 8007768:	2300      	movs	r3, #0
 800776a:	b510      	push	{r4, lr}
 800776c:	4604      	mov	r4, r0
 800776e:	e9c0 3300 	strd	r3, r3, [r0]
 8007772:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007776:	6083      	str	r3, [r0, #8]
 8007778:	8181      	strh	r1, [r0, #12]
 800777a:	6643      	str	r3, [r0, #100]	@ 0x64
 800777c:	81c2      	strh	r2, [r0, #14]
 800777e:	6183      	str	r3, [r0, #24]
 8007780:	4619      	mov	r1, r3
 8007782:	2208      	movs	r2, #8
 8007784:	305c      	adds	r0, #92	@ 0x5c
 8007786:	f000 f914 	bl	80079b2 <memset>
 800778a:	4b0d      	ldr	r3, [pc, #52]	@ (80077c0 <std+0x58>)
 800778c:	6263      	str	r3, [r4, #36]	@ 0x24
 800778e:	4b0d      	ldr	r3, [pc, #52]	@ (80077c4 <std+0x5c>)
 8007790:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007792:	4b0d      	ldr	r3, [pc, #52]	@ (80077c8 <std+0x60>)
 8007794:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007796:	4b0d      	ldr	r3, [pc, #52]	@ (80077cc <std+0x64>)
 8007798:	6323      	str	r3, [r4, #48]	@ 0x30
 800779a:	4b0d      	ldr	r3, [pc, #52]	@ (80077d0 <std+0x68>)
 800779c:	6224      	str	r4, [r4, #32]
 800779e:	429c      	cmp	r4, r3
 80077a0:	d006      	beq.n	80077b0 <std+0x48>
 80077a2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80077a6:	4294      	cmp	r4, r2
 80077a8:	d002      	beq.n	80077b0 <std+0x48>
 80077aa:	33d0      	adds	r3, #208	@ 0xd0
 80077ac:	429c      	cmp	r4, r3
 80077ae:	d105      	bne.n	80077bc <std+0x54>
 80077b0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80077b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80077b8:	f000 b9ce 	b.w	8007b58 <__retarget_lock_init_recursive>
 80077bc:	bd10      	pop	{r4, pc}
 80077be:	bf00      	nop
 80077c0:	0800792d 	.word	0x0800792d
 80077c4:	0800794f 	.word	0x0800794f
 80077c8:	08007987 	.word	0x08007987
 80077cc:	080079ab 	.word	0x080079ab
 80077d0:	20004340 	.word	0x20004340

080077d4 <stdio_exit_handler>:
 80077d4:	4a02      	ldr	r2, [pc, #8]	@ (80077e0 <stdio_exit_handler+0xc>)
 80077d6:	4903      	ldr	r1, [pc, #12]	@ (80077e4 <stdio_exit_handler+0x10>)
 80077d8:	4803      	ldr	r0, [pc, #12]	@ (80077e8 <stdio_exit_handler+0x14>)
 80077da:	f000 b869 	b.w	80078b0 <_fwalk_sglue>
 80077de:	bf00      	nop
 80077e0:	20000010 	.word	0x20000010
 80077e4:	080094d5 	.word	0x080094d5
 80077e8:	20000020 	.word	0x20000020

080077ec <cleanup_stdio>:
 80077ec:	6841      	ldr	r1, [r0, #4]
 80077ee:	4b0c      	ldr	r3, [pc, #48]	@ (8007820 <cleanup_stdio+0x34>)
 80077f0:	4299      	cmp	r1, r3
 80077f2:	b510      	push	{r4, lr}
 80077f4:	4604      	mov	r4, r0
 80077f6:	d001      	beq.n	80077fc <cleanup_stdio+0x10>
 80077f8:	f001 fe6c 	bl	80094d4 <_fflush_r>
 80077fc:	68a1      	ldr	r1, [r4, #8]
 80077fe:	4b09      	ldr	r3, [pc, #36]	@ (8007824 <cleanup_stdio+0x38>)
 8007800:	4299      	cmp	r1, r3
 8007802:	d002      	beq.n	800780a <cleanup_stdio+0x1e>
 8007804:	4620      	mov	r0, r4
 8007806:	f001 fe65 	bl	80094d4 <_fflush_r>
 800780a:	68e1      	ldr	r1, [r4, #12]
 800780c:	4b06      	ldr	r3, [pc, #24]	@ (8007828 <cleanup_stdio+0x3c>)
 800780e:	4299      	cmp	r1, r3
 8007810:	d004      	beq.n	800781c <cleanup_stdio+0x30>
 8007812:	4620      	mov	r0, r4
 8007814:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007818:	f001 be5c 	b.w	80094d4 <_fflush_r>
 800781c:	bd10      	pop	{r4, pc}
 800781e:	bf00      	nop
 8007820:	20004340 	.word	0x20004340
 8007824:	200043a8 	.word	0x200043a8
 8007828:	20004410 	.word	0x20004410

0800782c <global_stdio_init.part.0>:
 800782c:	b510      	push	{r4, lr}
 800782e:	4b0b      	ldr	r3, [pc, #44]	@ (800785c <global_stdio_init.part.0+0x30>)
 8007830:	4c0b      	ldr	r4, [pc, #44]	@ (8007860 <global_stdio_init.part.0+0x34>)
 8007832:	4a0c      	ldr	r2, [pc, #48]	@ (8007864 <global_stdio_init.part.0+0x38>)
 8007834:	601a      	str	r2, [r3, #0]
 8007836:	4620      	mov	r0, r4
 8007838:	2200      	movs	r2, #0
 800783a:	2104      	movs	r1, #4
 800783c:	f7ff ff94 	bl	8007768 <std>
 8007840:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007844:	2201      	movs	r2, #1
 8007846:	2109      	movs	r1, #9
 8007848:	f7ff ff8e 	bl	8007768 <std>
 800784c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007850:	2202      	movs	r2, #2
 8007852:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007856:	2112      	movs	r1, #18
 8007858:	f7ff bf86 	b.w	8007768 <std>
 800785c:	20004478 	.word	0x20004478
 8007860:	20004340 	.word	0x20004340
 8007864:	080077d5 	.word	0x080077d5

08007868 <__sfp_lock_acquire>:
 8007868:	4801      	ldr	r0, [pc, #4]	@ (8007870 <__sfp_lock_acquire+0x8>)
 800786a:	f000 b976 	b.w	8007b5a <__retarget_lock_acquire_recursive>
 800786e:	bf00      	nop
 8007870:	20004481 	.word	0x20004481

08007874 <__sfp_lock_release>:
 8007874:	4801      	ldr	r0, [pc, #4]	@ (800787c <__sfp_lock_release+0x8>)
 8007876:	f000 b971 	b.w	8007b5c <__retarget_lock_release_recursive>
 800787a:	bf00      	nop
 800787c:	20004481 	.word	0x20004481

08007880 <__sinit>:
 8007880:	b510      	push	{r4, lr}
 8007882:	4604      	mov	r4, r0
 8007884:	f7ff fff0 	bl	8007868 <__sfp_lock_acquire>
 8007888:	6a23      	ldr	r3, [r4, #32]
 800788a:	b11b      	cbz	r3, 8007894 <__sinit+0x14>
 800788c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007890:	f7ff bff0 	b.w	8007874 <__sfp_lock_release>
 8007894:	4b04      	ldr	r3, [pc, #16]	@ (80078a8 <__sinit+0x28>)
 8007896:	6223      	str	r3, [r4, #32]
 8007898:	4b04      	ldr	r3, [pc, #16]	@ (80078ac <__sinit+0x2c>)
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d1f5      	bne.n	800788c <__sinit+0xc>
 80078a0:	f7ff ffc4 	bl	800782c <global_stdio_init.part.0>
 80078a4:	e7f2      	b.n	800788c <__sinit+0xc>
 80078a6:	bf00      	nop
 80078a8:	080077ed 	.word	0x080077ed
 80078ac:	20004478 	.word	0x20004478

080078b0 <_fwalk_sglue>:
 80078b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80078b4:	4607      	mov	r7, r0
 80078b6:	4688      	mov	r8, r1
 80078b8:	4614      	mov	r4, r2
 80078ba:	2600      	movs	r6, #0
 80078bc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80078c0:	f1b9 0901 	subs.w	r9, r9, #1
 80078c4:	d505      	bpl.n	80078d2 <_fwalk_sglue+0x22>
 80078c6:	6824      	ldr	r4, [r4, #0]
 80078c8:	2c00      	cmp	r4, #0
 80078ca:	d1f7      	bne.n	80078bc <_fwalk_sglue+0xc>
 80078cc:	4630      	mov	r0, r6
 80078ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80078d2:	89ab      	ldrh	r3, [r5, #12]
 80078d4:	2b01      	cmp	r3, #1
 80078d6:	d907      	bls.n	80078e8 <_fwalk_sglue+0x38>
 80078d8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80078dc:	3301      	adds	r3, #1
 80078de:	d003      	beq.n	80078e8 <_fwalk_sglue+0x38>
 80078e0:	4629      	mov	r1, r5
 80078e2:	4638      	mov	r0, r7
 80078e4:	47c0      	blx	r8
 80078e6:	4306      	orrs	r6, r0
 80078e8:	3568      	adds	r5, #104	@ 0x68
 80078ea:	e7e9      	b.n	80078c0 <_fwalk_sglue+0x10>

080078ec <siprintf>:
 80078ec:	b40e      	push	{r1, r2, r3}
 80078ee:	b500      	push	{lr}
 80078f0:	b09c      	sub	sp, #112	@ 0x70
 80078f2:	ab1d      	add	r3, sp, #116	@ 0x74
 80078f4:	9002      	str	r0, [sp, #8]
 80078f6:	9006      	str	r0, [sp, #24]
 80078f8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80078fc:	4809      	ldr	r0, [pc, #36]	@ (8007924 <siprintf+0x38>)
 80078fe:	9107      	str	r1, [sp, #28]
 8007900:	9104      	str	r1, [sp, #16]
 8007902:	4909      	ldr	r1, [pc, #36]	@ (8007928 <siprintf+0x3c>)
 8007904:	f853 2b04 	ldr.w	r2, [r3], #4
 8007908:	9105      	str	r1, [sp, #20]
 800790a:	6800      	ldr	r0, [r0, #0]
 800790c:	9301      	str	r3, [sp, #4]
 800790e:	a902      	add	r1, sp, #8
 8007910:	f001 fc60 	bl	80091d4 <_svfiprintf_r>
 8007914:	9b02      	ldr	r3, [sp, #8]
 8007916:	2200      	movs	r2, #0
 8007918:	701a      	strb	r2, [r3, #0]
 800791a:	b01c      	add	sp, #112	@ 0x70
 800791c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007920:	b003      	add	sp, #12
 8007922:	4770      	bx	lr
 8007924:	2000001c 	.word	0x2000001c
 8007928:	ffff0208 	.word	0xffff0208

0800792c <__sread>:
 800792c:	b510      	push	{r4, lr}
 800792e:	460c      	mov	r4, r1
 8007930:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007934:	f000 f8c2 	bl	8007abc <_read_r>
 8007938:	2800      	cmp	r0, #0
 800793a:	bfab      	itete	ge
 800793c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800793e:	89a3      	ldrhlt	r3, [r4, #12]
 8007940:	181b      	addge	r3, r3, r0
 8007942:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007946:	bfac      	ite	ge
 8007948:	6563      	strge	r3, [r4, #84]	@ 0x54
 800794a:	81a3      	strhlt	r3, [r4, #12]
 800794c:	bd10      	pop	{r4, pc}

0800794e <__swrite>:
 800794e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007952:	461f      	mov	r7, r3
 8007954:	898b      	ldrh	r3, [r1, #12]
 8007956:	05db      	lsls	r3, r3, #23
 8007958:	4605      	mov	r5, r0
 800795a:	460c      	mov	r4, r1
 800795c:	4616      	mov	r6, r2
 800795e:	d505      	bpl.n	800796c <__swrite+0x1e>
 8007960:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007964:	2302      	movs	r3, #2
 8007966:	2200      	movs	r2, #0
 8007968:	f000 f896 	bl	8007a98 <_lseek_r>
 800796c:	89a3      	ldrh	r3, [r4, #12]
 800796e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007972:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007976:	81a3      	strh	r3, [r4, #12]
 8007978:	4632      	mov	r2, r6
 800797a:	463b      	mov	r3, r7
 800797c:	4628      	mov	r0, r5
 800797e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007982:	f000 b8ad 	b.w	8007ae0 <_write_r>

08007986 <__sseek>:
 8007986:	b510      	push	{r4, lr}
 8007988:	460c      	mov	r4, r1
 800798a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800798e:	f000 f883 	bl	8007a98 <_lseek_r>
 8007992:	1c43      	adds	r3, r0, #1
 8007994:	89a3      	ldrh	r3, [r4, #12]
 8007996:	bf15      	itete	ne
 8007998:	6560      	strne	r0, [r4, #84]	@ 0x54
 800799a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800799e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80079a2:	81a3      	strheq	r3, [r4, #12]
 80079a4:	bf18      	it	ne
 80079a6:	81a3      	strhne	r3, [r4, #12]
 80079a8:	bd10      	pop	{r4, pc}

080079aa <__sclose>:
 80079aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079ae:	f000 b80d 	b.w	80079cc <_close_r>

080079b2 <memset>:
 80079b2:	4402      	add	r2, r0
 80079b4:	4603      	mov	r3, r0
 80079b6:	4293      	cmp	r3, r2
 80079b8:	d100      	bne.n	80079bc <memset+0xa>
 80079ba:	4770      	bx	lr
 80079bc:	f803 1b01 	strb.w	r1, [r3], #1
 80079c0:	e7f9      	b.n	80079b6 <memset+0x4>
	...

080079c4 <_localeconv_r>:
 80079c4:	4800      	ldr	r0, [pc, #0]	@ (80079c8 <_localeconv_r+0x4>)
 80079c6:	4770      	bx	lr
 80079c8:	2000015c 	.word	0x2000015c

080079cc <_close_r>:
 80079cc:	b538      	push	{r3, r4, r5, lr}
 80079ce:	4d06      	ldr	r5, [pc, #24]	@ (80079e8 <_close_r+0x1c>)
 80079d0:	2300      	movs	r3, #0
 80079d2:	4604      	mov	r4, r0
 80079d4:	4608      	mov	r0, r1
 80079d6:	602b      	str	r3, [r5, #0]
 80079d8:	f7fa fa90 	bl	8001efc <_close>
 80079dc:	1c43      	adds	r3, r0, #1
 80079de:	d102      	bne.n	80079e6 <_close_r+0x1a>
 80079e0:	682b      	ldr	r3, [r5, #0]
 80079e2:	b103      	cbz	r3, 80079e6 <_close_r+0x1a>
 80079e4:	6023      	str	r3, [r4, #0]
 80079e6:	bd38      	pop	{r3, r4, r5, pc}
 80079e8:	2000447c 	.word	0x2000447c

080079ec <_reclaim_reent>:
 80079ec:	4b29      	ldr	r3, [pc, #164]	@ (8007a94 <_reclaim_reent+0xa8>)
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	4283      	cmp	r3, r0
 80079f2:	b570      	push	{r4, r5, r6, lr}
 80079f4:	4604      	mov	r4, r0
 80079f6:	d04b      	beq.n	8007a90 <_reclaim_reent+0xa4>
 80079f8:	69c3      	ldr	r3, [r0, #28]
 80079fa:	b1ab      	cbz	r3, 8007a28 <_reclaim_reent+0x3c>
 80079fc:	68db      	ldr	r3, [r3, #12]
 80079fe:	b16b      	cbz	r3, 8007a1c <_reclaim_reent+0x30>
 8007a00:	2500      	movs	r5, #0
 8007a02:	69e3      	ldr	r3, [r4, #28]
 8007a04:	68db      	ldr	r3, [r3, #12]
 8007a06:	5959      	ldr	r1, [r3, r5]
 8007a08:	2900      	cmp	r1, #0
 8007a0a:	d13b      	bne.n	8007a84 <_reclaim_reent+0x98>
 8007a0c:	3504      	adds	r5, #4
 8007a0e:	2d80      	cmp	r5, #128	@ 0x80
 8007a10:	d1f7      	bne.n	8007a02 <_reclaim_reent+0x16>
 8007a12:	69e3      	ldr	r3, [r4, #28]
 8007a14:	4620      	mov	r0, r4
 8007a16:	68d9      	ldr	r1, [r3, #12]
 8007a18:	f000 fefe 	bl	8008818 <_free_r>
 8007a1c:	69e3      	ldr	r3, [r4, #28]
 8007a1e:	6819      	ldr	r1, [r3, #0]
 8007a20:	b111      	cbz	r1, 8007a28 <_reclaim_reent+0x3c>
 8007a22:	4620      	mov	r0, r4
 8007a24:	f000 fef8 	bl	8008818 <_free_r>
 8007a28:	6961      	ldr	r1, [r4, #20]
 8007a2a:	b111      	cbz	r1, 8007a32 <_reclaim_reent+0x46>
 8007a2c:	4620      	mov	r0, r4
 8007a2e:	f000 fef3 	bl	8008818 <_free_r>
 8007a32:	69e1      	ldr	r1, [r4, #28]
 8007a34:	b111      	cbz	r1, 8007a3c <_reclaim_reent+0x50>
 8007a36:	4620      	mov	r0, r4
 8007a38:	f000 feee 	bl	8008818 <_free_r>
 8007a3c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8007a3e:	b111      	cbz	r1, 8007a46 <_reclaim_reent+0x5a>
 8007a40:	4620      	mov	r0, r4
 8007a42:	f000 fee9 	bl	8008818 <_free_r>
 8007a46:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007a48:	b111      	cbz	r1, 8007a50 <_reclaim_reent+0x64>
 8007a4a:	4620      	mov	r0, r4
 8007a4c:	f000 fee4 	bl	8008818 <_free_r>
 8007a50:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8007a52:	b111      	cbz	r1, 8007a5a <_reclaim_reent+0x6e>
 8007a54:	4620      	mov	r0, r4
 8007a56:	f000 fedf 	bl	8008818 <_free_r>
 8007a5a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8007a5c:	b111      	cbz	r1, 8007a64 <_reclaim_reent+0x78>
 8007a5e:	4620      	mov	r0, r4
 8007a60:	f000 feda 	bl	8008818 <_free_r>
 8007a64:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8007a66:	b111      	cbz	r1, 8007a6e <_reclaim_reent+0x82>
 8007a68:	4620      	mov	r0, r4
 8007a6a:	f000 fed5 	bl	8008818 <_free_r>
 8007a6e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8007a70:	b111      	cbz	r1, 8007a78 <_reclaim_reent+0x8c>
 8007a72:	4620      	mov	r0, r4
 8007a74:	f000 fed0 	bl	8008818 <_free_r>
 8007a78:	6a23      	ldr	r3, [r4, #32]
 8007a7a:	b14b      	cbz	r3, 8007a90 <_reclaim_reent+0xa4>
 8007a7c:	4620      	mov	r0, r4
 8007a7e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007a82:	4718      	bx	r3
 8007a84:	680e      	ldr	r6, [r1, #0]
 8007a86:	4620      	mov	r0, r4
 8007a88:	f000 fec6 	bl	8008818 <_free_r>
 8007a8c:	4631      	mov	r1, r6
 8007a8e:	e7bb      	b.n	8007a08 <_reclaim_reent+0x1c>
 8007a90:	bd70      	pop	{r4, r5, r6, pc}
 8007a92:	bf00      	nop
 8007a94:	2000001c 	.word	0x2000001c

08007a98 <_lseek_r>:
 8007a98:	b538      	push	{r3, r4, r5, lr}
 8007a9a:	4d07      	ldr	r5, [pc, #28]	@ (8007ab8 <_lseek_r+0x20>)
 8007a9c:	4604      	mov	r4, r0
 8007a9e:	4608      	mov	r0, r1
 8007aa0:	4611      	mov	r1, r2
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	602a      	str	r2, [r5, #0]
 8007aa6:	461a      	mov	r2, r3
 8007aa8:	f7fa fa4f 	bl	8001f4a <_lseek>
 8007aac:	1c43      	adds	r3, r0, #1
 8007aae:	d102      	bne.n	8007ab6 <_lseek_r+0x1e>
 8007ab0:	682b      	ldr	r3, [r5, #0]
 8007ab2:	b103      	cbz	r3, 8007ab6 <_lseek_r+0x1e>
 8007ab4:	6023      	str	r3, [r4, #0]
 8007ab6:	bd38      	pop	{r3, r4, r5, pc}
 8007ab8:	2000447c 	.word	0x2000447c

08007abc <_read_r>:
 8007abc:	b538      	push	{r3, r4, r5, lr}
 8007abe:	4d07      	ldr	r5, [pc, #28]	@ (8007adc <_read_r+0x20>)
 8007ac0:	4604      	mov	r4, r0
 8007ac2:	4608      	mov	r0, r1
 8007ac4:	4611      	mov	r1, r2
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	602a      	str	r2, [r5, #0]
 8007aca:	461a      	mov	r2, r3
 8007acc:	f7fa f9dd 	bl	8001e8a <_read>
 8007ad0:	1c43      	adds	r3, r0, #1
 8007ad2:	d102      	bne.n	8007ada <_read_r+0x1e>
 8007ad4:	682b      	ldr	r3, [r5, #0]
 8007ad6:	b103      	cbz	r3, 8007ada <_read_r+0x1e>
 8007ad8:	6023      	str	r3, [r4, #0]
 8007ada:	bd38      	pop	{r3, r4, r5, pc}
 8007adc:	2000447c 	.word	0x2000447c

08007ae0 <_write_r>:
 8007ae0:	b538      	push	{r3, r4, r5, lr}
 8007ae2:	4d07      	ldr	r5, [pc, #28]	@ (8007b00 <_write_r+0x20>)
 8007ae4:	4604      	mov	r4, r0
 8007ae6:	4608      	mov	r0, r1
 8007ae8:	4611      	mov	r1, r2
 8007aea:	2200      	movs	r2, #0
 8007aec:	602a      	str	r2, [r5, #0]
 8007aee:	461a      	mov	r2, r3
 8007af0:	f7fa f9e8 	bl	8001ec4 <_write>
 8007af4:	1c43      	adds	r3, r0, #1
 8007af6:	d102      	bne.n	8007afe <_write_r+0x1e>
 8007af8:	682b      	ldr	r3, [r5, #0]
 8007afa:	b103      	cbz	r3, 8007afe <_write_r+0x1e>
 8007afc:	6023      	str	r3, [r4, #0]
 8007afe:	bd38      	pop	{r3, r4, r5, pc}
 8007b00:	2000447c 	.word	0x2000447c

08007b04 <__errno>:
 8007b04:	4b01      	ldr	r3, [pc, #4]	@ (8007b0c <__errno+0x8>)
 8007b06:	6818      	ldr	r0, [r3, #0]
 8007b08:	4770      	bx	lr
 8007b0a:	bf00      	nop
 8007b0c:	2000001c 	.word	0x2000001c

08007b10 <__libc_init_array>:
 8007b10:	b570      	push	{r4, r5, r6, lr}
 8007b12:	4d0d      	ldr	r5, [pc, #52]	@ (8007b48 <__libc_init_array+0x38>)
 8007b14:	4c0d      	ldr	r4, [pc, #52]	@ (8007b4c <__libc_init_array+0x3c>)
 8007b16:	1b64      	subs	r4, r4, r5
 8007b18:	10a4      	asrs	r4, r4, #2
 8007b1a:	2600      	movs	r6, #0
 8007b1c:	42a6      	cmp	r6, r4
 8007b1e:	d109      	bne.n	8007b34 <__libc_init_array+0x24>
 8007b20:	4d0b      	ldr	r5, [pc, #44]	@ (8007b50 <__libc_init_array+0x40>)
 8007b22:	4c0c      	ldr	r4, [pc, #48]	@ (8007b54 <__libc_init_array+0x44>)
 8007b24:	f002 f866 	bl	8009bf4 <_init>
 8007b28:	1b64      	subs	r4, r4, r5
 8007b2a:	10a4      	asrs	r4, r4, #2
 8007b2c:	2600      	movs	r6, #0
 8007b2e:	42a6      	cmp	r6, r4
 8007b30:	d105      	bne.n	8007b3e <__libc_init_array+0x2e>
 8007b32:	bd70      	pop	{r4, r5, r6, pc}
 8007b34:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b38:	4798      	blx	r3
 8007b3a:	3601      	adds	r6, #1
 8007b3c:	e7ee      	b.n	8007b1c <__libc_init_array+0xc>
 8007b3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b42:	4798      	blx	r3
 8007b44:	3601      	adds	r6, #1
 8007b46:	e7f2      	b.n	8007b2e <__libc_init_array+0x1e>
 8007b48:	0800a088 	.word	0x0800a088
 8007b4c:	0800a088 	.word	0x0800a088
 8007b50:	0800a088 	.word	0x0800a088
 8007b54:	0800a08c 	.word	0x0800a08c

08007b58 <__retarget_lock_init_recursive>:
 8007b58:	4770      	bx	lr

08007b5a <__retarget_lock_acquire_recursive>:
 8007b5a:	4770      	bx	lr

08007b5c <__retarget_lock_release_recursive>:
 8007b5c:	4770      	bx	lr

08007b5e <memcpy>:
 8007b5e:	440a      	add	r2, r1
 8007b60:	4291      	cmp	r1, r2
 8007b62:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8007b66:	d100      	bne.n	8007b6a <memcpy+0xc>
 8007b68:	4770      	bx	lr
 8007b6a:	b510      	push	{r4, lr}
 8007b6c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b70:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007b74:	4291      	cmp	r1, r2
 8007b76:	d1f9      	bne.n	8007b6c <memcpy+0xe>
 8007b78:	bd10      	pop	{r4, pc}

08007b7a <quorem>:
 8007b7a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b7e:	6903      	ldr	r3, [r0, #16]
 8007b80:	690c      	ldr	r4, [r1, #16]
 8007b82:	42a3      	cmp	r3, r4
 8007b84:	4607      	mov	r7, r0
 8007b86:	db7e      	blt.n	8007c86 <quorem+0x10c>
 8007b88:	3c01      	subs	r4, #1
 8007b8a:	f101 0814 	add.w	r8, r1, #20
 8007b8e:	00a3      	lsls	r3, r4, #2
 8007b90:	f100 0514 	add.w	r5, r0, #20
 8007b94:	9300      	str	r3, [sp, #0]
 8007b96:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007b9a:	9301      	str	r3, [sp, #4]
 8007b9c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007ba0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007ba4:	3301      	adds	r3, #1
 8007ba6:	429a      	cmp	r2, r3
 8007ba8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007bac:	fbb2 f6f3 	udiv	r6, r2, r3
 8007bb0:	d32e      	bcc.n	8007c10 <quorem+0x96>
 8007bb2:	f04f 0a00 	mov.w	sl, #0
 8007bb6:	46c4      	mov	ip, r8
 8007bb8:	46ae      	mov	lr, r5
 8007bba:	46d3      	mov	fp, sl
 8007bbc:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007bc0:	b298      	uxth	r0, r3
 8007bc2:	fb06 a000 	mla	r0, r6, r0, sl
 8007bc6:	0c02      	lsrs	r2, r0, #16
 8007bc8:	0c1b      	lsrs	r3, r3, #16
 8007bca:	fb06 2303 	mla	r3, r6, r3, r2
 8007bce:	f8de 2000 	ldr.w	r2, [lr]
 8007bd2:	b280      	uxth	r0, r0
 8007bd4:	b292      	uxth	r2, r2
 8007bd6:	1a12      	subs	r2, r2, r0
 8007bd8:	445a      	add	r2, fp
 8007bda:	f8de 0000 	ldr.w	r0, [lr]
 8007bde:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007be2:	b29b      	uxth	r3, r3
 8007be4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007be8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007bec:	b292      	uxth	r2, r2
 8007bee:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007bf2:	45e1      	cmp	r9, ip
 8007bf4:	f84e 2b04 	str.w	r2, [lr], #4
 8007bf8:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007bfc:	d2de      	bcs.n	8007bbc <quorem+0x42>
 8007bfe:	9b00      	ldr	r3, [sp, #0]
 8007c00:	58eb      	ldr	r3, [r5, r3]
 8007c02:	b92b      	cbnz	r3, 8007c10 <quorem+0x96>
 8007c04:	9b01      	ldr	r3, [sp, #4]
 8007c06:	3b04      	subs	r3, #4
 8007c08:	429d      	cmp	r5, r3
 8007c0a:	461a      	mov	r2, r3
 8007c0c:	d32f      	bcc.n	8007c6e <quorem+0xf4>
 8007c0e:	613c      	str	r4, [r7, #16]
 8007c10:	4638      	mov	r0, r7
 8007c12:	f001 f97b 	bl	8008f0c <__mcmp>
 8007c16:	2800      	cmp	r0, #0
 8007c18:	db25      	blt.n	8007c66 <quorem+0xec>
 8007c1a:	4629      	mov	r1, r5
 8007c1c:	2000      	movs	r0, #0
 8007c1e:	f858 2b04 	ldr.w	r2, [r8], #4
 8007c22:	f8d1 c000 	ldr.w	ip, [r1]
 8007c26:	fa1f fe82 	uxth.w	lr, r2
 8007c2a:	fa1f f38c 	uxth.w	r3, ip
 8007c2e:	eba3 030e 	sub.w	r3, r3, lr
 8007c32:	4403      	add	r3, r0
 8007c34:	0c12      	lsrs	r2, r2, #16
 8007c36:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007c3a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007c3e:	b29b      	uxth	r3, r3
 8007c40:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007c44:	45c1      	cmp	r9, r8
 8007c46:	f841 3b04 	str.w	r3, [r1], #4
 8007c4a:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007c4e:	d2e6      	bcs.n	8007c1e <quorem+0xa4>
 8007c50:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007c54:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007c58:	b922      	cbnz	r2, 8007c64 <quorem+0xea>
 8007c5a:	3b04      	subs	r3, #4
 8007c5c:	429d      	cmp	r5, r3
 8007c5e:	461a      	mov	r2, r3
 8007c60:	d30b      	bcc.n	8007c7a <quorem+0x100>
 8007c62:	613c      	str	r4, [r7, #16]
 8007c64:	3601      	adds	r6, #1
 8007c66:	4630      	mov	r0, r6
 8007c68:	b003      	add	sp, #12
 8007c6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c6e:	6812      	ldr	r2, [r2, #0]
 8007c70:	3b04      	subs	r3, #4
 8007c72:	2a00      	cmp	r2, #0
 8007c74:	d1cb      	bne.n	8007c0e <quorem+0x94>
 8007c76:	3c01      	subs	r4, #1
 8007c78:	e7c6      	b.n	8007c08 <quorem+0x8e>
 8007c7a:	6812      	ldr	r2, [r2, #0]
 8007c7c:	3b04      	subs	r3, #4
 8007c7e:	2a00      	cmp	r2, #0
 8007c80:	d1ef      	bne.n	8007c62 <quorem+0xe8>
 8007c82:	3c01      	subs	r4, #1
 8007c84:	e7ea      	b.n	8007c5c <quorem+0xe2>
 8007c86:	2000      	movs	r0, #0
 8007c88:	e7ee      	b.n	8007c68 <quorem+0xee>
 8007c8a:	0000      	movs	r0, r0
 8007c8c:	0000      	movs	r0, r0
	...

08007c90 <_dtoa_r>:
 8007c90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c94:	69c7      	ldr	r7, [r0, #28]
 8007c96:	b099      	sub	sp, #100	@ 0x64
 8007c98:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007c9c:	ec55 4b10 	vmov	r4, r5, d0
 8007ca0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8007ca2:	9109      	str	r1, [sp, #36]	@ 0x24
 8007ca4:	4683      	mov	fp, r0
 8007ca6:	920e      	str	r2, [sp, #56]	@ 0x38
 8007ca8:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007caa:	b97f      	cbnz	r7, 8007ccc <_dtoa_r+0x3c>
 8007cac:	2010      	movs	r0, #16
 8007cae:	f000 fdfd 	bl	80088ac <malloc>
 8007cb2:	4602      	mov	r2, r0
 8007cb4:	f8cb 001c 	str.w	r0, [fp, #28]
 8007cb8:	b920      	cbnz	r0, 8007cc4 <_dtoa_r+0x34>
 8007cba:	4ba7      	ldr	r3, [pc, #668]	@ (8007f58 <_dtoa_r+0x2c8>)
 8007cbc:	21ef      	movs	r1, #239	@ 0xef
 8007cbe:	48a7      	ldr	r0, [pc, #668]	@ (8007f5c <_dtoa_r+0x2cc>)
 8007cc0:	f001 fc5a 	bl	8009578 <__assert_func>
 8007cc4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007cc8:	6007      	str	r7, [r0, #0]
 8007cca:	60c7      	str	r7, [r0, #12]
 8007ccc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007cd0:	6819      	ldr	r1, [r3, #0]
 8007cd2:	b159      	cbz	r1, 8007cec <_dtoa_r+0x5c>
 8007cd4:	685a      	ldr	r2, [r3, #4]
 8007cd6:	604a      	str	r2, [r1, #4]
 8007cd8:	2301      	movs	r3, #1
 8007cda:	4093      	lsls	r3, r2
 8007cdc:	608b      	str	r3, [r1, #8]
 8007cde:	4658      	mov	r0, fp
 8007ce0:	f000 feda 	bl	8008a98 <_Bfree>
 8007ce4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007ce8:	2200      	movs	r2, #0
 8007cea:	601a      	str	r2, [r3, #0]
 8007cec:	1e2b      	subs	r3, r5, #0
 8007cee:	bfb9      	ittee	lt
 8007cf0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007cf4:	9303      	strlt	r3, [sp, #12]
 8007cf6:	2300      	movge	r3, #0
 8007cf8:	6033      	strge	r3, [r6, #0]
 8007cfa:	9f03      	ldr	r7, [sp, #12]
 8007cfc:	4b98      	ldr	r3, [pc, #608]	@ (8007f60 <_dtoa_r+0x2d0>)
 8007cfe:	bfbc      	itt	lt
 8007d00:	2201      	movlt	r2, #1
 8007d02:	6032      	strlt	r2, [r6, #0]
 8007d04:	43bb      	bics	r3, r7
 8007d06:	d112      	bne.n	8007d2e <_dtoa_r+0x9e>
 8007d08:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007d0a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007d0e:	6013      	str	r3, [r2, #0]
 8007d10:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007d14:	4323      	orrs	r3, r4
 8007d16:	f000 854d 	beq.w	80087b4 <_dtoa_r+0xb24>
 8007d1a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007d1c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8007f74 <_dtoa_r+0x2e4>
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	f000 854f 	beq.w	80087c4 <_dtoa_r+0xb34>
 8007d26:	f10a 0303 	add.w	r3, sl, #3
 8007d2a:	f000 bd49 	b.w	80087c0 <_dtoa_r+0xb30>
 8007d2e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007d32:	2200      	movs	r2, #0
 8007d34:	ec51 0b17 	vmov	r0, r1, d7
 8007d38:	2300      	movs	r3, #0
 8007d3a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8007d3e:	f7f8 fec3 	bl	8000ac8 <__aeabi_dcmpeq>
 8007d42:	4680      	mov	r8, r0
 8007d44:	b158      	cbz	r0, 8007d5e <_dtoa_r+0xce>
 8007d46:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007d48:	2301      	movs	r3, #1
 8007d4a:	6013      	str	r3, [r2, #0]
 8007d4c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007d4e:	b113      	cbz	r3, 8007d56 <_dtoa_r+0xc6>
 8007d50:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007d52:	4b84      	ldr	r3, [pc, #528]	@ (8007f64 <_dtoa_r+0x2d4>)
 8007d54:	6013      	str	r3, [r2, #0]
 8007d56:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8007f78 <_dtoa_r+0x2e8>
 8007d5a:	f000 bd33 	b.w	80087c4 <_dtoa_r+0xb34>
 8007d5e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8007d62:	aa16      	add	r2, sp, #88	@ 0x58
 8007d64:	a917      	add	r1, sp, #92	@ 0x5c
 8007d66:	4658      	mov	r0, fp
 8007d68:	f001 f980 	bl	800906c <__d2b>
 8007d6c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007d70:	4681      	mov	r9, r0
 8007d72:	2e00      	cmp	r6, #0
 8007d74:	d077      	beq.n	8007e66 <_dtoa_r+0x1d6>
 8007d76:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007d78:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8007d7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007d80:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007d84:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007d88:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007d8c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007d90:	4619      	mov	r1, r3
 8007d92:	2200      	movs	r2, #0
 8007d94:	4b74      	ldr	r3, [pc, #464]	@ (8007f68 <_dtoa_r+0x2d8>)
 8007d96:	f7f8 fa77 	bl	8000288 <__aeabi_dsub>
 8007d9a:	a369      	add	r3, pc, #420	@ (adr r3, 8007f40 <_dtoa_r+0x2b0>)
 8007d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007da0:	f7f8 fc2a 	bl	80005f8 <__aeabi_dmul>
 8007da4:	a368      	add	r3, pc, #416	@ (adr r3, 8007f48 <_dtoa_r+0x2b8>)
 8007da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007daa:	f7f8 fa6f 	bl	800028c <__adddf3>
 8007dae:	4604      	mov	r4, r0
 8007db0:	4630      	mov	r0, r6
 8007db2:	460d      	mov	r5, r1
 8007db4:	f7f8 fbb6 	bl	8000524 <__aeabi_i2d>
 8007db8:	a365      	add	r3, pc, #404	@ (adr r3, 8007f50 <_dtoa_r+0x2c0>)
 8007dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dbe:	f7f8 fc1b 	bl	80005f8 <__aeabi_dmul>
 8007dc2:	4602      	mov	r2, r0
 8007dc4:	460b      	mov	r3, r1
 8007dc6:	4620      	mov	r0, r4
 8007dc8:	4629      	mov	r1, r5
 8007dca:	f7f8 fa5f 	bl	800028c <__adddf3>
 8007dce:	4604      	mov	r4, r0
 8007dd0:	460d      	mov	r5, r1
 8007dd2:	f7f8 fec1 	bl	8000b58 <__aeabi_d2iz>
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	4607      	mov	r7, r0
 8007dda:	2300      	movs	r3, #0
 8007ddc:	4620      	mov	r0, r4
 8007dde:	4629      	mov	r1, r5
 8007de0:	f7f8 fe7c 	bl	8000adc <__aeabi_dcmplt>
 8007de4:	b140      	cbz	r0, 8007df8 <_dtoa_r+0x168>
 8007de6:	4638      	mov	r0, r7
 8007de8:	f7f8 fb9c 	bl	8000524 <__aeabi_i2d>
 8007dec:	4622      	mov	r2, r4
 8007dee:	462b      	mov	r3, r5
 8007df0:	f7f8 fe6a 	bl	8000ac8 <__aeabi_dcmpeq>
 8007df4:	b900      	cbnz	r0, 8007df8 <_dtoa_r+0x168>
 8007df6:	3f01      	subs	r7, #1
 8007df8:	2f16      	cmp	r7, #22
 8007dfa:	d851      	bhi.n	8007ea0 <_dtoa_r+0x210>
 8007dfc:	4b5b      	ldr	r3, [pc, #364]	@ (8007f6c <_dtoa_r+0x2dc>)
 8007dfe:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e06:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007e0a:	f7f8 fe67 	bl	8000adc <__aeabi_dcmplt>
 8007e0e:	2800      	cmp	r0, #0
 8007e10:	d048      	beq.n	8007ea4 <_dtoa_r+0x214>
 8007e12:	3f01      	subs	r7, #1
 8007e14:	2300      	movs	r3, #0
 8007e16:	9312      	str	r3, [sp, #72]	@ 0x48
 8007e18:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007e1a:	1b9b      	subs	r3, r3, r6
 8007e1c:	1e5a      	subs	r2, r3, #1
 8007e1e:	bf44      	itt	mi
 8007e20:	f1c3 0801 	rsbmi	r8, r3, #1
 8007e24:	2300      	movmi	r3, #0
 8007e26:	9208      	str	r2, [sp, #32]
 8007e28:	bf54      	ite	pl
 8007e2a:	f04f 0800 	movpl.w	r8, #0
 8007e2e:	9308      	strmi	r3, [sp, #32]
 8007e30:	2f00      	cmp	r7, #0
 8007e32:	db39      	blt.n	8007ea8 <_dtoa_r+0x218>
 8007e34:	9b08      	ldr	r3, [sp, #32]
 8007e36:	970f      	str	r7, [sp, #60]	@ 0x3c
 8007e38:	443b      	add	r3, r7
 8007e3a:	9308      	str	r3, [sp, #32]
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007e40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e42:	2b09      	cmp	r3, #9
 8007e44:	d864      	bhi.n	8007f10 <_dtoa_r+0x280>
 8007e46:	2b05      	cmp	r3, #5
 8007e48:	bfc4      	itt	gt
 8007e4a:	3b04      	subgt	r3, #4
 8007e4c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8007e4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e50:	f1a3 0302 	sub.w	r3, r3, #2
 8007e54:	bfcc      	ite	gt
 8007e56:	2400      	movgt	r4, #0
 8007e58:	2401      	movle	r4, #1
 8007e5a:	2b03      	cmp	r3, #3
 8007e5c:	d863      	bhi.n	8007f26 <_dtoa_r+0x296>
 8007e5e:	e8df f003 	tbb	[pc, r3]
 8007e62:	372a      	.short	0x372a
 8007e64:	5535      	.short	0x5535
 8007e66:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8007e6a:	441e      	add	r6, r3
 8007e6c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007e70:	2b20      	cmp	r3, #32
 8007e72:	bfc1      	itttt	gt
 8007e74:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007e78:	409f      	lslgt	r7, r3
 8007e7a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007e7e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007e82:	bfd6      	itet	le
 8007e84:	f1c3 0320 	rsble	r3, r3, #32
 8007e88:	ea47 0003 	orrgt.w	r0, r7, r3
 8007e8c:	fa04 f003 	lslle.w	r0, r4, r3
 8007e90:	f7f8 fb38 	bl	8000504 <__aeabi_ui2d>
 8007e94:	2201      	movs	r2, #1
 8007e96:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007e9a:	3e01      	subs	r6, #1
 8007e9c:	9214      	str	r2, [sp, #80]	@ 0x50
 8007e9e:	e777      	b.n	8007d90 <_dtoa_r+0x100>
 8007ea0:	2301      	movs	r3, #1
 8007ea2:	e7b8      	b.n	8007e16 <_dtoa_r+0x186>
 8007ea4:	9012      	str	r0, [sp, #72]	@ 0x48
 8007ea6:	e7b7      	b.n	8007e18 <_dtoa_r+0x188>
 8007ea8:	427b      	negs	r3, r7
 8007eaa:	930a      	str	r3, [sp, #40]	@ 0x28
 8007eac:	2300      	movs	r3, #0
 8007eae:	eba8 0807 	sub.w	r8, r8, r7
 8007eb2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007eb4:	e7c4      	b.n	8007e40 <_dtoa_r+0x1b0>
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007eba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	dc35      	bgt.n	8007f2c <_dtoa_r+0x29c>
 8007ec0:	2301      	movs	r3, #1
 8007ec2:	9300      	str	r3, [sp, #0]
 8007ec4:	9307      	str	r3, [sp, #28]
 8007ec6:	461a      	mov	r2, r3
 8007ec8:	920e      	str	r2, [sp, #56]	@ 0x38
 8007eca:	e00b      	b.n	8007ee4 <_dtoa_r+0x254>
 8007ecc:	2301      	movs	r3, #1
 8007ece:	e7f3      	b.n	8007eb8 <_dtoa_r+0x228>
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007ed4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007ed6:	18fb      	adds	r3, r7, r3
 8007ed8:	9300      	str	r3, [sp, #0]
 8007eda:	3301      	adds	r3, #1
 8007edc:	2b01      	cmp	r3, #1
 8007ede:	9307      	str	r3, [sp, #28]
 8007ee0:	bfb8      	it	lt
 8007ee2:	2301      	movlt	r3, #1
 8007ee4:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007ee8:	2100      	movs	r1, #0
 8007eea:	2204      	movs	r2, #4
 8007eec:	f102 0514 	add.w	r5, r2, #20
 8007ef0:	429d      	cmp	r5, r3
 8007ef2:	d91f      	bls.n	8007f34 <_dtoa_r+0x2a4>
 8007ef4:	6041      	str	r1, [r0, #4]
 8007ef6:	4658      	mov	r0, fp
 8007ef8:	f000 fd8e 	bl	8008a18 <_Balloc>
 8007efc:	4682      	mov	sl, r0
 8007efe:	2800      	cmp	r0, #0
 8007f00:	d13c      	bne.n	8007f7c <_dtoa_r+0x2ec>
 8007f02:	4b1b      	ldr	r3, [pc, #108]	@ (8007f70 <_dtoa_r+0x2e0>)
 8007f04:	4602      	mov	r2, r0
 8007f06:	f240 11af 	movw	r1, #431	@ 0x1af
 8007f0a:	e6d8      	b.n	8007cbe <_dtoa_r+0x2e>
 8007f0c:	2301      	movs	r3, #1
 8007f0e:	e7e0      	b.n	8007ed2 <_dtoa_r+0x242>
 8007f10:	2401      	movs	r4, #1
 8007f12:	2300      	movs	r3, #0
 8007f14:	9309      	str	r3, [sp, #36]	@ 0x24
 8007f16:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007f18:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007f1c:	9300      	str	r3, [sp, #0]
 8007f1e:	9307      	str	r3, [sp, #28]
 8007f20:	2200      	movs	r2, #0
 8007f22:	2312      	movs	r3, #18
 8007f24:	e7d0      	b.n	8007ec8 <_dtoa_r+0x238>
 8007f26:	2301      	movs	r3, #1
 8007f28:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007f2a:	e7f5      	b.n	8007f18 <_dtoa_r+0x288>
 8007f2c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007f2e:	9300      	str	r3, [sp, #0]
 8007f30:	9307      	str	r3, [sp, #28]
 8007f32:	e7d7      	b.n	8007ee4 <_dtoa_r+0x254>
 8007f34:	3101      	adds	r1, #1
 8007f36:	0052      	lsls	r2, r2, #1
 8007f38:	e7d8      	b.n	8007eec <_dtoa_r+0x25c>
 8007f3a:	bf00      	nop
 8007f3c:	f3af 8000 	nop.w
 8007f40:	636f4361 	.word	0x636f4361
 8007f44:	3fd287a7 	.word	0x3fd287a7
 8007f48:	8b60c8b3 	.word	0x8b60c8b3
 8007f4c:	3fc68a28 	.word	0x3fc68a28
 8007f50:	509f79fb 	.word	0x509f79fb
 8007f54:	3fd34413 	.word	0x3fd34413
 8007f58:	08009d4d 	.word	0x08009d4d
 8007f5c:	08009d64 	.word	0x08009d64
 8007f60:	7ff00000 	.word	0x7ff00000
 8007f64:	08009d1d 	.word	0x08009d1d
 8007f68:	3ff80000 	.word	0x3ff80000
 8007f6c:	08009e60 	.word	0x08009e60
 8007f70:	08009dbc 	.word	0x08009dbc
 8007f74:	08009d49 	.word	0x08009d49
 8007f78:	08009d1c 	.word	0x08009d1c
 8007f7c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007f80:	6018      	str	r0, [r3, #0]
 8007f82:	9b07      	ldr	r3, [sp, #28]
 8007f84:	2b0e      	cmp	r3, #14
 8007f86:	f200 80a4 	bhi.w	80080d2 <_dtoa_r+0x442>
 8007f8a:	2c00      	cmp	r4, #0
 8007f8c:	f000 80a1 	beq.w	80080d2 <_dtoa_r+0x442>
 8007f90:	2f00      	cmp	r7, #0
 8007f92:	dd33      	ble.n	8007ffc <_dtoa_r+0x36c>
 8007f94:	4bad      	ldr	r3, [pc, #692]	@ (800824c <_dtoa_r+0x5bc>)
 8007f96:	f007 020f 	and.w	r2, r7, #15
 8007f9a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007f9e:	ed93 7b00 	vldr	d7, [r3]
 8007fa2:	05f8      	lsls	r0, r7, #23
 8007fa4:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007fa8:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007fac:	d516      	bpl.n	8007fdc <_dtoa_r+0x34c>
 8007fae:	4ba8      	ldr	r3, [pc, #672]	@ (8008250 <_dtoa_r+0x5c0>)
 8007fb0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007fb4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007fb8:	f7f8 fc48 	bl	800084c <__aeabi_ddiv>
 8007fbc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007fc0:	f004 040f 	and.w	r4, r4, #15
 8007fc4:	2603      	movs	r6, #3
 8007fc6:	4da2      	ldr	r5, [pc, #648]	@ (8008250 <_dtoa_r+0x5c0>)
 8007fc8:	b954      	cbnz	r4, 8007fe0 <_dtoa_r+0x350>
 8007fca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007fce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007fd2:	f7f8 fc3b 	bl	800084c <__aeabi_ddiv>
 8007fd6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007fda:	e028      	b.n	800802e <_dtoa_r+0x39e>
 8007fdc:	2602      	movs	r6, #2
 8007fde:	e7f2      	b.n	8007fc6 <_dtoa_r+0x336>
 8007fe0:	07e1      	lsls	r1, r4, #31
 8007fe2:	d508      	bpl.n	8007ff6 <_dtoa_r+0x366>
 8007fe4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007fe8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007fec:	f7f8 fb04 	bl	80005f8 <__aeabi_dmul>
 8007ff0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007ff4:	3601      	adds	r6, #1
 8007ff6:	1064      	asrs	r4, r4, #1
 8007ff8:	3508      	adds	r5, #8
 8007ffa:	e7e5      	b.n	8007fc8 <_dtoa_r+0x338>
 8007ffc:	f000 80d2 	beq.w	80081a4 <_dtoa_r+0x514>
 8008000:	427c      	negs	r4, r7
 8008002:	4b92      	ldr	r3, [pc, #584]	@ (800824c <_dtoa_r+0x5bc>)
 8008004:	4d92      	ldr	r5, [pc, #584]	@ (8008250 <_dtoa_r+0x5c0>)
 8008006:	f004 020f 	and.w	r2, r4, #15
 800800a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800800e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008012:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008016:	f7f8 faef 	bl	80005f8 <__aeabi_dmul>
 800801a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800801e:	1124      	asrs	r4, r4, #4
 8008020:	2300      	movs	r3, #0
 8008022:	2602      	movs	r6, #2
 8008024:	2c00      	cmp	r4, #0
 8008026:	f040 80b2 	bne.w	800818e <_dtoa_r+0x4fe>
 800802a:	2b00      	cmp	r3, #0
 800802c:	d1d3      	bne.n	8007fd6 <_dtoa_r+0x346>
 800802e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008030:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008034:	2b00      	cmp	r3, #0
 8008036:	f000 80b7 	beq.w	80081a8 <_dtoa_r+0x518>
 800803a:	4b86      	ldr	r3, [pc, #536]	@ (8008254 <_dtoa_r+0x5c4>)
 800803c:	2200      	movs	r2, #0
 800803e:	4620      	mov	r0, r4
 8008040:	4629      	mov	r1, r5
 8008042:	f7f8 fd4b 	bl	8000adc <__aeabi_dcmplt>
 8008046:	2800      	cmp	r0, #0
 8008048:	f000 80ae 	beq.w	80081a8 <_dtoa_r+0x518>
 800804c:	9b07      	ldr	r3, [sp, #28]
 800804e:	2b00      	cmp	r3, #0
 8008050:	f000 80aa 	beq.w	80081a8 <_dtoa_r+0x518>
 8008054:	9b00      	ldr	r3, [sp, #0]
 8008056:	2b00      	cmp	r3, #0
 8008058:	dd37      	ble.n	80080ca <_dtoa_r+0x43a>
 800805a:	1e7b      	subs	r3, r7, #1
 800805c:	9304      	str	r3, [sp, #16]
 800805e:	4620      	mov	r0, r4
 8008060:	4b7d      	ldr	r3, [pc, #500]	@ (8008258 <_dtoa_r+0x5c8>)
 8008062:	2200      	movs	r2, #0
 8008064:	4629      	mov	r1, r5
 8008066:	f7f8 fac7 	bl	80005f8 <__aeabi_dmul>
 800806a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800806e:	9c00      	ldr	r4, [sp, #0]
 8008070:	3601      	adds	r6, #1
 8008072:	4630      	mov	r0, r6
 8008074:	f7f8 fa56 	bl	8000524 <__aeabi_i2d>
 8008078:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800807c:	f7f8 fabc 	bl	80005f8 <__aeabi_dmul>
 8008080:	4b76      	ldr	r3, [pc, #472]	@ (800825c <_dtoa_r+0x5cc>)
 8008082:	2200      	movs	r2, #0
 8008084:	f7f8 f902 	bl	800028c <__adddf3>
 8008088:	4605      	mov	r5, r0
 800808a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800808e:	2c00      	cmp	r4, #0
 8008090:	f040 808d 	bne.w	80081ae <_dtoa_r+0x51e>
 8008094:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008098:	4b71      	ldr	r3, [pc, #452]	@ (8008260 <_dtoa_r+0x5d0>)
 800809a:	2200      	movs	r2, #0
 800809c:	f7f8 f8f4 	bl	8000288 <__aeabi_dsub>
 80080a0:	4602      	mov	r2, r0
 80080a2:	460b      	mov	r3, r1
 80080a4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80080a8:	462a      	mov	r2, r5
 80080aa:	4633      	mov	r3, r6
 80080ac:	f7f8 fd34 	bl	8000b18 <__aeabi_dcmpgt>
 80080b0:	2800      	cmp	r0, #0
 80080b2:	f040 828b 	bne.w	80085cc <_dtoa_r+0x93c>
 80080b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80080ba:	462a      	mov	r2, r5
 80080bc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80080c0:	f7f8 fd0c 	bl	8000adc <__aeabi_dcmplt>
 80080c4:	2800      	cmp	r0, #0
 80080c6:	f040 8128 	bne.w	800831a <_dtoa_r+0x68a>
 80080ca:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80080ce:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80080d2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	f2c0 815a 	blt.w	800838e <_dtoa_r+0x6fe>
 80080da:	2f0e      	cmp	r7, #14
 80080dc:	f300 8157 	bgt.w	800838e <_dtoa_r+0x6fe>
 80080e0:	4b5a      	ldr	r3, [pc, #360]	@ (800824c <_dtoa_r+0x5bc>)
 80080e2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80080e6:	ed93 7b00 	vldr	d7, [r3]
 80080ea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	ed8d 7b00 	vstr	d7, [sp]
 80080f2:	da03      	bge.n	80080fc <_dtoa_r+0x46c>
 80080f4:	9b07      	ldr	r3, [sp, #28]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	f340 8101 	ble.w	80082fe <_dtoa_r+0x66e>
 80080fc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008100:	4656      	mov	r6, sl
 8008102:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008106:	4620      	mov	r0, r4
 8008108:	4629      	mov	r1, r5
 800810a:	f7f8 fb9f 	bl	800084c <__aeabi_ddiv>
 800810e:	f7f8 fd23 	bl	8000b58 <__aeabi_d2iz>
 8008112:	4680      	mov	r8, r0
 8008114:	f7f8 fa06 	bl	8000524 <__aeabi_i2d>
 8008118:	e9dd 2300 	ldrd	r2, r3, [sp]
 800811c:	f7f8 fa6c 	bl	80005f8 <__aeabi_dmul>
 8008120:	4602      	mov	r2, r0
 8008122:	460b      	mov	r3, r1
 8008124:	4620      	mov	r0, r4
 8008126:	4629      	mov	r1, r5
 8008128:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800812c:	f7f8 f8ac 	bl	8000288 <__aeabi_dsub>
 8008130:	f806 4b01 	strb.w	r4, [r6], #1
 8008134:	9d07      	ldr	r5, [sp, #28]
 8008136:	eba6 040a 	sub.w	r4, r6, sl
 800813a:	42a5      	cmp	r5, r4
 800813c:	4602      	mov	r2, r0
 800813e:	460b      	mov	r3, r1
 8008140:	f040 8117 	bne.w	8008372 <_dtoa_r+0x6e2>
 8008144:	f7f8 f8a2 	bl	800028c <__adddf3>
 8008148:	e9dd 2300 	ldrd	r2, r3, [sp]
 800814c:	4604      	mov	r4, r0
 800814e:	460d      	mov	r5, r1
 8008150:	f7f8 fce2 	bl	8000b18 <__aeabi_dcmpgt>
 8008154:	2800      	cmp	r0, #0
 8008156:	f040 80f9 	bne.w	800834c <_dtoa_r+0x6bc>
 800815a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800815e:	4620      	mov	r0, r4
 8008160:	4629      	mov	r1, r5
 8008162:	f7f8 fcb1 	bl	8000ac8 <__aeabi_dcmpeq>
 8008166:	b118      	cbz	r0, 8008170 <_dtoa_r+0x4e0>
 8008168:	f018 0f01 	tst.w	r8, #1
 800816c:	f040 80ee 	bne.w	800834c <_dtoa_r+0x6bc>
 8008170:	4649      	mov	r1, r9
 8008172:	4658      	mov	r0, fp
 8008174:	f000 fc90 	bl	8008a98 <_Bfree>
 8008178:	2300      	movs	r3, #0
 800817a:	7033      	strb	r3, [r6, #0]
 800817c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800817e:	3701      	adds	r7, #1
 8008180:	601f      	str	r7, [r3, #0]
 8008182:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008184:	2b00      	cmp	r3, #0
 8008186:	f000 831d 	beq.w	80087c4 <_dtoa_r+0xb34>
 800818a:	601e      	str	r6, [r3, #0]
 800818c:	e31a      	b.n	80087c4 <_dtoa_r+0xb34>
 800818e:	07e2      	lsls	r2, r4, #31
 8008190:	d505      	bpl.n	800819e <_dtoa_r+0x50e>
 8008192:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008196:	f7f8 fa2f 	bl	80005f8 <__aeabi_dmul>
 800819a:	3601      	adds	r6, #1
 800819c:	2301      	movs	r3, #1
 800819e:	1064      	asrs	r4, r4, #1
 80081a0:	3508      	adds	r5, #8
 80081a2:	e73f      	b.n	8008024 <_dtoa_r+0x394>
 80081a4:	2602      	movs	r6, #2
 80081a6:	e742      	b.n	800802e <_dtoa_r+0x39e>
 80081a8:	9c07      	ldr	r4, [sp, #28]
 80081aa:	9704      	str	r7, [sp, #16]
 80081ac:	e761      	b.n	8008072 <_dtoa_r+0x3e2>
 80081ae:	4b27      	ldr	r3, [pc, #156]	@ (800824c <_dtoa_r+0x5bc>)
 80081b0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80081b2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80081b6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80081ba:	4454      	add	r4, sl
 80081bc:	2900      	cmp	r1, #0
 80081be:	d053      	beq.n	8008268 <_dtoa_r+0x5d8>
 80081c0:	4928      	ldr	r1, [pc, #160]	@ (8008264 <_dtoa_r+0x5d4>)
 80081c2:	2000      	movs	r0, #0
 80081c4:	f7f8 fb42 	bl	800084c <__aeabi_ddiv>
 80081c8:	4633      	mov	r3, r6
 80081ca:	462a      	mov	r2, r5
 80081cc:	f7f8 f85c 	bl	8000288 <__aeabi_dsub>
 80081d0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80081d4:	4656      	mov	r6, sl
 80081d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80081da:	f7f8 fcbd 	bl	8000b58 <__aeabi_d2iz>
 80081de:	4605      	mov	r5, r0
 80081e0:	f7f8 f9a0 	bl	8000524 <__aeabi_i2d>
 80081e4:	4602      	mov	r2, r0
 80081e6:	460b      	mov	r3, r1
 80081e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80081ec:	f7f8 f84c 	bl	8000288 <__aeabi_dsub>
 80081f0:	3530      	adds	r5, #48	@ 0x30
 80081f2:	4602      	mov	r2, r0
 80081f4:	460b      	mov	r3, r1
 80081f6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80081fa:	f806 5b01 	strb.w	r5, [r6], #1
 80081fe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008202:	f7f8 fc6b 	bl	8000adc <__aeabi_dcmplt>
 8008206:	2800      	cmp	r0, #0
 8008208:	d171      	bne.n	80082ee <_dtoa_r+0x65e>
 800820a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800820e:	4911      	ldr	r1, [pc, #68]	@ (8008254 <_dtoa_r+0x5c4>)
 8008210:	2000      	movs	r0, #0
 8008212:	f7f8 f839 	bl	8000288 <__aeabi_dsub>
 8008216:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800821a:	f7f8 fc5f 	bl	8000adc <__aeabi_dcmplt>
 800821e:	2800      	cmp	r0, #0
 8008220:	f040 8095 	bne.w	800834e <_dtoa_r+0x6be>
 8008224:	42a6      	cmp	r6, r4
 8008226:	f43f af50 	beq.w	80080ca <_dtoa_r+0x43a>
 800822a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800822e:	4b0a      	ldr	r3, [pc, #40]	@ (8008258 <_dtoa_r+0x5c8>)
 8008230:	2200      	movs	r2, #0
 8008232:	f7f8 f9e1 	bl	80005f8 <__aeabi_dmul>
 8008236:	4b08      	ldr	r3, [pc, #32]	@ (8008258 <_dtoa_r+0x5c8>)
 8008238:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800823c:	2200      	movs	r2, #0
 800823e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008242:	f7f8 f9d9 	bl	80005f8 <__aeabi_dmul>
 8008246:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800824a:	e7c4      	b.n	80081d6 <_dtoa_r+0x546>
 800824c:	08009e60 	.word	0x08009e60
 8008250:	08009e38 	.word	0x08009e38
 8008254:	3ff00000 	.word	0x3ff00000
 8008258:	40240000 	.word	0x40240000
 800825c:	401c0000 	.word	0x401c0000
 8008260:	40140000 	.word	0x40140000
 8008264:	3fe00000 	.word	0x3fe00000
 8008268:	4631      	mov	r1, r6
 800826a:	4628      	mov	r0, r5
 800826c:	f7f8 f9c4 	bl	80005f8 <__aeabi_dmul>
 8008270:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008274:	9415      	str	r4, [sp, #84]	@ 0x54
 8008276:	4656      	mov	r6, sl
 8008278:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800827c:	f7f8 fc6c 	bl	8000b58 <__aeabi_d2iz>
 8008280:	4605      	mov	r5, r0
 8008282:	f7f8 f94f 	bl	8000524 <__aeabi_i2d>
 8008286:	4602      	mov	r2, r0
 8008288:	460b      	mov	r3, r1
 800828a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800828e:	f7f7 fffb 	bl	8000288 <__aeabi_dsub>
 8008292:	3530      	adds	r5, #48	@ 0x30
 8008294:	f806 5b01 	strb.w	r5, [r6], #1
 8008298:	4602      	mov	r2, r0
 800829a:	460b      	mov	r3, r1
 800829c:	42a6      	cmp	r6, r4
 800829e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80082a2:	f04f 0200 	mov.w	r2, #0
 80082a6:	d124      	bne.n	80082f2 <_dtoa_r+0x662>
 80082a8:	4bac      	ldr	r3, [pc, #688]	@ (800855c <_dtoa_r+0x8cc>)
 80082aa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80082ae:	f7f7 ffed 	bl	800028c <__adddf3>
 80082b2:	4602      	mov	r2, r0
 80082b4:	460b      	mov	r3, r1
 80082b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80082ba:	f7f8 fc2d 	bl	8000b18 <__aeabi_dcmpgt>
 80082be:	2800      	cmp	r0, #0
 80082c0:	d145      	bne.n	800834e <_dtoa_r+0x6be>
 80082c2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80082c6:	49a5      	ldr	r1, [pc, #660]	@ (800855c <_dtoa_r+0x8cc>)
 80082c8:	2000      	movs	r0, #0
 80082ca:	f7f7 ffdd 	bl	8000288 <__aeabi_dsub>
 80082ce:	4602      	mov	r2, r0
 80082d0:	460b      	mov	r3, r1
 80082d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80082d6:	f7f8 fc01 	bl	8000adc <__aeabi_dcmplt>
 80082da:	2800      	cmp	r0, #0
 80082dc:	f43f aef5 	beq.w	80080ca <_dtoa_r+0x43a>
 80082e0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80082e2:	1e73      	subs	r3, r6, #1
 80082e4:	9315      	str	r3, [sp, #84]	@ 0x54
 80082e6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80082ea:	2b30      	cmp	r3, #48	@ 0x30
 80082ec:	d0f8      	beq.n	80082e0 <_dtoa_r+0x650>
 80082ee:	9f04      	ldr	r7, [sp, #16]
 80082f0:	e73e      	b.n	8008170 <_dtoa_r+0x4e0>
 80082f2:	4b9b      	ldr	r3, [pc, #620]	@ (8008560 <_dtoa_r+0x8d0>)
 80082f4:	f7f8 f980 	bl	80005f8 <__aeabi_dmul>
 80082f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80082fc:	e7bc      	b.n	8008278 <_dtoa_r+0x5e8>
 80082fe:	d10c      	bne.n	800831a <_dtoa_r+0x68a>
 8008300:	4b98      	ldr	r3, [pc, #608]	@ (8008564 <_dtoa_r+0x8d4>)
 8008302:	2200      	movs	r2, #0
 8008304:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008308:	f7f8 f976 	bl	80005f8 <__aeabi_dmul>
 800830c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008310:	f7f8 fbf8 	bl	8000b04 <__aeabi_dcmpge>
 8008314:	2800      	cmp	r0, #0
 8008316:	f000 8157 	beq.w	80085c8 <_dtoa_r+0x938>
 800831a:	2400      	movs	r4, #0
 800831c:	4625      	mov	r5, r4
 800831e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008320:	43db      	mvns	r3, r3
 8008322:	9304      	str	r3, [sp, #16]
 8008324:	4656      	mov	r6, sl
 8008326:	2700      	movs	r7, #0
 8008328:	4621      	mov	r1, r4
 800832a:	4658      	mov	r0, fp
 800832c:	f000 fbb4 	bl	8008a98 <_Bfree>
 8008330:	2d00      	cmp	r5, #0
 8008332:	d0dc      	beq.n	80082ee <_dtoa_r+0x65e>
 8008334:	b12f      	cbz	r7, 8008342 <_dtoa_r+0x6b2>
 8008336:	42af      	cmp	r7, r5
 8008338:	d003      	beq.n	8008342 <_dtoa_r+0x6b2>
 800833a:	4639      	mov	r1, r7
 800833c:	4658      	mov	r0, fp
 800833e:	f000 fbab 	bl	8008a98 <_Bfree>
 8008342:	4629      	mov	r1, r5
 8008344:	4658      	mov	r0, fp
 8008346:	f000 fba7 	bl	8008a98 <_Bfree>
 800834a:	e7d0      	b.n	80082ee <_dtoa_r+0x65e>
 800834c:	9704      	str	r7, [sp, #16]
 800834e:	4633      	mov	r3, r6
 8008350:	461e      	mov	r6, r3
 8008352:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008356:	2a39      	cmp	r2, #57	@ 0x39
 8008358:	d107      	bne.n	800836a <_dtoa_r+0x6da>
 800835a:	459a      	cmp	sl, r3
 800835c:	d1f8      	bne.n	8008350 <_dtoa_r+0x6c0>
 800835e:	9a04      	ldr	r2, [sp, #16]
 8008360:	3201      	adds	r2, #1
 8008362:	9204      	str	r2, [sp, #16]
 8008364:	2230      	movs	r2, #48	@ 0x30
 8008366:	f88a 2000 	strb.w	r2, [sl]
 800836a:	781a      	ldrb	r2, [r3, #0]
 800836c:	3201      	adds	r2, #1
 800836e:	701a      	strb	r2, [r3, #0]
 8008370:	e7bd      	b.n	80082ee <_dtoa_r+0x65e>
 8008372:	4b7b      	ldr	r3, [pc, #492]	@ (8008560 <_dtoa_r+0x8d0>)
 8008374:	2200      	movs	r2, #0
 8008376:	f7f8 f93f 	bl	80005f8 <__aeabi_dmul>
 800837a:	2200      	movs	r2, #0
 800837c:	2300      	movs	r3, #0
 800837e:	4604      	mov	r4, r0
 8008380:	460d      	mov	r5, r1
 8008382:	f7f8 fba1 	bl	8000ac8 <__aeabi_dcmpeq>
 8008386:	2800      	cmp	r0, #0
 8008388:	f43f aebb 	beq.w	8008102 <_dtoa_r+0x472>
 800838c:	e6f0      	b.n	8008170 <_dtoa_r+0x4e0>
 800838e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008390:	2a00      	cmp	r2, #0
 8008392:	f000 80db 	beq.w	800854c <_dtoa_r+0x8bc>
 8008396:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008398:	2a01      	cmp	r2, #1
 800839a:	f300 80bf 	bgt.w	800851c <_dtoa_r+0x88c>
 800839e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80083a0:	2a00      	cmp	r2, #0
 80083a2:	f000 80b7 	beq.w	8008514 <_dtoa_r+0x884>
 80083a6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80083aa:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80083ac:	4646      	mov	r6, r8
 80083ae:	9a08      	ldr	r2, [sp, #32]
 80083b0:	2101      	movs	r1, #1
 80083b2:	441a      	add	r2, r3
 80083b4:	4658      	mov	r0, fp
 80083b6:	4498      	add	r8, r3
 80083b8:	9208      	str	r2, [sp, #32]
 80083ba:	f000 fc21 	bl	8008c00 <__i2b>
 80083be:	4605      	mov	r5, r0
 80083c0:	b15e      	cbz	r6, 80083da <_dtoa_r+0x74a>
 80083c2:	9b08      	ldr	r3, [sp, #32]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	dd08      	ble.n	80083da <_dtoa_r+0x74a>
 80083c8:	42b3      	cmp	r3, r6
 80083ca:	9a08      	ldr	r2, [sp, #32]
 80083cc:	bfa8      	it	ge
 80083ce:	4633      	movge	r3, r6
 80083d0:	eba8 0803 	sub.w	r8, r8, r3
 80083d4:	1af6      	subs	r6, r6, r3
 80083d6:	1ad3      	subs	r3, r2, r3
 80083d8:	9308      	str	r3, [sp, #32]
 80083da:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80083dc:	b1f3      	cbz	r3, 800841c <_dtoa_r+0x78c>
 80083de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	f000 80b7 	beq.w	8008554 <_dtoa_r+0x8c4>
 80083e6:	b18c      	cbz	r4, 800840c <_dtoa_r+0x77c>
 80083e8:	4629      	mov	r1, r5
 80083ea:	4622      	mov	r2, r4
 80083ec:	4658      	mov	r0, fp
 80083ee:	f000 fcc7 	bl	8008d80 <__pow5mult>
 80083f2:	464a      	mov	r2, r9
 80083f4:	4601      	mov	r1, r0
 80083f6:	4605      	mov	r5, r0
 80083f8:	4658      	mov	r0, fp
 80083fa:	f000 fc17 	bl	8008c2c <__multiply>
 80083fe:	4649      	mov	r1, r9
 8008400:	9004      	str	r0, [sp, #16]
 8008402:	4658      	mov	r0, fp
 8008404:	f000 fb48 	bl	8008a98 <_Bfree>
 8008408:	9b04      	ldr	r3, [sp, #16]
 800840a:	4699      	mov	r9, r3
 800840c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800840e:	1b1a      	subs	r2, r3, r4
 8008410:	d004      	beq.n	800841c <_dtoa_r+0x78c>
 8008412:	4649      	mov	r1, r9
 8008414:	4658      	mov	r0, fp
 8008416:	f000 fcb3 	bl	8008d80 <__pow5mult>
 800841a:	4681      	mov	r9, r0
 800841c:	2101      	movs	r1, #1
 800841e:	4658      	mov	r0, fp
 8008420:	f000 fbee 	bl	8008c00 <__i2b>
 8008424:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008426:	4604      	mov	r4, r0
 8008428:	2b00      	cmp	r3, #0
 800842a:	f000 81cf 	beq.w	80087cc <_dtoa_r+0xb3c>
 800842e:	461a      	mov	r2, r3
 8008430:	4601      	mov	r1, r0
 8008432:	4658      	mov	r0, fp
 8008434:	f000 fca4 	bl	8008d80 <__pow5mult>
 8008438:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800843a:	2b01      	cmp	r3, #1
 800843c:	4604      	mov	r4, r0
 800843e:	f300 8095 	bgt.w	800856c <_dtoa_r+0x8dc>
 8008442:	9b02      	ldr	r3, [sp, #8]
 8008444:	2b00      	cmp	r3, #0
 8008446:	f040 8087 	bne.w	8008558 <_dtoa_r+0x8c8>
 800844a:	9b03      	ldr	r3, [sp, #12]
 800844c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008450:	2b00      	cmp	r3, #0
 8008452:	f040 8089 	bne.w	8008568 <_dtoa_r+0x8d8>
 8008456:	9b03      	ldr	r3, [sp, #12]
 8008458:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800845c:	0d1b      	lsrs	r3, r3, #20
 800845e:	051b      	lsls	r3, r3, #20
 8008460:	b12b      	cbz	r3, 800846e <_dtoa_r+0x7de>
 8008462:	9b08      	ldr	r3, [sp, #32]
 8008464:	3301      	adds	r3, #1
 8008466:	9308      	str	r3, [sp, #32]
 8008468:	f108 0801 	add.w	r8, r8, #1
 800846c:	2301      	movs	r3, #1
 800846e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008470:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008472:	2b00      	cmp	r3, #0
 8008474:	f000 81b0 	beq.w	80087d8 <_dtoa_r+0xb48>
 8008478:	6923      	ldr	r3, [r4, #16]
 800847a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800847e:	6918      	ldr	r0, [r3, #16]
 8008480:	f000 fb72 	bl	8008b68 <__hi0bits>
 8008484:	f1c0 0020 	rsb	r0, r0, #32
 8008488:	9b08      	ldr	r3, [sp, #32]
 800848a:	4418      	add	r0, r3
 800848c:	f010 001f 	ands.w	r0, r0, #31
 8008490:	d077      	beq.n	8008582 <_dtoa_r+0x8f2>
 8008492:	f1c0 0320 	rsb	r3, r0, #32
 8008496:	2b04      	cmp	r3, #4
 8008498:	dd6b      	ble.n	8008572 <_dtoa_r+0x8e2>
 800849a:	9b08      	ldr	r3, [sp, #32]
 800849c:	f1c0 001c 	rsb	r0, r0, #28
 80084a0:	4403      	add	r3, r0
 80084a2:	4480      	add	r8, r0
 80084a4:	4406      	add	r6, r0
 80084a6:	9308      	str	r3, [sp, #32]
 80084a8:	f1b8 0f00 	cmp.w	r8, #0
 80084ac:	dd05      	ble.n	80084ba <_dtoa_r+0x82a>
 80084ae:	4649      	mov	r1, r9
 80084b0:	4642      	mov	r2, r8
 80084b2:	4658      	mov	r0, fp
 80084b4:	f000 fcbe 	bl	8008e34 <__lshift>
 80084b8:	4681      	mov	r9, r0
 80084ba:	9b08      	ldr	r3, [sp, #32]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	dd05      	ble.n	80084cc <_dtoa_r+0x83c>
 80084c0:	4621      	mov	r1, r4
 80084c2:	461a      	mov	r2, r3
 80084c4:	4658      	mov	r0, fp
 80084c6:	f000 fcb5 	bl	8008e34 <__lshift>
 80084ca:	4604      	mov	r4, r0
 80084cc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d059      	beq.n	8008586 <_dtoa_r+0x8f6>
 80084d2:	4621      	mov	r1, r4
 80084d4:	4648      	mov	r0, r9
 80084d6:	f000 fd19 	bl	8008f0c <__mcmp>
 80084da:	2800      	cmp	r0, #0
 80084dc:	da53      	bge.n	8008586 <_dtoa_r+0x8f6>
 80084de:	1e7b      	subs	r3, r7, #1
 80084e0:	9304      	str	r3, [sp, #16]
 80084e2:	4649      	mov	r1, r9
 80084e4:	2300      	movs	r3, #0
 80084e6:	220a      	movs	r2, #10
 80084e8:	4658      	mov	r0, fp
 80084ea:	f000 faf7 	bl	8008adc <__multadd>
 80084ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80084f0:	4681      	mov	r9, r0
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	f000 8172 	beq.w	80087dc <_dtoa_r+0xb4c>
 80084f8:	2300      	movs	r3, #0
 80084fa:	4629      	mov	r1, r5
 80084fc:	220a      	movs	r2, #10
 80084fe:	4658      	mov	r0, fp
 8008500:	f000 faec 	bl	8008adc <__multadd>
 8008504:	9b00      	ldr	r3, [sp, #0]
 8008506:	2b00      	cmp	r3, #0
 8008508:	4605      	mov	r5, r0
 800850a:	dc67      	bgt.n	80085dc <_dtoa_r+0x94c>
 800850c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800850e:	2b02      	cmp	r3, #2
 8008510:	dc41      	bgt.n	8008596 <_dtoa_r+0x906>
 8008512:	e063      	b.n	80085dc <_dtoa_r+0x94c>
 8008514:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008516:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800851a:	e746      	b.n	80083aa <_dtoa_r+0x71a>
 800851c:	9b07      	ldr	r3, [sp, #28]
 800851e:	1e5c      	subs	r4, r3, #1
 8008520:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008522:	42a3      	cmp	r3, r4
 8008524:	bfbf      	itttt	lt
 8008526:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008528:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800852a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800852c:	1ae3      	sublt	r3, r4, r3
 800852e:	bfb4      	ite	lt
 8008530:	18d2      	addlt	r2, r2, r3
 8008532:	1b1c      	subge	r4, r3, r4
 8008534:	9b07      	ldr	r3, [sp, #28]
 8008536:	bfbc      	itt	lt
 8008538:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800853a:	2400      	movlt	r4, #0
 800853c:	2b00      	cmp	r3, #0
 800853e:	bfb5      	itete	lt
 8008540:	eba8 0603 	sublt.w	r6, r8, r3
 8008544:	9b07      	ldrge	r3, [sp, #28]
 8008546:	2300      	movlt	r3, #0
 8008548:	4646      	movge	r6, r8
 800854a:	e730      	b.n	80083ae <_dtoa_r+0x71e>
 800854c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800854e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008550:	4646      	mov	r6, r8
 8008552:	e735      	b.n	80083c0 <_dtoa_r+0x730>
 8008554:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008556:	e75c      	b.n	8008412 <_dtoa_r+0x782>
 8008558:	2300      	movs	r3, #0
 800855a:	e788      	b.n	800846e <_dtoa_r+0x7de>
 800855c:	3fe00000 	.word	0x3fe00000
 8008560:	40240000 	.word	0x40240000
 8008564:	40140000 	.word	0x40140000
 8008568:	9b02      	ldr	r3, [sp, #8]
 800856a:	e780      	b.n	800846e <_dtoa_r+0x7de>
 800856c:	2300      	movs	r3, #0
 800856e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008570:	e782      	b.n	8008478 <_dtoa_r+0x7e8>
 8008572:	d099      	beq.n	80084a8 <_dtoa_r+0x818>
 8008574:	9a08      	ldr	r2, [sp, #32]
 8008576:	331c      	adds	r3, #28
 8008578:	441a      	add	r2, r3
 800857a:	4498      	add	r8, r3
 800857c:	441e      	add	r6, r3
 800857e:	9208      	str	r2, [sp, #32]
 8008580:	e792      	b.n	80084a8 <_dtoa_r+0x818>
 8008582:	4603      	mov	r3, r0
 8008584:	e7f6      	b.n	8008574 <_dtoa_r+0x8e4>
 8008586:	9b07      	ldr	r3, [sp, #28]
 8008588:	9704      	str	r7, [sp, #16]
 800858a:	2b00      	cmp	r3, #0
 800858c:	dc20      	bgt.n	80085d0 <_dtoa_r+0x940>
 800858e:	9300      	str	r3, [sp, #0]
 8008590:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008592:	2b02      	cmp	r3, #2
 8008594:	dd1e      	ble.n	80085d4 <_dtoa_r+0x944>
 8008596:	9b00      	ldr	r3, [sp, #0]
 8008598:	2b00      	cmp	r3, #0
 800859a:	f47f aec0 	bne.w	800831e <_dtoa_r+0x68e>
 800859e:	4621      	mov	r1, r4
 80085a0:	2205      	movs	r2, #5
 80085a2:	4658      	mov	r0, fp
 80085a4:	f000 fa9a 	bl	8008adc <__multadd>
 80085a8:	4601      	mov	r1, r0
 80085aa:	4604      	mov	r4, r0
 80085ac:	4648      	mov	r0, r9
 80085ae:	f000 fcad 	bl	8008f0c <__mcmp>
 80085b2:	2800      	cmp	r0, #0
 80085b4:	f77f aeb3 	ble.w	800831e <_dtoa_r+0x68e>
 80085b8:	4656      	mov	r6, sl
 80085ba:	2331      	movs	r3, #49	@ 0x31
 80085bc:	f806 3b01 	strb.w	r3, [r6], #1
 80085c0:	9b04      	ldr	r3, [sp, #16]
 80085c2:	3301      	adds	r3, #1
 80085c4:	9304      	str	r3, [sp, #16]
 80085c6:	e6ae      	b.n	8008326 <_dtoa_r+0x696>
 80085c8:	9c07      	ldr	r4, [sp, #28]
 80085ca:	9704      	str	r7, [sp, #16]
 80085cc:	4625      	mov	r5, r4
 80085ce:	e7f3      	b.n	80085b8 <_dtoa_r+0x928>
 80085d0:	9b07      	ldr	r3, [sp, #28]
 80085d2:	9300      	str	r3, [sp, #0]
 80085d4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	f000 8104 	beq.w	80087e4 <_dtoa_r+0xb54>
 80085dc:	2e00      	cmp	r6, #0
 80085de:	dd05      	ble.n	80085ec <_dtoa_r+0x95c>
 80085e0:	4629      	mov	r1, r5
 80085e2:	4632      	mov	r2, r6
 80085e4:	4658      	mov	r0, fp
 80085e6:	f000 fc25 	bl	8008e34 <__lshift>
 80085ea:	4605      	mov	r5, r0
 80085ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d05a      	beq.n	80086a8 <_dtoa_r+0xa18>
 80085f2:	6869      	ldr	r1, [r5, #4]
 80085f4:	4658      	mov	r0, fp
 80085f6:	f000 fa0f 	bl	8008a18 <_Balloc>
 80085fa:	4606      	mov	r6, r0
 80085fc:	b928      	cbnz	r0, 800860a <_dtoa_r+0x97a>
 80085fe:	4b84      	ldr	r3, [pc, #528]	@ (8008810 <_dtoa_r+0xb80>)
 8008600:	4602      	mov	r2, r0
 8008602:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008606:	f7ff bb5a 	b.w	8007cbe <_dtoa_r+0x2e>
 800860a:	692a      	ldr	r2, [r5, #16]
 800860c:	3202      	adds	r2, #2
 800860e:	0092      	lsls	r2, r2, #2
 8008610:	f105 010c 	add.w	r1, r5, #12
 8008614:	300c      	adds	r0, #12
 8008616:	f7ff faa2 	bl	8007b5e <memcpy>
 800861a:	2201      	movs	r2, #1
 800861c:	4631      	mov	r1, r6
 800861e:	4658      	mov	r0, fp
 8008620:	f000 fc08 	bl	8008e34 <__lshift>
 8008624:	f10a 0301 	add.w	r3, sl, #1
 8008628:	9307      	str	r3, [sp, #28]
 800862a:	9b00      	ldr	r3, [sp, #0]
 800862c:	4453      	add	r3, sl
 800862e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008630:	9b02      	ldr	r3, [sp, #8]
 8008632:	f003 0301 	and.w	r3, r3, #1
 8008636:	462f      	mov	r7, r5
 8008638:	930a      	str	r3, [sp, #40]	@ 0x28
 800863a:	4605      	mov	r5, r0
 800863c:	9b07      	ldr	r3, [sp, #28]
 800863e:	4621      	mov	r1, r4
 8008640:	3b01      	subs	r3, #1
 8008642:	4648      	mov	r0, r9
 8008644:	9300      	str	r3, [sp, #0]
 8008646:	f7ff fa98 	bl	8007b7a <quorem>
 800864a:	4639      	mov	r1, r7
 800864c:	9002      	str	r0, [sp, #8]
 800864e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008652:	4648      	mov	r0, r9
 8008654:	f000 fc5a 	bl	8008f0c <__mcmp>
 8008658:	462a      	mov	r2, r5
 800865a:	9008      	str	r0, [sp, #32]
 800865c:	4621      	mov	r1, r4
 800865e:	4658      	mov	r0, fp
 8008660:	f000 fc70 	bl	8008f44 <__mdiff>
 8008664:	68c2      	ldr	r2, [r0, #12]
 8008666:	4606      	mov	r6, r0
 8008668:	bb02      	cbnz	r2, 80086ac <_dtoa_r+0xa1c>
 800866a:	4601      	mov	r1, r0
 800866c:	4648      	mov	r0, r9
 800866e:	f000 fc4d 	bl	8008f0c <__mcmp>
 8008672:	4602      	mov	r2, r0
 8008674:	4631      	mov	r1, r6
 8008676:	4658      	mov	r0, fp
 8008678:	920e      	str	r2, [sp, #56]	@ 0x38
 800867a:	f000 fa0d 	bl	8008a98 <_Bfree>
 800867e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008680:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008682:	9e07      	ldr	r6, [sp, #28]
 8008684:	ea43 0102 	orr.w	r1, r3, r2
 8008688:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800868a:	4319      	orrs	r1, r3
 800868c:	d110      	bne.n	80086b0 <_dtoa_r+0xa20>
 800868e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008692:	d029      	beq.n	80086e8 <_dtoa_r+0xa58>
 8008694:	9b08      	ldr	r3, [sp, #32]
 8008696:	2b00      	cmp	r3, #0
 8008698:	dd02      	ble.n	80086a0 <_dtoa_r+0xa10>
 800869a:	9b02      	ldr	r3, [sp, #8]
 800869c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80086a0:	9b00      	ldr	r3, [sp, #0]
 80086a2:	f883 8000 	strb.w	r8, [r3]
 80086a6:	e63f      	b.n	8008328 <_dtoa_r+0x698>
 80086a8:	4628      	mov	r0, r5
 80086aa:	e7bb      	b.n	8008624 <_dtoa_r+0x994>
 80086ac:	2201      	movs	r2, #1
 80086ae:	e7e1      	b.n	8008674 <_dtoa_r+0x9e4>
 80086b0:	9b08      	ldr	r3, [sp, #32]
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	db04      	blt.n	80086c0 <_dtoa_r+0xa30>
 80086b6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80086b8:	430b      	orrs	r3, r1
 80086ba:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80086bc:	430b      	orrs	r3, r1
 80086be:	d120      	bne.n	8008702 <_dtoa_r+0xa72>
 80086c0:	2a00      	cmp	r2, #0
 80086c2:	dded      	ble.n	80086a0 <_dtoa_r+0xa10>
 80086c4:	4649      	mov	r1, r9
 80086c6:	2201      	movs	r2, #1
 80086c8:	4658      	mov	r0, fp
 80086ca:	f000 fbb3 	bl	8008e34 <__lshift>
 80086ce:	4621      	mov	r1, r4
 80086d0:	4681      	mov	r9, r0
 80086d2:	f000 fc1b 	bl	8008f0c <__mcmp>
 80086d6:	2800      	cmp	r0, #0
 80086d8:	dc03      	bgt.n	80086e2 <_dtoa_r+0xa52>
 80086da:	d1e1      	bne.n	80086a0 <_dtoa_r+0xa10>
 80086dc:	f018 0f01 	tst.w	r8, #1
 80086e0:	d0de      	beq.n	80086a0 <_dtoa_r+0xa10>
 80086e2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80086e6:	d1d8      	bne.n	800869a <_dtoa_r+0xa0a>
 80086e8:	9a00      	ldr	r2, [sp, #0]
 80086ea:	2339      	movs	r3, #57	@ 0x39
 80086ec:	7013      	strb	r3, [r2, #0]
 80086ee:	4633      	mov	r3, r6
 80086f0:	461e      	mov	r6, r3
 80086f2:	3b01      	subs	r3, #1
 80086f4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80086f8:	2a39      	cmp	r2, #57	@ 0x39
 80086fa:	d052      	beq.n	80087a2 <_dtoa_r+0xb12>
 80086fc:	3201      	adds	r2, #1
 80086fe:	701a      	strb	r2, [r3, #0]
 8008700:	e612      	b.n	8008328 <_dtoa_r+0x698>
 8008702:	2a00      	cmp	r2, #0
 8008704:	dd07      	ble.n	8008716 <_dtoa_r+0xa86>
 8008706:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800870a:	d0ed      	beq.n	80086e8 <_dtoa_r+0xa58>
 800870c:	9a00      	ldr	r2, [sp, #0]
 800870e:	f108 0301 	add.w	r3, r8, #1
 8008712:	7013      	strb	r3, [r2, #0]
 8008714:	e608      	b.n	8008328 <_dtoa_r+0x698>
 8008716:	9b07      	ldr	r3, [sp, #28]
 8008718:	9a07      	ldr	r2, [sp, #28]
 800871a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800871e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008720:	4293      	cmp	r3, r2
 8008722:	d028      	beq.n	8008776 <_dtoa_r+0xae6>
 8008724:	4649      	mov	r1, r9
 8008726:	2300      	movs	r3, #0
 8008728:	220a      	movs	r2, #10
 800872a:	4658      	mov	r0, fp
 800872c:	f000 f9d6 	bl	8008adc <__multadd>
 8008730:	42af      	cmp	r7, r5
 8008732:	4681      	mov	r9, r0
 8008734:	f04f 0300 	mov.w	r3, #0
 8008738:	f04f 020a 	mov.w	r2, #10
 800873c:	4639      	mov	r1, r7
 800873e:	4658      	mov	r0, fp
 8008740:	d107      	bne.n	8008752 <_dtoa_r+0xac2>
 8008742:	f000 f9cb 	bl	8008adc <__multadd>
 8008746:	4607      	mov	r7, r0
 8008748:	4605      	mov	r5, r0
 800874a:	9b07      	ldr	r3, [sp, #28]
 800874c:	3301      	adds	r3, #1
 800874e:	9307      	str	r3, [sp, #28]
 8008750:	e774      	b.n	800863c <_dtoa_r+0x9ac>
 8008752:	f000 f9c3 	bl	8008adc <__multadd>
 8008756:	4629      	mov	r1, r5
 8008758:	4607      	mov	r7, r0
 800875a:	2300      	movs	r3, #0
 800875c:	220a      	movs	r2, #10
 800875e:	4658      	mov	r0, fp
 8008760:	f000 f9bc 	bl	8008adc <__multadd>
 8008764:	4605      	mov	r5, r0
 8008766:	e7f0      	b.n	800874a <_dtoa_r+0xaba>
 8008768:	9b00      	ldr	r3, [sp, #0]
 800876a:	2b00      	cmp	r3, #0
 800876c:	bfcc      	ite	gt
 800876e:	461e      	movgt	r6, r3
 8008770:	2601      	movle	r6, #1
 8008772:	4456      	add	r6, sl
 8008774:	2700      	movs	r7, #0
 8008776:	4649      	mov	r1, r9
 8008778:	2201      	movs	r2, #1
 800877a:	4658      	mov	r0, fp
 800877c:	f000 fb5a 	bl	8008e34 <__lshift>
 8008780:	4621      	mov	r1, r4
 8008782:	4681      	mov	r9, r0
 8008784:	f000 fbc2 	bl	8008f0c <__mcmp>
 8008788:	2800      	cmp	r0, #0
 800878a:	dcb0      	bgt.n	80086ee <_dtoa_r+0xa5e>
 800878c:	d102      	bne.n	8008794 <_dtoa_r+0xb04>
 800878e:	f018 0f01 	tst.w	r8, #1
 8008792:	d1ac      	bne.n	80086ee <_dtoa_r+0xa5e>
 8008794:	4633      	mov	r3, r6
 8008796:	461e      	mov	r6, r3
 8008798:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800879c:	2a30      	cmp	r2, #48	@ 0x30
 800879e:	d0fa      	beq.n	8008796 <_dtoa_r+0xb06>
 80087a0:	e5c2      	b.n	8008328 <_dtoa_r+0x698>
 80087a2:	459a      	cmp	sl, r3
 80087a4:	d1a4      	bne.n	80086f0 <_dtoa_r+0xa60>
 80087a6:	9b04      	ldr	r3, [sp, #16]
 80087a8:	3301      	adds	r3, #1
 80087aa:	9304      	str	r3, [sp, #16]
 80087ac:	2331      	movs	r3, #49	@ 0x31
 80087ae:	f88a 3000 	strb.w	r3, [sl]
 80087b2:	e5b9      	b.n	8008328 <_dtoa_r+0x698>
 80087b4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80087b6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8008814 <_dtoa_r+0xb84>
 80087ba:	b11b      	cbz	r3, 80087c4 <_dtoa_r+0xb34>
 80087bc:	f10a 0308 	add.w	r3, sl, #8
 80087c0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80087c2:	6013      	str	r3, [r2, #0]
 80087c4:	4650      	mov	r0, sl
 80087c6:	b019      	add	sp, #100	@ 0x64
 80087c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80087ce:	2b01      	cmp	r3, #1
 80087d0:	f77f ae37 	ble.w	8008442 <_dtoa_r+0x7b2>
 80087d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80087d6:	930a      	str	r3, [sp, #40]	@ 0x28
 80087d8:	2001      	movs	r0, #1
 80087da:	e655      	b.n	8008488 <_dtoa_r+0x7f8>
 80087dc:	9b00      	ldr	r3, [sp, #0]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	f77f aed6 	ble.w	8008590 <_dtoa_r+0x900>
 80087e4:	4656      	mov	r6, sl
 80087e6:	4621      	mov	r1, r4
 80087e8:	4648      	mov	r0, r9
 80087ea:	f7ff f9c6 	bl	8007b7a <quorem>
 80087ee:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80087f2:	f806 8b01 	strb.w	r8, [r6], #1
 80087f6:	9b00      	ldr	r3, [sp, #0]
 80087f8:	eba6 020a 	sub.w	r2, r6, sl
 80087fc:	4293      	cmp	r3, r2
 80087fe:	ddb3      	ble.n	8008768 <_dtoa_r+0xad8>
 8008800:	4649      	mov	r1, r9
 8008802:	2300      	movs	r3, #0
 8008804:	220a      	movs	r2, #10
 8008806:	4658      	mov	r0, fp
 8008808:	f000 f968 	bl	8008adc <__multadd>
 800880c:	4681      	mov	r9, r0
 800880e:	e7ea      	b.n	80087e6 <_dtoa_r+0xb56>
 8008810:	08009dbc 	.word	0x08009dbc
 8008814:	08009d40 	.word	0x08009d40

08008818 <_free_r>:
 8008818:	b538      	push	{r3, r4, r5, lr}
 800881a:	4605      	mov	r5, r0
 800881c:	2900      	cmp	r1, #0
 800881e:	d041      	beq.n	80088a4 <_free_r+0x8c>
 8008820:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008824:	1f0c      	subs	r4, r1, #4
 8008826:	2b00      	cmp	r3, #0
 8008828:	bfb8      	it	lt
 800882a:	18e4      	addlt	r4, r4, r3
 800882c:	f000 f8e8 	bl	8008a00 <__malloc_lock>
 8008830:	4a1d      	ldr	r2, [pc, #116]	@ (80088a8 <_free_r+0x90>)
 8008832:	6813      	ldr	r3, [r2, #0]
 8008834:	b933      	cbnz	r3, 8008844 <_free_r+0x2c>
 8008836:	6063      	str	r3, [r4, #4]
 8008838:	6014      	str	r4, [r2, #0]
 800883a:	4628      	mov	r0, r5
 800883c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008840:	f000 b8e4 	b.w	8008a0c <__malloc_unlock>
 8008844:	42a3      	cmp	r3, r4
 8008846:	d908      	bls.n	800885a <_free_r+0x42>
 8008848:	6820      	ldr	r0, [r4, #0]
 800884a:	1821      	adds	r1, r4, r0
 800884c:	428b      	cmp	r3, r1
 800884e:	bf01      	itttt	eq
 8008850:	6819      	ldreq	r1, [r3, #0]
 8008852:	685b      	ldreq	r3, [r3, #4]
 8008854:	1809      	addeq	r1, r1, r0
 8008856:	6021      	streq	r1, [r4, #0]
 8008858:	e7ed      	b.n	8008836 <_free_r+0x1e>
 800885a:	461a      	mov	r2, r3
 800885c:	685b      	ldr	r3, [r3, #4]
 800885e:	b10b      	cbz	r3, 8008864 <_free_r+0x4c>
 8008860:	42a3      	cmp	r3, r4
 8008862:	d9fa      	bls.n	800885a <_free_r+0x42>
 8008864:	6811      	ldr	r1, [r2, #0]
 8008866:	1850      	adds	r0, r2, r1
 8008868:	42a0      	cmp	r0, r4
 800886a:	d10b      	bne.n	8008884 <_free_r+0x6c>
 800886c:	6820      	ldr	r0, [r4, #0]
 800886e:	4401      	add	r1, r0
 8008870:	1850      	adds	r0, r2, r1
 8008872:	4283      	cmp	r3, r0
 8008874:	6011      	str	r1, [r2, #0]
 8008876:	d1e0      	bne.n	800883a <_free_r+0x22>
 8008878:	6818      	ldr	r0, [r3, #0]
 800887a:	685b      	ldr	r3, [r3, #4]
 800887c:	6053      	str	r3, [r2, #4]
 800887e:	4408      	add	r0, r1
 8008880:	6010      	str	r0, [r2, #0]
 8008882:	e7da      	b.n	800883a <_free_r+0x22>
 8008884:	d902      	bls.n	800888c <_free_r+0x74>
 8008886:	230c      	movs	r3, #12
 8008888:	602b      	str	r3, [r5, #0]
 800888a:	e7d6      	b.n	800883a <_free_r+0x22>
 800888c:	6820      	ldr	r0, [r4, #0]
 800888e:	1821      	adds	r1, r4, r0
 8008890:	428b      	cmp	r3, r1
 8008892:	bf04      	itt	eq
 8008894:	6819      	ldreq	r1, [r3, #0]
 8008896:	685b      	ldreq	r3, [r3, #4]
 8008898:	6063      	str	r3, [r4, #4]
 800889a:	bf04      	itt	eq
 800889c:	1809      	addeq	r1, r1, r0
 800889e:	6021      	streq	r1, [r4, #0]
 80088a0:	6054      	str	r4, [r2, #4]
 80088a2:	e7ca      	b.n	800883a <_free_r+0x22>
 80088a4:	bd38      	pop	{r3, r4, r5, pc}
 80088a6:	bf00      	nop
 80088a8:	20004488 	.word	0x20004488

080088ac <malloc>:
 80088ac:	4b02      	ldr	r3, [pc, #8]	@ (80088b8 <malloc+0xc>)
 80088ae:	4601      	mov	r1, r0
 80088b0:	6818      	ldr	r0, [r3, #0]
 80088b2:	f000 b825 	b.w	8008900 <_malloc_r>
 80088b6:	bf00      	nop
 80088b8:	2000001c 	.word	0x2000001c

080088bc <sbrk_aligned>:
 80088bc:	b570      	push	{r4, r5, r6, lr}
 80088be:	4e0f      	ldr	r6, [pc, #60]	@ (80088fc <sbrk_aligned+0x40>)
 80088c0:	460c      	mov	r4, r1
 80088c2:	6831      	ldr	r1, [r6, #0]
 80088c4:	4605      	mov	r5, r0
 80088c6:	b911      	cbnz	r1, 80088ce <sbrk_aligned+0x12>
 80088c8:	f000 fe46 	bl	8009558 <_sbrk_r>
 80088cc:	6030      	str	r0, [r6, #0]
 80088ce:	4621      	mov	r1, r4
 80088d0:	4628      	mov	r0, r5
 80088d2:	f000 fe41 	bl	8009558 <_sbrk_r>
 80088d6:	1c43      	adds	r3, r0, #1
 80088d8:	d103      	bne.n	80088e2 <sbrk_aligned+0x26>
 80088da:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80088de:	4620      	mov	r0, r4
 80088e0:	bd70      	pop	{r4, r5, r6, pc}
 80088e2:	1cc4      	adds	r4, r0, #3
 80088e4:	f024 0403 	bic.w	r4, r4, #3
 80088e8:	42a0      	cmp	r0, r4
 80088ea:	d0f8      	beq.n	80088de <sbrk_aligned+0x22>
 80088ec:	1a21      	subs	r1, r4, r0
 80088ee:	4628      	mov	r0, r5
 80088f0:	f000 fe32 	bl	8009558 <_sbrk_r>
 80088f4:	3001      	adds	r0, #1
 80088f6:	d1f2      	bne.n	80088de <sbrk_aligned+0x22>
 80088f8:	e7ef      	b.n	80088da <sbrk_aligned+0x1e>
 80088fa:	bf00      	nop
 80088fc:	20004484 	.word	0x20004484

08008900 <_malloc_r>:
 8008900:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008904:	1ccd      	adds	r5, r1, #3
 8008906:	f025 0503 	bic.w	r5, r5, #3
 800890a:	3508      	adds	r5, #8
 800890c:	2d0c      	cmp	r5, #12
 800890e:	bf38      	it	cc
 8008910:	250c      	movcc	r5, #12
 8008912:	2d00      	cmp	r5, #0
 8008914:	4606      	mov	r6, r0
 8008916:	db01      	blt.n	800891c <_malloc_r+0x1c>
 8008918:	42a9      	cmp	r1, r5
 800891a:	d904      	bls.n	8008926 <_malloc_r+0x26>
 800891c:	230c      	movs	r3, #12
 800891e:	6033      	str	r3, [r6, #0]
 8008920:	2000      	movs	r0, #0
 8008922:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008926:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80089fc <_malloc_r+0xfc>
 800892a:	f000 f869 	bl	8008a00 <__malloc_lock>
 800892e:	f8d8 3000 	ldr.w	r3, [r8]
 8008932:	461c      	mov	r4, r3
 8008934:	bb44      	cbnz	r4, 8008988 <_malloc_r+0x88>
 8008936:	4629      	mov	r1, r5
 8008938:	4630      	mov	r0, r6
 800893a:	f7ff ffbf 	bl	80088bc <sbrk_aligned>
 800893e:	1c43      	adds	r3, r0, #1
 8008940:	4604      	mov	r4, r0
 8008942:	d158      	bne.n	80089f6 <_malloc_r+0xf6>
 8008944:	f8d8 4000 	ldr.w	r4, [r8]
 8008948:	4627      	mov	r7, r4
 800894a:	2f00      	cmp	r7, #0
 800894c:	d143      	bne.n	80089d6 <_malloc_r+0xd6>
 800894e:	2c00      	cmp	r4, #0
 8008950:	d04b      	beq.n	80089ea <_malloc_r+0xea>
 8008952:	6823      	ldr	r3, [r4, #0]
 8008954:	4639      	mov	r1, r7
 8008956:	4630      	mov	r0, r6
 8008958:	eb04 0903 	add.w	r9, r4, r3
 800895c:	f000 fdfc 	bl	8009558 <_sbrk_r>
 8008960:	4581      	cmp	r9, r0
 8008962:	d142      	bne.n	80089ea <_malloc_r+0xea>
 8008964:	6821      	ldr	r1, [r4, #0]
 8008966:	1a6d      	subs	r5, r5, r1
 8008968:	4629      	mov	r1, r5
 800896a:	4630      	mov	r0, r6
 800896c:	f7ff ffa6 	bl	80088bc <sbrk_aligned>
 8008970:	3001      	adds	r0, #1
 8008972:	d03a      	beq.n	80089ea <_malloc_r+0xea>
 8008974:	6823      	ldr	r3, [r4, #0]
 8008976:	442b      	add	r3, r5
 8008978:	6023      	str	r3, [r4, #0]
 800897a:	f8d8 3000 	ldr.w	r3, [r8]
 800897e:	685a      	ldr	r2, [r3, #4]
 8008980:	bb62      	cbnz	r2, 80089dc <_malloc_r+0xdc>
 8008982:	f8c8 7000 	str.w	r7, [r8]
 8008986:	e00f      	b.n	80089a8 <_malloc_r+0xa8>
 8008988:	6822      	ldr	r2, [r4, #0]
 800898a:	1b52      	subs	r2, r2, r5
 800898c:	d420      	bmi.n	80089d0 <_malloc_r+0xd0>
 800898e:	2a0b      	cmp	r2, #11
 8008990:	d917      	bls.n	80089c2 <_malloc_r+0xc2>
 8008992:	1961      	adds	r1, r4, r5
 8008994:	42a3      	cmp	r3, r4
 8008996:	6025      	str	r5, [r4, #0]
 8008998:	bf18      	it	ne
 800899a:	6059      	strne	r1, [r3, #4]
 800899c:	6863      	ldr	r3, [r4, #4]
 800899e:	bf08      	it	eq
 80089a0:	f8c8 1000 	streq.w	r1, [r8]
 80089a4:	5162      	str	r2, [r4, r5]
 80089a6:	604b      	str	r3, [r1, #4]
 80089a8:	4630      	mov	r0, r6
 80089aa:	f000 f82f 	bl	8008a0c <__malloc_unlock>
 80089ae:	f104 000b 	add.w	r0, r4, #11
 80089b2:	1d23      	adds	r3, r4, #4
 80089b4:	f020 0007 	bic.w	r0, r0, #7
 80089b8:	1ac2      	subs	r2, r0, r3
 80089ba:	bf1c      	itt	ne
 80089bc:	1a1b      	subne	r3, r3, r0
 80089be:	50a3      	strne	r3, [r4, r2]
 80089c0:	e7af      	b.n	8008922 <_malloc_r+0x22>
 80089c2:	6862      	ldr	r2, [r4, #4]
 80089c4:	42a3      	cmp	r3, r4
 80089c6:	bf0c      	ite	eq
 80089c8:	f8c8 2000 	streq.w	r2, [r8]
 80089cc:	605a      	strne	r2, [r3, #4]
 80089ce:	e7eb      	b.n	80089a8 <_malloc_r+0xa8>
 80089d0:	4623      	mov	r3, r4
 80089d2:	6864      	ldr	r4, [r4, #4]
 80089d4:	e7ae      	b.n	8008934 <_malloc_r+0x34>
 80089d6:	463c      	mov	r4, r7
 80089d8:	687f      	ldr	r7, [r7, #4]
 80089da:	e7b6      	b.n	800894a <_malloc_r+0x4a>
 80089dc:	461a      	mov	r2, r3
 80089de:	685b      	ldr	r3, [r3, #4]
 80089e0:	42a3      	cmp	r3, r4
 80089e2:	d1fb      	bne.n	80089dc <_malloc_r+0xdc>
 80089e4:	2300      	movs	r3, #0
 80089e6:	6053      	str	r3, [r2, #4]
 80089e8:	e7de      	b.n	80089a8 <_malloc_r+0xa8>
 80089ea:	230c      	movs	r3, #12
 80089ec:	6033      	str	r3, [r6, #0]
 80089ee:	4630      	mov	r0, r6
 80089f0:	f000 f80c 	bl	8008a0c <__malloc_unlock>
 80089f4:	e794      	b.n	8008920 <_malloc_r+0x20>
 80089f6:	6005      	str	r5, [r0, #0]
 80089f8:	e7d6      	b.n	80089a8 <_malloc_r+0xa8>
 80089fa:	bf00      	nop
 80089fc:	20004488 	.word	0x20004488

08008a00 <__malloc_lock>:
 8008a00:	4801      	ldr	r0, [pc, #4]	@ (8008a08 <__malloc_lock+0x8>)
 8008a02:	f7ff b8aa 	b.w	8007b5a <__retarget_lock_acquire_recursive>
 8008a06:	bf00      	nop
 8008a08:	20004480 	.word	0x20004480

08008a0c <__malloc_unlock>:
 8008a0c:	4801      	ldr	r0, [pc, #4]	@ (8008a14 <__malloc_unlock+0x8>)
 8008a0e:	f7ff b8a5 	b.w	8007b5c <__retarget_lock_release_recursive>
 8008a12:	bf00      	nop
 8008a14:	20004480 	.word	0x20004480

08008a18 <_Balloc>:
 8008a18:	b570      	push	{r4, r5, r6, lr}
 8008a1a:	69c6      	ldr	r6, [r0, #28]
 8008a1c:	4604      	mov	r4, r0
 8008a1e:	460d      	mov	r5, r1
 8008a20:	b976      	cbnz	r6, 8008a40 <_Balloc+0x28>
 8008a22:	2010      	movs	r0, #16
 8008a24:	f7ff ff42 	bl	80088ac <malloc>
 8008a28:	4602      	mov	r2, r0
 8008a2a:	61e0      	str	r0, [r4, #28]
 8008a2c:	b920      	cbnz	r0, 8008a38 <_Balloc+0x20>
 8008a2e:	4b18      	ldr	r3, [pc, #96]	@ (8008a90 <_Balloc+0x78>)
 8008a30:	4818      	ldr	r0, [pc, #96]	@ (8008a94 <_Balloc+0x7c>)
 8008a32:	216b      	movs	r1, #107	@ 0x6b
 8008a34:	f000 fda0 	bl	8009578 <__assert_func>
 8008a38:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008a3c:	6006      	str	r6, [r0, #0]
 8008a3e:	60c6      	str	r6, [r0, #12]
 8008a40:	69e6      	ldr	r6, [r4, #28]
 8008a42:	68f3      	ldr	r3, [r6, #12]
 8008a44:	b183      	cbz	r3, 8008a68 <_Balloc+0x50>
 8008a46:	69e3      	ldr	r3, [r4, #28]
 8008a48:	68db      	ldr	r3, [r3, #12]
 8008a4a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008a4e:	b9b8      	cbnz	r0, 8008a80 <_Balloc+0x68>
 8008a50:	2101      	movs	r1, #1
 8008a52:	fa01 f605 	lsl.w	r6, r1, r5
 8008a56:	1d72      	adds	r2, r6, #5
 8008a58:	0092      	lsls	r2, r2, #2
 8008a5a:	4620      	mov	r0, r4
 8008a5c:	f000 fdaa 	bl	80095b4 <_calloc_r>
 8008a60:	b160      	cbz	r0, 8008a7c <_Balloc+0x64>
 8008a62:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008a66:	e00e      	b.n	8008a86 <_Balloc+0x6e>
 8008a68:	2221      	movs	r2, #33	@ 0x21
 8008a6a:	2104      	movs	r1, #4
 8008a6c:	4620      	mov	r0, r4
 8008a6e:	f000 fda1 	bl	80095b4 <_calloc_r>
 8008a72:	69e3      	ldr	r3, [r4, #28]
 8008a74:	60f0      	str	r0, [r6, #12]
 8008a76:	68db      	ldr	r3, [r3, #12]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d1e4      	bne.n	8008a46 <_Balloc+0x2e>
 8008a7c:	2000      	movs	r0, #0
 8008a7e:	bd70      	pop	{r4, r5, r6, pc}
 8008a80:	6802      	ldr	r2, [r0, #0]
 8008a82:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008a86:	2300      	movs	r3, #0
 8008a88:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008a8c:	e7f7      	b.n	8008a7e <_Balloc+0x66>
 8008a8e:	bf00      	nop
 8008a90:	08009d4d 	.word	0x08009d4d
 8008a94:	08009dcd 	.word	0x08009dcd

08008a98 <_Bfree>:
 8008a98:	b570      	push	{r4, r5, r6, lr}
 8008a9a:	69c6      	ldr	r6, [r0, #28]
 8008a9c:	4605      	mov	r5, r0
 8008a9e:	460c      	mov	r4, r1
 8008aa0:	b976      	cbnz	r6, 8008ac0 <_Bfree+0x28>
 8008aa2:	2010      	movs	r0, #16
 8008aa4:	f7ff ff02 	bl	80088ac <malloc>
 8008aa8:	4602      	mov	r2, r0
 8008aaa:	61e8      	str	r0, [r5, #28]
 8008aac:	b920      	cbnz	r0, 8008ab8 <_Bfree+0x20>
 8008aae:	4b09      	ldr	r3, [pc, #36]	@ (8008ad4 <_Bfree+0x3c>)
 8008ab0:	4809      	ldr	r0, [pc, #36]	@ (8008ad8 <_Bfree+0x40>)
 8008ab2:	218f      	movs	r1, #143	@ 0x8f
 8008ab4:	f000 fd60 	bl	8009578 <__assert_func>
 8008ab8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008abc:	6006      	str	r6, [r0, #0]
 8008abe:	60c6      	str	r6, [r0, #12]
 8008ac0:	b13c      	cbz	r4, 8008ad2 <_Bfree+0x3a>
 8008ac2:	69eb      	ldr	r3, [r5, #28]
 8008ac4:	6862      	ldr	r2, [r4, #4]
 8008ac6:	68db      	ldr	r3, [r3, #12]
 8008ac8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008acc:	6021      	str	r1, [r4, #0]
 8008ace:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008ad2:	bd70      	pop	{r4, r5, r6, pc}
 8008ad4:	08009d4d 	.word	0x08009d4d
 8008ad8:	08009dcd 	.word	0x08009dcd

08008adc <__multadd>:
 8008adc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ae0:	690d      	ldr	r5, [r1, #16]
 8008ae2:	4607      	mov	r7, r0
 8008ae4:	460c      	mov	r4, r1
 8008ae6:	461e      	mov	r6, r3
 8008ae8:	f101 0c14 	add.w	ip, r1, #20
 8008aec:	2000      	movs	r0, #0
 8008aee:	f8dc 3000 	ldr.w	r3, [ip]
 8008af2:	b299      	uxth	r1, r3
 8008af4:	fb02 6101 	mla	r1, r2, r1, r6
 8008af8:	0c1e      	lsrs	r6, r3, #16
 8008afa:	0c0b      	lsrs	r3, r1, #16
 8008afc:	fb02 3306 	mla	r3, r2, r6, r3
 8008b00:	b289      	uxth	r1, r1
 8008b02:	3001      	adds	r0, #1
 8008b04:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008b08:	4285      	cmp	r5, r0
 8008b0a:	f84c 1b04 	str.w	r1, [ip], #4
 8008b0e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008b12:	dcec      	bgt.n	8008aee <__multadd+0x12>
 8008b14:	b30e      	cbz	r6, 8008b5a <__multadd+0x7e>
 8008b16:	68a3      	ldr	r3, [r4, #8]
 8008b18:	42ab      	cmp	r3, r5
 8008b1a:	dc19      	bgt.n	8008b50 <__multadd+0x74>
 8008b1c:	6861      	ldr	r1, [r4, #4]
 8008b1e:	4638      	mov	r0, r7
 8008b20:	3101      	adds	r1, #1
 8008b22:	f7ff ff79 	bl	8008a18 <_Balloc>
 8008b26:	4680      	mov	r8, r0
 8008b28:	b928      	cbnz	r0, 8008b36 <__multadd+0x5a>
 8008b2a:	4602      	mov	r2, r0
 8008b2c:	4b0c      	ldr	r3, [pc, #48]	@ (8008b60 <__multadd+0x84>)
 8008b2e:	480d      	ldr	r0, [pc, #52]	@ (8008b64 <__multadd+0x88>)
 8008b30:	21ba      	movs	r1, #186	@ 0xba
 8008b32:	f000 fd21 	bl	8009578 <__assert_func>
 8008b36:	6922      	ldr	r2, [r4, #16]
 8008b38:	3202      	adds	r2, #2
 8008b3a:	f104 010c 	add.w	r1, r4, #12
 8008b3e:	0092      	lsls	r2, r2, #2
 8008b40:	300c      	adds	r0, #12
 8008b42:	f7ff f80c 	bl	8007b5e <memcpy>
 8008b46:	4621      	mov	r1, r4
 8008b48:	4638      	mov	r0, r7
 8008b4a:	f7ff ffa5 	bl	8008a98 <_Bfree>
 8008b4e:	4644      	mov	r4, r8
 8008b50:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008b54:	3501      	adds	r5, #1
 8008b56:	615e      	str	r6, [r3, #20]
 8008b58:	6125      	str	r5, [r4, #16]
 8008b5a:	4620      	mov	r0, r4
 8008b5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b60:	08009dbc 	.word	0x08009dbc
 8008b64:	08009dcd 	.word	0x08009dcd

08008b68 <__hi0bits>:
 8008b68:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008b6c:	4603      	mov	r3, r0
 8008b6e:	bf36      	itet	cc
 8008b70:	0403      	lslcc	r3, r0, #16
 8008b72:	2000      	movcs	r0, #0
 8008b74:	2010      	movcc	r0, #16
 8008b76:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008b7a:	bf3c      	itt	cc
 8008b7c:	021b      	lslcc	r3, r3, #8
 8008b7e:	3008      	addcc	r0, #8
 8008b80:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008b84:	bf3c      	itt	cc
 8008b86:	011b      	lslcc	r3, r3, #4
 8008b88:	3004      	addcc	r0, #4
 8008b8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008b8e:	bf3c      	itt	cc
 8008b90:	009b      	lslcc	r3, r3, #2
 8008b92:	3002      	addcc	r0, #2
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	db05      	blt.n	8008ba4 <__hi0bits+0x3c>
 8008b98:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008b9c:	f100 0001 	add.w	r0, r0, #1
 8008ba0:	bf08      	it	eq
 8008ba2:	2020      	moveq	r0, #32
 8008ba4:	4770      	bx	lr

08008ba6 <__lo0bits>:
 8008ba6:	6803      	ldr	r3, [r0, #0]
 8008ba8:	4602      	mov	r2, r0
 8008baa:	f013 0007 	ands.w	r0, r3, #7
 8008bae:	d00b      	beq.n	8008bc8 <__lo0bits+0x22>
 8008bb0:	07d9      	lsls	r1, r3, #31
 8008bb2:	d421      	bmi.n	8008bf8 <__lo0bits+0x52>
 8008bb4:	0798      	lsls	r0, r3, #30
 8008bb6:	bf49      	itett	mi
 8008bb8:	085b      	lsrmi	r3, r3, #1
 8008bba:	089b      	lsrpl	r3, r3, #2
 8008bbc:	2001      	movmi	r0, #1
 8008bbe:	6013      	strmi	r3, [r2, #0]
 8008bc0:	bf5c      	itt	pl
 8008bc2:	6013      	strpl	r3, [r2, #0]
 8008bc4:	2002      	movpl	r0, #2
 8008bc6:	4770      	bx	lr
 8008bc8:	b299      	uxth	r1, r3
 8008bca:	b909      	cbnz	r1, 8008bd0 <__lo0bits+0x2a>
 8008bcc:	0c1b      	lsrs	r3, r3, #16
 8008bce:	2010      	movs	r0, #16
 8008bd0:	b2d9      	uxtb	r1, r3
 8008bd2:	b909      	cbnz	r1, 8008bd8 <__lo0bits+0x32>
 8008bd4:	3008      	adds	r0, #8
 8008bd6:	0a1b      	lsrs	r3, r3, #8
 8008bd8:	0719      	lsls	r1, r3, #28
 8008bda:	bf04      	itt	eq
 8008bdc:	091b      	lsreq	r3, r3, #4
 8008bde:	3004      	addeq	r0, #4
 8008be0:	0799      	lsls	r1, r3, #30
 8008be2:	bf04      	itt	eq
 8008be4:	089b      	lsreq	r3, r3, #2
 8008be6:	3002      	addeq	r0, #2
 8008be8:	07d9      	lsls	r1, r3, #31
 8008bea:	d403      	bmi.n	8008bf4 <__lo0bits+0x4e>
 8008bec:	085b      	lsrs	r3, r3, #1
 8008bee:	f100 0001 	add.w	r0, r0, #1
 8008bf2:	d003      	beq.n	8008bfc <__lo0bits+0x56>
 8008bf4:	6013      	str	r3, [r2, #0]
 8008bf6:	4770      	bx	lr
 8008bf8:	2000      	movs	r0, #0
 8008bfa:	4770      	bx	lr
 8008bfc:	2020      	movs	r0, #32
 8008bfe:	4770      	bx	lr

08008c00 <__i2b>:
 8008c00:	b510      	push	{r4, lr}
 8008c02:	460c      	mov	r4, r1
 8008c04:	2101      	movs	r1, #1
 8008c06:	f7ff ff07 	bl	8008a18 <_Balloc>
 8008c0a:	4602      	mov	r2, r0
 8008c0c:	b928      	cbnz	r0, 8008c1a <__i2b+0x1a>
 8008c0e:	4b05      	ldr	r3, [pc, #20]	@ (8008c24 <__i2b+0x24>)
 8008c10:	4805      	ldr	r0, [pc, #20]	@ (8008c28 <__i2b+0x28>)
 8008c12:	f240 1145 	movw	r1, #325	@ 0x145
 8008c16:	f000 fcaf 	bl	8009578 <__assert_func>
 8008c1a:	2301      	movs	r3, #1
 8008c1c:	6144      	str	r4, [r0, #20]
 8008c1e:	6103      	str	r3, [r0, #16]
 8008c20:	bd10      	pop	{r4, pc}
 8008c22:	bf00      	nop
 8008c24:	08009dbc 	.word	0x08009dbc
 8008c28:	08009dcd 	.word	0x08009dcd

08008c2c <__multiply>:
 8008c2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c30:	4614      	mov	r4, r2
 8008c32:	690a      	ldr	r2, [r1, #16]
 8008c34:	6923      	ldr	r3, [r4, #16]
 8008c36:	429a      	cmp	r2, r3
 8008c38:	bfa8      	it	ge
 8008c3a:	4623      	movge	r3, r4
 8008c3c:	460f      	mov	r7, r1
 8008c3e:	bfa4      	itt	ge
 8008c40:	460c      	movge	r4, r1
 8008c42:	461f      	movge	r7, r3
 8008c44:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008c48:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008c4c:	68a3      	ldr	r3, [r4, #8]
 8008c4e:	6861      	ldr	r1, [r4, #4]
 8008c50:	eb0a 0609 	add.w	r6, sl, r9
 8008c54:	42b3      	cmp	r3, r6
 8008c56:	b085      	sub	sp, #20
 8008c58:	bfb8      	it	lt
 8008c5a:	3101      	addlt	r1, #1
 8008c5c:	f7ff fedc 	bl	8008a18 <_Balloc>
 8008c60:	b930      	cbnz	r0, 8008c70 <__multiply+0x44>
 8008c62:	4602      	mov	r2, r0
 8008c64:	4b44      	ldr	r3, [pc, #272]	@ (8008d78 <__multiply+0x14c>)
 8008c66:	4845      	ldr	r0, [pc, #276]	@ (8008d7c <__multiply+0x150>)
 8008c68:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008c6c:	f000 fc84 	bl	8009578 <__assert_func>
 8008c70:	f100 0514 	add.w	r5, r0, #20
 8008c74:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008c78:	462b      	mov	r3, r5
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	4543      	cmp	r3, r8
 8008c7e:	d321      	bcc.n	8008cc4 <__multiply+0x98>
 8008c80:	f107 0114 	add.w	r1, r7, #20
 8008c84:	f104 0214 	add.w	r2, r4, #20
 8008c88:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8008c8c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8008c90:	9302      	str	r3, [sp, #8]
 8008c92:	1b13      	subs	r3, r2, r4
 8008c94:	3b15      	subs	r3, #21
 8008c96:	f023 0303 	bic.w	r3, r3, #3
 8008c9a:	3304      	adds	r3, #4
 8008c9c:	f104 0715 	add.w	r7, r4, #21
 8008ca0:	42ba      	cmp	r2, r7
 8008ca2:	bf38      	it	cc
 8008ca4:	2304      	movcc	r3, #4
 8008ca6:	9301      	str	r3, [sp, #4]
 8008ca8:	9b02      	ldr	r3, [sp, #8]
 8008caa:	9103      	str	r1, [sp, #12]
 8008cac:	428b      	cmp	r3, r1
 8008cae:	d80c      	bhi.n	8008cca <__multiply+0x9e>
 8008cb0:	2e00      	cmp	r6, #0
 8008cb2:	dd03      	ble.n	8008cbc <__multiply+0x90>
 8008cb4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d05b      	beq.n	8008d74 <__multiply+0x148>
 8008cbc:	6106      	str	r6, [r0, #16]
 8008cbe:	b005      	add	sp, #20
 8008cc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cc4:	f843 2b04 	str.w	r2, [r3], #4
 8008cc8:	e7d8      	b.n	8008c7c <__multiply+0x50>
 8008cca:	f8b1 a000 	ldrh.w	sl, [r1]
 8008cce:	f1ba 0f00 	cmp.w	sl, #0
 8008cd2:	d024      	beq.n	8008d1e <__multiply+0xf2>
 8008cd4:	f104 0e14 	add.w	lr, r4, #20
 8008cd8:	46a9      	mov	r9, r5
 8008cda:	f04f 0c00 	mov.w	ip, #0
 8008cde:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008ce2:	f8d9 3000 	ldr.w	r3, [r9]
 8008ce6:	fa1f fb87 	uxth.w	fp, r7
 8008cea:	b29b      	uxth	r3, r3
 8008cec:	fb0a 330b 	mla	r3, sl, fp, r3
 8008cf0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8008cf4:	f8d9 7000 	ldr.w	r7, [r9]
 8008cf8:	4463      	add	r3, ip
 8008cfa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008cfe:	fb0a c70b 	mla	r7, sl, fp, ip
 8008d02:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8008d06:	b29b      	uxth	r3, r3
 8008d08:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008d0c:	4572      	cmp	r2, lr
 8008d0e:	f849 3b04 	str.w	r3, [r9], #4
 8008d12:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008d16:	d8e2      	bhi.n	8008cde <__multiply+0xb2>
 8008d18:	9b01      	ldr	r3, [sp, #4]
 8008d1a:	f845 c003 	str.w	ip, [r5, r3]
 8008d1e:	9b03      	ldr	r3, [sp, #12]
 8008d20:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008d24:	3104      	adds	r1, #4
 8008d26:	f1b9 0f00 	cmp.w	r9, #0
 8008d2a:	d021      	beq.n	8008d70 <__multiply+0x144>
 8008d2c:	682b      	ldr	r3, [r5, #0]
 8008d2e:	f104 0c14 	add.w	ip, r4, #20
 8008d32:	46ae      	mov	lr, r5
 8008d34:	f04f 0a00 	mov.w	sl, #0
 8008d38:	f8bc b000 	ldrh.w	fp, [ip]
 8008d3c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008d40:	fb09 770b 	mla	r7, r9, fp, r7
 8008d44:	4457      	add	r7, sl
 8008d46:	b29b      	uxth	r3, r3
 8008d48:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008d4c:	f84e 3b04 	str.w	r3, [lr], #4
 8008d50:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008d54:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008d58:	f8be 3000 	ldrh.w	r3, [lr]
 8008d5c:	fb09 330a 	mla	r3, r9, sl, r3
 8008d60:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8008d64:	4562      	cmp	r2, ip
 8008d66:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008d6a:	d8e5      	bhi.n	8008d38 <__multiply+0x10c>
 8008d6c:	9f01      	ldr	r7, [sp, #4]
 8008d6e:	51eb      	str	r3, [r5, r7]
 8008d70:	3504      	adds	r5, #4
 8008d72:	e799      	b.n	8008ca8 <__multiply+0x7c>
 8008d74:	3e01      	subs	r6, #1
 8008d76:	e79b      	b.n	8008cb0 <__multiply+0x84>
 8008d78:	08009dbc 	.word	0x08009dbc
 8008d7c:	08009dcd 	.word	0x08009dcd

08008d80 <__pow5mult>:
 8008d80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d84:	4615      	mov	r5, r2
 8008d86:	f012 0203 	ands.w	r2, r2, #3
 8008d8a:	4607      	mov	r7, r0
 8008d8c:	460e      	mov	r6, r1
 8008d8e:	d007      	beq.n	8008da0 <__pow5mult+0x20>
 8008d90:	4c25      	ldr	r4, [pc, #148]	@ (8008e28 <__pow5mult+0xa8>)
 8008d92:	3a01      	subs	r2, #1
 8008d94:	2300      	movs	r3, #0
 8008d96:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008d9a:	f7ff fe9f 	bl	8008adc <__multadd>
 8008d9e:	4606      	mov	r6, r0
 8008da0:	10ad      	asrs	r5, r5, #2
 8008da2:	d03d      	beq.n	8008e20 <__pow5mult+0xa0>
 8008da4:	69fc      	ldr	r4, [r7, #28]
 8008da6:	b97c      	cbnz	r4, 8008dc8 <__pow5mult+0x48>
 8008da8:	2010      	movs	r0, #16
 8008daa:	f7ff fd7f 	bl	80088ac <malloc>
 8008dae:	4602      	mov	r2, r0
 8008db0:	61f8      	str	r0, [r7, #28]
 8008db2:	b928      	cbnz	r0, 8008dc0 <__pow5mult+0x40>
 8008db4:	4b1d      	ldr	r3, [pc, #116]	@ (8008e2c <__pow5mult+0xac>)
 8008db6:	481e      	ldr	r0, [pc, #120]	@ (8008e30 <__pow5mult+0xb0>)
 8008db8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008dbc:	f000 fbdc 	bl	8009578 <__assert_func>
 8008dc0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008dc4:	6004      	str	r4, [r0, #0]
 8008dc6:	60c4      	str	r4, [r0, #12]
 8008dc8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008dcc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008dd0:	b94c      	cbnz	r4, 8008de6 <__pow5mult+0x66>
 8008dd2:	f240 2171 	movw	r1, #625	@ 0x271
 8008dd6:	4638      	mov	r0, r7
 8008dd8:	f7ff ff12 	bl	8008c00 <__i2b>
 8008ddc:	2300      	movs	r3, #0
 8008dde:	f8c8 0008 	str.w	r0, [r8, #8]
 8008de2:	4604      	mov	r4, r0
 8008de4:	6003      	str	r3, [r0, #0]
 8008de6:	f04f 0900 	mov.w	r9, #0
 8008dea:	07eb      	lsls	r3, r5, #31
 8008dec:	d50a      	bpl.n	8008e04 <__pow5mult+0x84>
 8008dee:	4631      	mov	r1, r6
 8008df0:	4622      	mov	r2, r4
 8008df2:	4638      	mov	r0, r7
 8008df4:	f7ff ff1a 	bl	8008c2c <__multiply>
 8008df8:	4631      	mov	r1, r6
 8008dfa:	4680      	mov	r8, r0
 8008dfc:	4638      	mov	r0, r7
 8008dfe:	f7ff fe4b 	bl	8008a98 <_Bfree>
 8008e02:	4646      	mov	r6, r8
 8008e04:	106d      	asrs	r5, r5, #1
 8008e06:	d00b      	beq.n	8008e20 <__pow5mult+0xa0>
 8008e08:	6820      	ldr	r0, [r4, #0]
 8008e0a:	b938      	cbnz	r0, 8008e1c <__pow5mult+0x9c>
 8008e0c:	4622      	mov	r2, r4
 8008e0e:	4621      	mov	r1, r4
 8008e10:	4638      	mov	r0, r7
 8008e12:	f7ff ff0b 	bl	8008c2c <__multiply>
 8008e16:	6020      	str	r0, [r4, #0]
 8008e18:	f8c0 9000 	str.w	r9, [r0]
 8008e1c:	4604      	mov	r4, r0
 8008e1e:	e7e4      	b.n	8008dea <__pow5mult+0x6a>
 8008e20:	4630      	mov	r0, r6
 8008e22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e26:	bf00      	nop
 8008e28:	08009e28 	.word	0x08009e28
 8008e2c:	08009d4d 	.word	0x08009d4d
 8008e30:	08009dcd 	.word	0x08009dcd

08008e34 <__lshift>:
 8008e34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e38:	460c      	mov	r4, r1
 8008e3a:	6849      	ldr	r1, [r1, #4]
 8008e3c:	6923      	ldr	r3, [r4, #16]
 8008e3e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008e42:	68a3      	ldr	r3, [r4, #8]
 8008e44:	4607      	mov	r7, r0
 8008e46:	4691      	mov	r9, r2
 8008e48:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008e4c:	f108 0601 	add.w	r6, r8, #1
 8008e50:	42b3      	cmp	r3, r6
 8008e52:	db0b      	blt.n	8008e6c <__lshift+0x38>
 8008e54:	4638      	mov	r0, r7
 8008e56:	f7ff fddf 	bl	8008a18 <_Balloc>
 8008e5a:	4605      	mov	r5, r0
 8008e5c:	b948      	cbnz	r0, 8008e72 <__lshift+0x3e>
 8008e5e:	4602      	mov	r2, r0
 8008e60:	4b28      	ldr	r3, [pc, #160]	@ (8008f04 <__lshift+0xd0>)
 8008e62:	4829      	ldr	r0, [pc, #164]	@ (8008f08 <__lshift+0xd4>)
 8008e64:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008e68:	f000 fb86 	bl	8009578 <__assert_func>
 8008e6c:	3101      	adds	r1, #1
 8008e6e:	005b      	lsls	r3, r3, #1
 8008e70:	e7ee      	b.n	8008e50 <__lshift+0x1c>
 8008e72:	2300      	movs	r3, #0
 8008e74:	f100 0114 	add.w	r1, r0, #20
 8008e78:	f100 0210 	add.w	r2, r0, #16
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	4553      	cmp	r3, sl
 8008e80:	db33      	blt.n	8008eea <__lshift+0xb6>
 8008e82:	6920      	ldr	r0, [r4, #16]
 8008e84:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008e88:	f104 0314 	add.w	r3, r4, #20
 8008e8c:	f019 091f 	ands.w	r9, r9, #31
 8008e90:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008e94:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008e98:	d02b      	beq.n	8008ef2 <__lshift+0xbe>
 8008e9a:	f1c9 0e20 	rsb	lr, r9, #32
 8008e9e:	468a      	mov	sl, r1
 8008ea0:	2200      	movs	r2, #0
 8008ea2:	6818      	ldr	r0, [r3, #0]
 8008ea4:	fa00 f009 	lsl.w	r0, r0, r9
 8008ea8:	4310      	orrs	r0, r2
 8008eaa:	f84a 0b04 	str.w	r0, [sl], #4
 8008eae:	f853 2b04 	ldr.w	r2, [r3], #4
 8008eb2:	459c      	cmp	ip, r3
 8008eb4:	fa22 f20e 	lsr.w	r2, r2, lr
 8008eb8:	d8f3      	bhi.n	8008ea2 <__lshift+0x6e>
 8008eba:	ebac 0304 	sub.w	r3, ip, r4
 8008ebe:	3b15      	subs	r3, #21
 8008ec0:	f023 0303 	bic.w	r3, r3, #3
 8008ec4:	3304      	adds	r3, #4
 8008ec6:	f104 0015 	add.w	r0, r4, #21
 8008eca:	4584      	cmp	ip, r0
 8008ecc:	bf38      	it	cc
 8008ece:	2304      	movcc	r3, #4
 8008ed0:	50ca      	str	r2, [r1, r3]
 8008ed2:	b10a      	cbz	r2, 8008ed8 <__lshift+0xa4>
 8008ed4:	f108 0602 	add.w	r6, r8, #2
 8008ed8:	3e01      	subs	r6, #1
 8008eda:	4638      	mov	r0, r7
 8008edc:	612e      	str	r6, [r5, #16]
 8008ede:	4621      	mov	r1, r4
 8008ee0:	f7ff fdda 	bl	8008a98 <_Bfree>
 8008ee4:	4628      	mov	r0, r5
 8008ee6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008eea:	f842 0f04 	str.w	r0, [r2, #4]!
 8008eee:	3301      	adds	r3, #1
 8008ef0:	e7c5      	b.n	8008e7e <__lshift+0x4a>
 8008ef2:	3904      	subs	r1, #4
 8008ef4:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ef8:	f841 2f04 	str.w	r2, [r1, #4]!
 8008efc:	459c      	cmp	ip, r3
 8008efe:	d8f9      	bhi.n	8008ef4 <__lshift+0xc0>
 8008f00:	e7ea      	b.n	8008ed8 <__lshift+0xa4>
 8008f02:	bf00      	nop
 8008f04:	08009dbc 	.word	0x08009dbc
 8008f08:	08009dcd 	.word	0x08009dcd

08008f0c <__mcmp>:
 8008f0c:	690a      	ldr	r2, [r1, #16]
 8008f0e:	4603      	mov	r3, r0
 8008f10:	6900      	ldr	r0, [r0, #16]
 8008f12:	1a80      	subs	r0, r0, r2
 8008f14:	b530      	push	{r4, r5, lr}
 8008f16:	d10e      	bne.n	8008f36 <__mcmp+0x2a>
 8008f18:	3314      	adds	r3, #20
 8008f1a:	3114      	adds	r1, #20
 8008f1c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008f20:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008f24:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008f28:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008f2c:	4295      	cmp	r5, r2
 8008f2e:	d003      	beq.n	8008f38 <__mcmp+0x2c>
 8008f30:	d205      	bcs.n	8008f3e <__mcmp+0x32>
 8008f32:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008f36:	bd30      	pop	{r4, r5, pc}
 8008f38:	42a3      	cmp	r3, r4
 8008f3a:	d3f3      	bcc.n	8008f24 <__mcmp+0x18>
 8008f3c:	e7fb      	b.n	8008f36 <__mcmp+0x2a>
 8008f3e:	2001      	movs	r0, #1
 8008f40:	e7f9      	b.n	8008f36 <__mcmp+0x2a>
	...

08008f44 <__mdiff>:
 8008f44:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f48:	4689      	mov	r9, r1
 8008f4a:	4606      	mov	r6, r0
 8008f4c:	4611      	mov	r1, r2
 8008f4e:	4648      	mov	r0, r9
 8008f50:	4614      	mov	r4, r2
 8008f52:	f7ff ffdb 	bl	8008f0c <__mcmp>
 8008f56:	1e05      	subs	r5, r0, #0
 8008f58:	d112      	bne.n	8008f80 <__mdiff+0x3c>
 8008f5a:	4629      	mov	r1, r5
 8008f5c:	4630      	mov	r0, r6
 8008f5e:	f7ff fd5b 	bl	8008a18 <_Balloc>
 8008f62:	4602      	mov	r2, r0
 8008f64:	b928      	cbnz	r0, 8008f72 <__mdiff+0x2e>
 8008f66:	4b3f      	ldr	r3, [pc, #252]	@ (8009064 <__mdiff+0x120>)
 8008f68:	f240 2137 	movw	r1, #567	@ 0x237
 8008f6c:	483e      	ldr	r0, [pc, #248]	@ (8009068 <__mdiff+0x124>)
 8008f6e:	f000 fb03 	bl	8009578 <__assert_func>
 8008f72:	2301      	movs	r3, #1
 8008f74:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008f78:	4610      	mov	r0, r2
 8008f7a:	b003      	add	sp, #12
 8008f7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f80:	bfbc      	itt	lt
 8008f82:	464b      	movlt	r3, r9
 8008f84:	46a1      	movlt	r9, r4
 8008f86:	4630      	mov	r0, r6
 8008f88:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008f8c:	bfba      	itte	lt
 8008f8e:	461c      	movlt	r4, r3
 8008f90:	2501      	movlt	r5, #1
 8008f92:	2500      	movge	r5, #0
 8008f94:	f7ff fd40 	bl	8008a18 <_Balloc>
 8008f98:	4602      	mov	r2, r0
 8008f9a:	b918      	cbnz	r0, 8008fa4 <__mdiff+0x60>
 8008f9c:	4b31      	ldr	r3, [pc, #196]	@ (8009064 <__mdiff+0x120>)
 8008f9e:	f240 2145 	movw	r1, #581	@ 0x245
 8008fa2:	e7e3      	b.n	8008f6c <__mdiff+0x28>
 8008fa4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008fa8:	6926      	ldr	r6, [r4, #16]
 8008faa:	60c5      	str	r5, [r0, #12]
 8008fac:	f109 0310 	add.w	r3, r9, #16
 8008fb0:	f109 0514 	add.w	r5, r9, #20
 8008fb4:	f104 0e14 	add.w	lr, r4, #20
 8008fb8:	f100 0b14 	add.w	fp, r0, #20
 8008fbc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008fc0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008fc4:	9301      	str	r3, [sp, #4]
 8008fc6:	46d9      	mov	r9, fp
 8008fc8:	f04f 0c00 	mov.w	ip, #0
 8008fcc:	9b01      	ldr	r3, [sp, #4]
 8008fce:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008fd2:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008fd6:	9301      	str	r3, [sp, #4]
 8008fd8:	fa1f f38a 	uxth.w	r3, sl
 8008fdc:	4619      	mov	r1, r3
 8008fde:	b283      	uxth	r3, r0
 8008fe0:	1acb      	subs	r3, r1, r3
 8008fe2:	0c00      	lsrs	r0, r0, #16
 8008fe4:	4463      	add	r3, ip
 8008fe6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008fea:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008fee:	b29b      	uxth	r3, r3
 8008ff0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008ff4:	4576      	cmp	r6, lr
 8008ff6:	f849 3b04 	str.w	r3, [r9], #4
 8008ffa:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008ffe:	d8e5      	bhi.n	8008fcc <__mdiff+0x88>
 8009000:	1b33      	subs	r3, r6, r4
 8009002:	3b15      	subs	r3, #21
 8009004:	f023 0303 	bic.w	r3, r3, #3
 8009008:	3415      	adds	r4, #21
 800900a:	3304      	adds	r3, #4
 800900c:	42a6      	cmp	r6, r4
 800900e:	bf38      	it	cc
 8009010:	2304      	movcc	r3, #4
 8009012:	441d      	add	r5, r3
 8009014:	445b      	add	r3, fp
 8009016:	461e      	mov	r6, r3
 8009018:	462c      	mov	r4, r5
 800901a:	4544      	cmp	r4, r8
 800901c:	d30e      	bcc.n	800903c <__mdiff+0xf8>
 800901e:	f108 0103 	add.w	r1, r8, #3
 8009022:	1b49      	subs	r1, r1, r5
 8009024:	f021 0103 	bic.w	r1, r1, #3
 8009028:	3d03      	subs	r5, #3
 800902a:	45a8      	cmp	r8, r5
 800902c:	bf38      	it	cc
 800902e:	2100      	movcc	r1, #0
 8009030:	440b      	add	r3, r1
 8009032:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009036:	b191      	cbz	r1, 800905e <__mdiff+0x11a>
 8009038:	6117      	str	r7, [r2, #16]
 800903a:	e79d      	b.n	8008f78 <__mdiff+0x34>
 800903c:	f854 1b04 	ldr.w	r1, [r4], #4
 8009040:	46e6      	mov	lr, ip
 8009042:	0c08      	lsrs	r0, r1, #16
 8009044:	fa1c fc81 	uxtah	ip, ip, r1
 8009048:	4471      	add	r1, lr
 800904a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800904e:	b289      	uxth	r1, r1
 8009050:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009054:	f846 1b04 	str.w	r1, [r6], #4
 8009058:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800905c:	e7dd      	b.n	800901a <__mdiff+0xd6>
 800905e:	3f01      	subs	r7, #1
 8009060:	e7e7      	b.n	8009032 <__mdiff+0xee>
 8009062:	bf00      	nop
 8009064:	08009dbc 	.word	0x08009dbc
 8009068:	08009dcd 	.word	0x08009dcd

0800906c <__d2b>:
 800906c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009070:	460f      	mov	r7, r1
 8009072:	2101      	movs	r1, #1
 8009074:	ec59 8b10 	vmov	r8, r9, d0
 8009078:	4616      	mov	r6, r2
 800907a:	f7ff fccd 	bl	8008a18 <_Balloc>
 800907e:	4604      	mov	r4, r0
 8009080:	b930      	cbnz	r0, 8009090 <__d2b+0x24>
 8009082:	4602      	mov	r2, r0
 8009084:	4b23      	ldr	r3, [pc, #140]	@ (8009114 <__d2b+0xa8>)
 8009086:	4824      	ldr	r0, [pc, #144]	@ (8009118 <__d2b+0xac>)
 8009088:	f240 310f 	movw	r1, #783	@ 0x30f
 800908c:	f000 fa74 	bl	8009578 <__assert_func>
 8009090:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009094:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009098:	b10d      	cbz	r5, 800909e <__d2b+0x32>
 800909a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800909e:	9301      	str	r3, [sp, #4]
 80090a0:	f1b8 0300 	subs.w	r3, r8, #0
 80090a4:	d023      	beq.n	80090ee <__d2b+0x82>
 80090a6:	4668      	mov	r0, sp
 80090a8:	9300      	str	r3, [sp, #0]
 80090aa:	f7ff fd7c 	bl	8008ba6 <__lo0bits>
 80090ae:	e9dd 1200 	ldrd	r1, r2, [sp]
 80090b2:	b1d0      	cbz	r0, 80090ea <__d2b+0x7e>
 80090b4:	f1c0 0320 	rsb	r3, r0, #32
 80090b8:	fa02 f303 	lsl.w	r3, r2, r3
 80090bc:	430b      	orrs	r3, r1
 80090be:	40c2      	lsrs	r2, r0
 80090c0:	6163      	str	r3, [r4, #20]
 80090c2:	9201      	str	r2, [sp, #4]
 80090c4:	9b01      	ldr	r3, [sp, #4]
 80090c6:	61a3      	str	r3, [r4, #24]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	bf0c      	ite	eq
 80090cc:	2201      	moveq	r2, #1
 80090ce:	2202      	movne	r2, #2
 80090d0:	6122      	str	r2, [r4, #16]
 80090d2:	b1a5      	cbz	r5, 80090fe <__d2b+0x92>
 80090d4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80090d8:	4405      	add	r5, r0
 80090da:	603d      	str	r5, [r7, #0]
 80090dc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80090e0:	6030      	str	r0, [r6, #0]
 80090e2:	4620      	mov	r0, r4
 80090e4:	b003      	add	sp, #12
 80090e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80090ea:	6161      	str	r1, [r4, #20]
 80090ec:	e7ea      	b.n	80090c4 <__d2b+0x58>
 80090ee:	a801      	add	r0, sp, #4
 80090f0:	f7ff fd59 	bl	8008ba6 <__lo0bits>
 80090f4:	9b01      	ldr	r3, [sp, #4]
 80090f6:	6163      	str	r3, [r4, #20]
 80090f8:	3020      	adds	r0, #32
 80090fa:	2201      	movs	r2, #1
 80090fc:	e7e8      	b.n	80090d0 <__d2b+0x64>
 80090fe:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009102:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009106:	6038      	str	r0, [r7, #0]
 8009108:	6918      	ldr	r0, [r3, #16]
 800910a:	f7ff fd2d 	bl	8008b68 <__hi0bits>
 800910e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009112:	e7e5      	b.n	80090e0 <__d2b+0x74>
 8009114:	08009dbc 	.word	0x08009dbc
 8009118:	08009dcd 	.word	0x08009dcd

0800911c <__ssputs_r>:
 800911c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009120:	688e      	ldr	r6, [r1, #8]
 8009122:	461f      	mov	r7, r3
 8009124:	42be      	cmp	r6, r7
 8009126:	680b      	ldr	r3, [r1, #0]
 8009128:	4682      	mov	sl, r0
 800912a:	460c      	mov	r4, r1
 800912c:	4690      	mov	r8, r2
 800912e:	d82d      	bhi.n	800918c <__ssputs_r+0x70>
 8009130:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009134:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009138:	d026      	beq.n	8009188 <__ssputs_r+0x6c>
 800913a:	6965      	ldr	r5, [r4, #20]
 800913c:	6909      	ldr	r1, [r1, #16]
 800913e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009142:	eba3 0901 	sub.w	r9, r3, r1
 8009146:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800914a:	1c7b      	adds	r3, r7, #1
 800914c:	444b      	add	r3, r9
 800914e:	106d      	asrs	r5, r5, #1
 8009150:	429d      	cmp	r5, r3
 8009152:	bf38      	it	cc
 8009154:	461d      	movcc	r5, r3
 8009156:	0553      	lsls	r3, r2, #21
 8009158:	d527      	bpl.n	80091aa <__ssputs_r+0x8e>
 800915a:	4629      	mov	r1, r5
 800915c:	f7ff fbd0 	bl	8008900 <_malloc_r>
 8009160:	4606      	mov	r6, r0
 8009162:	b360      	cbz	r0, 80091be <__ssputs_r+0xa2>
 8009164:	6921      	ldr	r1, [r4, #16]
 8009166:	464a      	mov	r2, r9
 8009168:	f7fe fcf9 	bl	8007b5e <memcpy>
 800916c:	89a3      	ldrh	r3, [r4, #12]
 800916e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009172:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009176:	81a3      	strh	r3, [r4, #12]
 8009178:	6126      	str	r6, [r4, #16]
 800917a:	6165      	str	r5, [r4, #20]
 800917c:	444e      	add	r6, r9
 800917e:	eba5 0509 	sub.w	r5, r5, r9
 8009182:	6026      	str	r6, [r4, #0]
 8009184:	60a5      	str	r5, [r4, #8]
 8009186:	463e      	mov	r6, r7
 8009188:	42be      	cmp	r6, r7
 800918a:	d900      	bls.n	800918e <__ssputs_r+0x72>
 800918c:	463e      	mov	r6, r7
 800918e:	6820      	ldr	r0, [r4, #0]
 8009190:	4632      	mov	r2, r6
 8009192:	4641      	mov	r1, r8
 8009194:	f000 f9c6 	bl	8009524 <memmove>
 8009198:	68a3      	ldr	r3, [r4, #8]
 800919a:	1b9b      	subs	r3, r3, r6
 800919c:	60a3      	str	r3, [r4, #8]
 800919e:	6823      	ldr	r3, [r4, #0]
 80091a0:	4433      	add	r3, r6
 80091a2:	6023      	str	r3, [r4, #0]
 80091a4:	2000      	movs	r0, #0
 80091a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091aa:	462a      	mov	r2, r5
 80091ac:	f000 fa28 	bl	8009600 <_realloc_r>
 80091b0:	4606      	mov	r6, r0
 80091b2:	2800      	cmp	r0, #0
 80091b4:	d1e0      	bne.n	8009178 <__ssputs_r+0x5c>
 80091b6:	6921      	ldr	r1, [r4, #16]
 80091b8:	4650      	mov	r0, sl
 80091ba:	f7ff fb2d 	bl	8008818 <_free_r>
 80091be:	230c      	movs	r3, #12
 80091c0:	f8ca 3000 	str.w	r3, [sl]
 80091c4:	89a3      	ldrh	r3, [r4, #12]
 80091c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80091ca:	81a3      	strh	r3, [r4, #12]
 80091cc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80091d0:	e7e9      	b.n	80091a6 <__ssputs_r+0x8a>
	...

080091d4 <_svfiprintf_r>:
 80091d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091d8:	4698      	mov	r8, r3
 80091da:	898b      	ldrh	r3, [r1, #12]
 80091dc:	061b      	lsls	r3, r3, #24
 80091de:	b09d      	sub	sp, #116	@ 0x74
 80091e0:	4607      	mov	r7, r0
 80091e2:	460d      	mov	r5, r1
 80091e4:	4614      	mov	r4, r2
 80091e6:	d510      	bpl.n	800920a <_svfiprintf_r+0x36>
 80091e8:	690b      	ldr	r3, [r1, #16]
 80091ea:	b973      	cbnz	r3, 800920a <_svfiprintf_r+0x36>
 80091ec:	2140      	movs	r1, #64	@ 0x40
 80091ee:	f7ff fb87 	bl	8008900 <_malloc_r>
 80091f2:	6028      	str	r0, [r5, #0]
 80091f4:	6128      	str	r0, [r5, #16]
 80091f6:	b930      	cbnz	r0, 8009206 <_svfiprintf_r+0x32>
 80091f8:	230c      	movs	r3, #12
 80091fa:	603b      	str	r3, [r7, #0]
 80091fc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009200:	b01d      	add	sp, #116	@ 0x74
 8009202:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009206:	2340      	movs	r3, #64	@ 0x40
 8009208:	616b      	str	r3, [r5, #20]
 800920a:	2300      	movs	r3, #0
 800920c:	9309      	str	r3, [sp, #36]	@ 0x24
 800920e:	2320      	movs	r3, #32
 8009210:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009214:	f8cd 800c 	str.w	r8, [sp, #12]
 8009218:	2330      	movs	r3, #48	@ 0x30
 800921a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80093b8 <_svfiprintf_r+0x1e4>
 800921e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009222:	f04f 0901 	mov.w	r9, #1
 8009226:	4623      	mov	r3, r4
 8009228:	469a      	mov	sl, r3
 800922a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800922e:	b10a      	cbz	r2, 8009234 <_svfiprintf_r+0x60>
 8009230:	2a25      	cmp	r2, #37	@ 0x25
 8009232:	d1f9      	bne.n	8009228 <_svfiprintf_r+0x54>
 8009234:	ebba 0b04 	subs.w	fp, sl, r4
 8009238:	d00b      	beq.n	8009252 <_svfiprintf_r+0x7e>
 800923a:	465b      	mov	r3, fp
 800923c:	4622      	mov	r2, r4
 800923e:	4629      	mov	r1, r5
 8009240:	4638      	mov	r0, r7
 8009242:	f7ff ff6b 	bl	800911c <__ssputs_r>
 8009246:	3001      	adds	r0, #1
 8009248:	f000 80a7 	beq.w	800939a <_svfiprintf_r+0x1c6>
 800924c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800924e:	445a      	add	r2, fp
 8009250:	9209      	str	r2, [sp, #36]	@ 0x24
 8009252:	f89a 3000 	ldrb.w	r3, [sl]
 8009256:	2b00      	cmp	r3, #0
 8009258:	f000 809f 	beq.w	800939a <_svfiprintf_r+0x1c6>
 800925c:	2300      	movs	r3, #0
 800925e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009262:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009266:	f10a 0a01 	add.w	sl, sl, #1
 800926a:	9304      	str	r3, [sp, #16]
 800926c:	9307      	str	r3, [sp, #28]
 800926e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009272:	931a      	str	r3, [sp, #104]	@ 0x68
 8009274:	4654      	mov	r4, sl
 8009276:	2205      	movs	r2, #5
 8009278:	f814 1b01 	ldrb.w	r1, [r4], #1
 800927c:	484e      	ldr	r0, [pc, #312]	@ (80093b8 <_svfiprintf_r+0x1e4>)
 800927e:	f7f6 ffa7 	bl	80001d0 <memchr>
 8009282:	9a04      	ldr	r2, [sp, #16]
 8009284:	b9d8      	cbnz	r0, 80092be <_svfiprintf_r+0xea>
 8009286:	06d0      	lsls	r0, r2, #27
 8009288:	bf44      	itt	mi
 800928a:	2320      	movmi	r3, #32
 800928c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009290:	0711      	lsls	r1, r2, #28
 8009292:	bf44      	itt	mi
 8009294:	232b      	movmi	r3, #43	@ 0x2b
 8009296:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800929a:	f89a 3000 	ldrb.w	r3, [sl]
 800929e:	2b2a      	cmp	r3, #42	@ 0x2a
 80092a0:	d015      	beq.n	80092ce <_svfiprintf_r+0xfa>
 80092a2:	9a07      	ldr	r2, [sp, #28]
 80092a4:	4654      	mov	r4, sl
 80092a6:	2000      	movs	r0, #0
 80092a8:	f04f 0c0a 	mov.w	ip, #10
 80092ac:	4621      	mov	r1, r4
 80092ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80092b2:	3b30      	subs	r3, #48	@ 0x30
 80092b4:	2b09      	cmp	r3, #9
 80092b6:	d94b      	bls.n	8009350 <_svfiprintf_r+0x17c>
 80092b8:	b1b0      	cbz	r0, 80092e8 <_svfiprintf_r+0x114>
 80092ba:	9207      	str	r2, [sp, #28]
 80092bc:	e014      	b.n	80092e8 <_svfiprintf_r+0x114>
 80092be:	eba0 0308 	sub.w	r3, r0, r8
 80092c2:	fa09 f303 	lsl.w	r3, r9, r3
 80092c6:	4313      	orrs	r3, r2
 80092c8:	9304      	str	r3, [sp, #16]
 80092ca:	46a2      	mov	sl, r4
 80092cc:	e7d2      	b.n	8009274 <_svfiprintf_r+0xa0>
 80092ce:	9b03      	ldr	r3, [sp, #12]
 80092d0:	1d19      	adds	r1, r3, #4
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	9103      	str	r1, [sp, #12]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	bfbb      	ittet	lt
 80092da:	425b      	neglt	r3, r3
 80092dc:	f042 0202 	orrlt.w	r2, r2, #2
 80092e0:	9307      	strge	r3, [sp, #28]
 80092e2:	9307      	strlt	r3, [sp, #28]
 80092e4:	bfb8      	it	lt
 80092e6:	9204      	strlt	r2, [sp, #16]
 80092e8:	7823      	ldrb	r3, [r4, #0]
 80092ea:	2b2e      	cmp	r3, #46	@ 0x2e
 80092ec:	d10a      	bne.n	8009304 <_svfiprintf_r+0x130>
 80092ee:	7863      	ldrb	r3, [r4, #1]
 80092f0:	2b2a      	cmp	r3, #42	@ 0x2a
 80092f2:	d132      	bne.n	800935a <_svfiprintf_r+0x186>
 80092f4:	9b03      	ldr	r3, [sp, #12]
 80092f6:	1d1a      	adds	r2, r3, #4
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	9203      	str	r2, [sp, #12]
 80092fc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009300:	3402      	adds	r4, #2
 8009302:	9305      	str	r3, [sp, #20]
 8009304:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80093c8 <_svfiprintf_r+0x1f4>
 8009308:	7821      	ldrb	r1, [r4, #0]
 800930a:	2203      	movs	r2, #3
 800930c:	4650      	mov	r0, sl
 800930e:	f7f6 ff5f 	bl	80001d0 <memchr>
 8009312:	b138      	cbz	r0, 8009324 <_svfiprintf_r+0x150>
 8009314:	9b04      	ldr	r3, [sp, #16]
 8009316:	eba0 000a 	sub.w	r0, r0, sl
 800931a:	2240      	movs	r2, #64	@ 0x40
 800931c:	4082      	lsls	r2, r0
 800931e:	4313      	orrs	r3, r2
 8009320:	3401      	adds	r4, #1
 8009322:	9304      	str	r3, [sp, #16]
 8009324:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009328:	4824      	ldr	r0, [pc, #144]	@ (80093bc <_svfiprintf_r+0x1e8>)
 800932a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800932e:	2206      	movs	r2, #6
 8009330:	f7f6 ff4e 	bl	80001d0 <memchr>
 8009334:	2800      	cmp	r0, #0
 8009336:	d036      	beq.n	80093a6 <_svfiprintf_r+0x1d2>
 8009338:	4b21      	ldr	r3, [pc, #132]	@ (80093c0 <_svfiprintf_r+0x1ec>)
 800933a:	bb1b      	cbnz	r3, 8009384 <_svfiprintf_r+0x1b0>
 800933c:	9b03      	ldr	r3, [sp, #12]
 800933e:	3307      	adds	r3, #7
 8009340:	f023 0307 	bic.w	r3, r3, #7
 8009344:	3308      	adds	r3, #8
 8009346:	9303      	str	r3, [sp, #12]
 8009348:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800934a:	4433      	add	r3, r6
 800934c:	9309      	str	r3, [sp, #36]	@ 0x24
 800934e:	e76a      	b.n	8009226 <_svfiprintf_r+0x52>
 8009350:	fb0c 3202 	mla	r2, ip, r2, r3
 8009354:	460c      	mov	r4, r1
 8009356:	2001      	movs	r0, #1
 8009358:	e7a8      	b.n	80092ac <_svfiprintf_r+0xd8>
 800935a:	2300      	movs	r3, #0
 800935c:	3401      	adds	r4, #1
 800935e:	9305      	str	r3, [sp, #20]
 8009360:	4619      	mov	r1, r3
 8009362:	f04f 0c0a 	mov.w	ip, #10
 8009366:	4620      	mov	r0, r4
 8009368:	f810 2b01 	ldrb.w	r2, [r0], #1
 800936c:	3a30      	subs	r2, #48	@ 0x30
 800936e:	2a09      	cmp	r2, #9
 8009370:	d903      	bls.n	800937a <_svfiprintf_r+0x1a6>
 8009372:	2b00      	cmp	r3, #0
 8009374:	d0c6      	beq.n	8009304 <_svfiprintf_r+0x130>
 8009376:	9105      	str	r1, [sp, #20]
 8009378:	e7c4      	b.n	8009304 <_svfiprintf_r+0x130>
 800937a:	fb0c 2101 	mla	r1, ip, r1, r2
 800937e:	4604      	mov	r4, r0
 8009380:	2301      	movs	r3, #1
 8009382:	e7f0      	b.n	8009366 <_svfiprintf_r+0x192>
 8009384:	ab03      	add	r3, sp, #12
 8009386:	9300      	str	r3, [sp, #0]
 8009388:	462a      	mov	r2, r5
 800938a:	4b0e      	ldr	r3, [pc, #56]	@ (80093c4 <_svfiprintf_r+0x1f0>)
 800938c:	a904      	add	r1, sp, #16
 800938e:	4638      	mov	r0, r7
 8009390:	f7fd fe32 	bl	8006ff8 <_printf_float>
 8009394:	1c42      	adds	r2, r0, #1
 8009396:	4606      	mov	r6, r0
 8009398:	d1d6      	bne.n	8009348 <_svfiprintf_r+0x174>
 800939a:	89ab      	ldrh	r3, [r5, #12]
 800939c:	065b      	lsls	r3, r3, #25
 800939e:	f53f af2d 	bmi.w	80091fc <_svfiprintf_r+0x28>
 80093a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80093a4:	e72c      	b.n	8009200 <_svfiprintf_r+0x2c>
 80093a6:	ab03      	add	r3, sp, #12
 80093a8:	9300      	str	r3, [sp, #0]
 80093aa:	462a      	mov	r2, r5
 80093ac:	4b05      	ldr	r3, [pc, #20]	@ (80093c4 <_svfiprintf_r+0x1f0>)
 80093ae:	a904      	add	r1, sp, #16
 80093b0:	4638      	mov	r0, r7
 80093b2:	f7fe f8b9 	bl	8007528 <_printf_i>
 80093b6:	e7ed      	b.n	8009394 <_svfiprintf_r+0x1c0>
 80093b8:	08009f28 	.word	0x08009f28
 80093bc:	08009f32 	.word	0x08009f32
 80093c0:	08006ff9 	.word	0x08006ff9
 80093c4:	0800911d 	.word	0x0800911d
 80093c8:	08009f2e 	.word	0x08009f2e

080093cc <__sflush_r>:
 80093cc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80093d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093d4:	0716      	lsls	r6, r2, #28
 80093d6:	4605      	mov	r5, r0
 80093d8:	460c      	mov	r4, r1
 80093da:	d454      	bmi.n	8009486 <__sflush_r+0xba>
 80093dc:	684b      	ldr	r3, [r1, #4]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	dc02      	bgt.n	80093e8 <__sflush_r+0x1c>
 80093e2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	dd48      	ble.n	800947a <__sflush_r+0xae>
 80093e8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80093ea:	2e00      	cmp	r6, #0
 80093ec:	d045      	beq.n	800947a <__sflush_r+0xae>
 80093ee:	2300      	movs	r3, #0
 80093f0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80093f4:	682f      	ldr	r7, [r5, #0]
 80093f6:	6a21      	ldr	r1, [r4, #32]
 80093f8:	602b      	str	r3, [r5, #0]
 80093fa:	d030      	beq.n	800945e <__sflush_r+0x92>
 80093fc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80093fe:	89a3      	ldrh	r3, [r4, #12]
 8009400:	0759      	lsls	r1, r3, #29
 8009402:	d505      	bpl.n	8009410 <__sflush_r+0x44>
 8009404:	6863      	ldr	r3, [r4, #4]
 8009406:	1ad2      	subs	r2, r2, r3
 8009408:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800940a:	b10b      	cbz	r3, 8009410 <__sflush_r+0x44>
 800940c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800940e:	1ad2      	subs	r2, r2, r3
 8009410:	2300      	movs	r3, #0
 8009412:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009414:	6a21      	ldr	r1, [r4, #32]
 8009416:	4628      	mov	r0, r5
 8009418:	47b0      	blx	r6
 800941a:	1c43      	adds	r3, r0, #1
 800941c:	89a3      	ldrh	r3, [r4, #12]
 800941e:	d106      	bne.n	800942e <__sflush_r+0x62>
 8009420:	6829      	ldr	r1, [r5, #0]
 8009422:	291d      	cmp	r1, #29
 8009424:	d82b      	bhi.n	800947e <__sflush_r+0xb2>
 8009426:	4a2a      	ldr	r2, [pc, #168]	@ (80094d0 <__sflush_r+0x104>)
 8009428:	410a      	asrs	r2, r1
 800942a:	07d6      	lsls	r6, r2, #31
 800942c:	d427      	bmi.n	800947e <__sflush_r+0xb2>
 800942e:	2200      	movs	r2, #0
 8009430:	6062      	str	r2, [r4, #4]
 8009432:	04d9      	lsls	r1, r3, #19
 8009434:	6922      	ldr	r2, [r4, #16]
 8009436:	6022      	str	r2, [r4, #0]
 8009438:	d504      	bpl.n	8009444 <__sflush_r+0x78>
 800943a:	1c42      	adds	r2, r0, #1
 800943c:	d101      	bne.n	8009442 <__sflush_r+0x76>
 800943e:	682b      	ldr	r3, [r5, #0]
 8009440:	b903      	cbnz	r3, 8009444 <__sflush_r+0x78>
 8009442:	6560      	str	r0, [r4, #84]	@ 0x54
 8009444:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009446:	602f      	str	r7, [r5, #0]
 8009448:	b1b9      	cbz	r1, 800947a <__sflush_r+0xae>
 800944a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800944e:	4299      	cmp	r1, r3
 8009450:	d002      	beq.n	8009458 <__sflush_r+0x8c>
 8009452:	4628      	mov	r0, r5
 8009454:	f7ff f9e0 	bl	8008818 <_free_r>
 8009458:	2300      	movs	r3, #0
 800945a:	6363      	str	r3, [r4, #52]	@ 0x34
 800945c:	e00d      	b.n	800947a <__sflush_r+0xae>
 800945e:	2301      	movs	r3, #1
 8009460:	4628      	mov	r0, r5
 8009462:	47b0      	blx	r6
 8009464:	4602      	mov	r2, r0
 8009466:	1c50      	adds	r0, r2, #1
 8009468:	d1c9      	bne.n	80093fe <__sflush_r+0x32>
 800946a:	682b      	ldr	r3, [r5, #0]
 800946c:	2b00      	cmp	r3, #0
 800946e:	d0c6      	beq.n	80093fe <__sflush_r+0x32>
 8009470:	2b1d      	cmp	r3, #29
 8009472:	d001      	beq.n	8009478 <__sflush_r+0xac>
 8009474:	2b16      	cmp	r3, #22
 8009476:	d11e      	bne.n	80094b6 <__sflush_r+0xea>
 8009478:	602f      	str	r7, [r5, #0]
 800947a:	2000      	movs	r0, #0
 800947c:	e022      	b.n	80094c4 <__sflush_r+0xf8>
 800947e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009482:	b21b      	sxth	r3, r3
 8009484:	e01b      	b.n	80094be <__sflush_r+0xf2>
 8009486:	690f      	ldr	r7, [r1, #16]
 8009488:	2f00      	cmp	r7, #0
 800948a:	d0f6      	beq.n	800947a <__sflush_r+0xae>
 800948c:	0793      	lsls	r3, r2, #30
 800948e:	680e      	ldr	r6, [r1, #0]
 8009490:	bf08      	it	eq
 8009492:	694b      	ldreq	r3, [r1, #20]
 8009494:	600f      	str	r7, [r1, #0]
 8009496:	bf18      	it	ne
 8009498:	2300      	movne	r3, #0
 800949a:	eba6 0807 	sub.w	r8, r6, r7
 800949e:	608b      	str	r3, [r1, #8]
 80094a0:	f1b8 0f00 	cmp.w	r8, #0
 80094a4:	dde9      	ble.n	800947a <__sflush_r+0xae>
 80094a6:	6a21      	ldr	r1, [r4, #32]
 80094a8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80094aa:	4643      	mov	r3, r8
 80094ac:	463a      	mov	r2, r7
 80094ae:	4628      	mov	r0, r5
 80094b0:	47b0      	blx	r6
 80094b2:	2800      	cmp	r0, #0
 80094b4:	dc08      	bgt.n	80094c8 <__sflush_r+0xfc>
 80094b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80094ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80094be:	81a3      	strh	r3, [r4, #12]
 80094c0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80094c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80094c8:	4407      	add	r7, r0
 80094ca:	eba8 0800 	sub.w	r8, r8, r0
 80094ce:	e7e7      	b.n	80094a0 <__sflush_r+0xd4>
 80094d0:	dfbffffe 	.word	0xdfbffffe

080094d4 <_fflush_r>:
 80094d4:	b538      	push	{r3, r4, r5, lr}
 80094d6:	690b      	ldr	r3, [r1, #16]
 80094d8:	4605      	mov	r5, r0
 80094da:	460c      	mov	r4, r1
 80094dc:	b913      	cbnz	r3, 80094e4 <_fflush_r+0x10>
 80094de:	2500      	movs	r5, #0
 80094e0:	4628      	mov	r0, r5
 80094e2:	bd38      	pop	{r3, r4, r5, pc}
 80094e4:	b118      	cbz	r0, 80094ee <_fflush_r+0x1a>
 80094e6:	6a03      	ldr	r3, [r0, #32]
 80094e8:	b90b      	cbnz	r3, 80094ee <_fflush_r+0x1a>
 80094ea:	f7fe f9c9 	bl	8007880 <__sinit>
 80094ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d0f3      	beq.n	80094de <_fflush_r+0xa>
 80094f6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80094f8:	07d0      	lsls	r0, r2, #31
 80094fa:	d404      	bmi.n	8009506 <_fflush_r+0x32>
 80094fc:	0599      	lsls	r1, r3, #22
 80094fe:	d402      	bmi.n	8009506 <_fflush_r+0x32>
 8009500:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009502:	f7fe fb2a 	bl	8007b5a <__retarget_lock_acquire_recursive>
 8009506:	4628      	mov	r0, r5
 8009508:	4621      	mov	r1, r4
 800950a:	f7ff ff5f 	bl	80093cc <__sflush_r>
 800950e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009510:	07da      	lsls	r2, r3, #31
 8009512:	4605      	mov	r5, r0
 8009514:	d4e4      	bmi.n	80094e0 <_fflush_r+0xc>
 8009516:	89a3      	ldrh	r3, [r4, #12]
 8009518:	059b      	lsls	r3, r3, #22
 800951a:	d4e1      	bmi.n	80094e0 <_fflush_r+0xc>
 800951c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800951e:	f7fe fb1d 	bl	8007b5c <__retarget_lock_release_recursive>
 8009522:	e7dd      	b.n	80094e0 <_fflush_r+0xc>

08009524 <memmove>:
 8009524:	4288      	cmp	r0, r1
 8009526:	b510      	push	{r4, lr}
 8009528:	eb01 0402 	add.w	r4, r1, r2
 800952c:	d902      	bls.n	8009534 <memmove+0x10>
 800952e:	4284      	cmp	r4, r0
 8009530:	4623      	mov	r3, r4
 8009532:	d807      	bhi.n	8009544 <memmove+0x20>
 8009534:	1e43      	subs	r3, r0, #1
 8009536:	42a1      	cmp	r1, r4
 8009538:	d008      	beq.n	800954c <memmove+0x28>
 800953a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800953e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009542:	e7f8      	b.n	8009536 <memmove+0x12>
 8009544:	4402      	add	r2, r0
 8009546:	4601      	mov	r1, r0
 8009548:	428a      	cmp	r2, r1
 800954a:	d100      	bne.n	800954e <memmove+0x2a>
 800954c:	bd10      	pop	{r4, pc}
 800954e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009552:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009556:	e7f7      	b.n	8009548 <memmove+0x24>

08009558 <_sbrk_r>:
 8009558:	b538      	push	{r3, r4, r5, lr}
 800955a:	4d06      	ldr	r5, [pc, #24]	@ (8009574 <_sbrk_r+0x1c>)
 800955c:	2300      	movs	r3, #0
 800955e:	4604      	mov	r4, r0
 8009560:	4608      	mov	r0, r1
 8009562:	602b      	str	r3, [r5, #0]
 8009564:	f7f8 fcfe 	bl	8001f64 <_sbrk>
 8009568:	1c43      	adds	r3, r0, #1
 800956a:	d102      	bne.n	8009572 <_sbrk_r+0x1a>
 800956c:	682b      	ldr	r3, [r5, #0]
 800956e:	b103      	cbz	r3, 8009572 <_sbrk_r+0x1a>
 8009570:	6023      	str	r3, [r4, #0]
 8009572:	bd38      	pop	{r3, r4, r5, pc}
 8009574:	2000447c 	.word	0x2000447c

08009578 <__assert_func>:
 8009578:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800957a:	4614      	mov	r4, r2
 800957c:	461a      	mov	r2, r3
 800957e:	4b09      	ldr	r3, [pc, #36]	@ (80095a4 <__assert_func+0x2c>)
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	4605      	mov	r5, r0
 8009584:	68d8      	ldr	r0, [r3, #12]
 8009586:	b954      	cbnz	r4, 800959e <__assert_func+0x26>
 8009588:	4b07      	ldr	r3, [pc, #28]	@ (80095a8 <__assert_func+0x30>)
 800958a:	461c      	mov	r4, r3
 800958c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009590:	9100      	str	r1, [sp, #0]
 8009592:	462b      	mov	r3, r5
 8009594:	4905      	ldr	r1, [pc, #20]	@ (80095ac <__assert_func+0x34>)
 8009596:	f000 f86f 	bl	8009678 <fiprintf>
 800959a:	f000 f87f 	bl	800969c <abort>
 800959e:	4b04      	ldr	r3, [pc, #16]	@ (80095b0 <__assert_func+0x38>)
 80095a0:	e7f4      	b.n	800958c <__assert_func+0x14>
 80095a2:	bf00      	nop
 80095a4:	2000001c 	.word	0x2000001c
 80095a8:	08009f7e 	.word	0x08009f7e
 80095ac:	08009f50 	.word	0x08009f50
 80095b0:	08009f43 	.word	0x08009f43

080095b4 <_calloc_r>:
 80095b4:	b570      	push	{r4, r5, r6, lr}
 80095b6:	fba1 5402 	umull	r5, r4, r1, r2
 80095ba:	b93c      	cbnz	r4, 80095cc <_calloc_r+0x18>
 80095bc:	4629      	mov	r1, r5
 80095be:	f7ff f99f 	bl	8008900 <_malloc_r>
 80095c2:	4606      	mov	r6, r0
 80095c4:	b928      	cbnz	r0, 80095d2 <_calloc_r+0x1e>
 80095c6:	2600      	movs	r6, #0
 80095c8:	4630      	mov	r0, r6
 80095ca:	bd70      	pop	{r4, r5, r6, pc}
 80095cc:	220c      	movs	r2, #12
 80095ce:	6002      	str	r2, [r0, #0]
 80095d0:	e7f9      	b.n	80095c6 <_calloc_r+0x12>
 80095d2:	462a      	mov	r2, r5
 80095d4:	4621      	mov	r1, r4
 80095d6:	f7fe f9ec 	bl	80079b2 <memset>
 80095da:	e7f5      	b.n	80095c8 <_calloc_r+0x14>

080095dc <__ascii_mbtowc>:
 80095dc:	b082      	sub	sp, #8
 80095de:	b901      	cbnz	r1, 80095e2 <__ascii_mbtowc+0x6>
 80095e0:	a901      	add	r1, sp, #4
 80095e2:	b142      	cbz	r2, 80095f6 <__ascii_mbtowc+0x1a>
 80095e4:	b14b      	cbz	r3, 80095fa <__ascii_mbtowc+0x1e>
 80095e6:	7813      	ldrb	r3, [r2, #0]
 80095e8:	600b      	str	r3, [r1, #0]
 80095ea:	7812      	ldrb	r2, [r2, #0]
 80095ec:	1e10      	subs	r0, r2, #0
 80095ee:	bf18      	it	ne
 80095f0:	2001      	movne	r0, #1
 80095f2:	b002      	add	sp, #8
 80095f4:	4770      	bx	lr
 80095f6:	4610      	mov	r0, r2
 80095f8:	e7fb      	b.n	80095f2 <__ascii_mbtowc+0x16>
 80095fa:	f06f 0001 	mvn.w	r0, #1
 80095fe:	e7f8      	b.n	80095f2 <__ascii_mbtowc+0x16>

08009600 <_realloc_r>:
 8009600:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009604:	4680      	mov	r8, r0
 8009606:	4615      	mov	r5, r2
 8009608:	460c      	mov	r4, r1
 800960a:	b921      	cbnz	r1, 8009616 <_realloc_r+0x16>
 800960c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009610:	4611      	mov	r1, r2
 8009612:	f7ff b975 	b.w	8008900 <_malloc_r>
 8009616:	b92a      	cbnz	r2, 8009624 <_realloc_r+0x24>
 8009618:	f7ff f8fe 	bl	8008818 <_free_r>
 800961c:	2400      	movs	r4, #0
 800961e:	4620      	mov	r0, r4
 8009620:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009624:	f000 f841 	bl	80096aa <_malloc_usable_size_r>
 8009628:	4285      	cmp	r5, r0
 800962a:	4606      	mov	r6, r0
 800962c:	d802      	bhi.n	8009634 <_realloc_r+0x34>
 800962e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009632:	d8f4      	bhi.n	800961e <_realloc_r+0x1e>
 8009634:	4629      	mov	r1, r5
 8009636:	4640      	mov	r0, r8
 8009638:	f7ff f962 	bl	8008900 <_malloc_r>
 800963c:	4607      	mov	r7, r0
 800963e:	2800      	cmp	r0, #0
 8009640:	d0ec      	beq.n	800961c <_realloc_r+0x1c>
 8009642:	42b5      	cmp	r5, r6
 8009644:	462a      	mov	r2, r5
 8009646:	4621      	mov	r1, r4
 8009648:	bf28      	it	cs
 800964a:	4632      	movcs	r2, r6
 800964c:	f7fe fa87 	bl	8007b5e <memcpy>
 8009650:	4621      	mov	r1, r4
 8009652:	4640      	mov	r0, r8
 8009654:	f7ff f8e0 	bl	8008818 <_free_r>
 8009658:	463c      	mov	r4, r7
 800965a:	e7e0      	b.n	800961e <_realloc_r+0x1e>

0800965c <__ascii_wctomb>:
 800965c:	4603      	mov	r3, r0
 800965e:	4608      	mov	r0, r1
 8009660:	b141      	cbz	r1, 8009674 <__ascii_wctomb+0x18>
 8009662:	2aff      	cmp	r2, #255	@ 0xff
 8009664:	d904      	bls.n	8009670 <__ascii_wctomb+0x14>
 8009666:	228a      	movs	r2, #138	@ 0x8a
 8009668:	601a      	str	r2, [r3, #0]
 800966a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800966e:	4770      	bx	lr
 8009670:	700a      	strb	r2, [r1, #0]
 8009672:	2001      	movs	r0, #1
 8009674:	4770      	bx	lr
	...

08009678 <fiprintf>:
 8009678:	b40e      	push	{r1, r2, r3}
 800967a:	b503      	push	{r0, r1, lr}
 800967c:	4601      	mov	r1, r0
 800967e:	ab03      	add	r3, sp, #12
 8009680:	4805      	ldr	r0, [pc, #20]	@ (8009698 <fiprintf+0x20>)
 8009682:	f853 2b04 	ldr.w	r2, [r3], #4
 8009686:	6800      	ldr	r0, [r0, #0]
 8009688:	9301      	str	r3, [sp, #4]
 800968a:	f000 f83f 	bl	800970c <_vfiprintf_r>
 800968e:	b002      	add	sp, #8
 8009690:	f85d eb04 	ldr.w	lr, [sp], #4
 8009694:	b003      	add	sp, #12
 8009696:	4770      	bx	lr
 8009698:	2000001c 	.word	0x2000001c

0800969c <abort>:
 800969c:	b508      	push	{r3, lr}
 800969e:	2006      	movs	r0, #6
 80096a0:	f000 fa08 	bl	8009ab4 <raise>
 80096a4:	2001      	movs	r0, #1
 80096a6:	f7f8 fbe5 	bl	8001e74 <_exit>

080096aa <_malloc_usable_size_r>:
 80096aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80096ae:	1f18      	subs	r0, r3, #4
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	bfbc      	itt	lt
 80096b4:	580b      	ldrlt	r3, [r1, r0]
 80096b6:	18c0      	addlt	r0, r0, r3
 80096b8:	4770      	bx	lr

080096ba <__sfputc_r>:
 80096ba:	6893      	ldr	r3, [r2, #8]
 80096bc:	3b01      	subs	r3, #1
 80096be:	2b00      	cmp	r3, #0
 80096c0:	b410      	push	{r4}
 80096c2:	6093      	str	r3, [r2, #8]
 80096c4:	da08      	bge.n	80096d8 <__sfputc_r+0x1e>
 80096c6:	6994      	ldr	r4, [r2, #24]
 80096c8:	42a3      	cmp	r3, r4
 80096ca:	db01      	blt.n	80096d0 <__sfputc_r+0x16>
 80096cc:	290a      	cmp	r1, #10
 80096ce:	d103      	bne.n	80096d8 <__sfputc_r+0x1e>
 80096d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80096d4:	f000 b932 	b.w	800993c <__swbuf_r>
 80096d8:	6813      	ldr	r3, [r2, #0]
 80096da:	1c58      	adds	r0, r3, #1
 80096dc:	6010      	str	r0, [r2, #0]
 80096de:	7019      	strb	r1, [r3, #0]
 80096e0:	4608      	mov	r0, r1
 80096e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80096e6:	4770      	bx	lr

080096e8 <__sfputs_r>:
 80096e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096ea:	4606      	mov	r6, r0
 80096ec:	460f      	mov	r7, r1
 80096ee:	4614      	mov	r4, r2
 80096f0:	18d5      	adds	r5, r2, r3
 80096f2:	42ac      	cmp	r4, r5
 80096f4:	d101      	bne.n	80096fa <__sfputs_r+0x12>
 80096f6:	2000      	movs	r0, #0
 80096f8:	e007      	b.n	800970a <__sfputs_r+0x22>
 80096fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096fe:	463a      	mov	r2, r7
 8009700:	4630      	mov	r0, r6
 8009702:	f7ff ffda 	bl	80096ba <__sfputc_r>
 8009706:	1c43      	adds	r3, r0, #1
 8009708:	d1f3      	bne.n	80096f2 <__sfputs_r+0xa>
 800970a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800970c <_vfiprintf_r>:
 800970c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009710:	460d      	mov	r5, r1
 8009712:	b09d      	sub	sp, #116	@ 0x74
 8009714:	4614      	mov	r4, r2
 8009716:	4698      	mov	r8, r3
 8009718:	4606      	mov	r6, r0
 800971a:	b118      	cbz	r0, 8009724 <_vfiprintf_r+0x18>
 800971c:	6a03      	ldr	r3, [r0, #32]
 800971e:	b90b      	cbnz	r3, 8009724 <_vfiprintf_r+0x18>
 8009720:	f7fe f8ae 	bl	8007880 <__sinit>
 8009724:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009726:	07d9      	lsls	r1, r3, #31
 8009728:	d405      	bmi.n	8009736 <_vfiprintf_r+0x2a>
 800972a:	89ab      	ldrh	r3, [r5, #12]
 800972c:	059a      	lsls	r2, r3, #22
 800972e:	d402      	bmi.n	8009736 <_vfiprintf_r+0x2a>
 8009730:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009732:	f7fe fa12 	bl	8007b5a <__retarget_lock_acquire_recursive>
 8009736:	89ab      	ldrh	r3, [r5, #12]
 8009738:	071b      	lsls	r3, r3, #28
 800973a:	d501      	bpl.n	8009740 <_vfiprintf_r+0x34>
 800973c:	692b      	ldr	r3, [r5, #16]
 800973e:	b99b      	cbnz	r3, 8009768 <_vfiprintf_r+0x5c>
 8009740:	4629      	mov	r1, r5
 8009742:	4630      	mov	r0, r6
 8009744:	f000 f938 	bl	80099b8 <__swsetup_r>
 8009748:	b170      	cbz	r0, 8009768 <_vfiprintf_r+0x5c>
 800974a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800974c:	07dc      	lsls	r4, r3, #31
 800974e:	d504      	bpl.n	800975a <_vfiprintf_r+0x4e>
 8009750:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009754:	b01d      	add	sp, #116	@ 0x74
 8009756:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800975a:	89ab      	ldrh	r3, [r5, #12]
 800975c:	0598      	lsls	r0, r3, #22
 800975e:	d4f7      	bmi.n	8009750 <_vfiprintf_r+0x44>
 8009760:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009762:	f7fe f9fb 	bl	8007b5c <__retarget_lock_release_recursive>
 8009766:	e7f3      	b.n	8009750 <_vfiprintf_r+0x44>
 8009768:	2300      	movs	r3, #0
 800976a:	9309      	str	r3, [sp, #36]	@ 0x24
 800976c:	2320      	movs	r3, #32
 800976e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009772:	f8cd 800c 	str.w	r8, [sp, #12]
 8009776:	2330      	movs	r3, #48	@ 0x30
 8009778:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009928 <_vfiprintf_r+0x21c>
 800977c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009780:	f04f 0901 	mov.w	r9, #1
 8009784:	4623      	mov	r3, r4
 8009786:	469a      	mov	sl, r3
 8009788:	f813 2b01 	ldrb.w	r2, [r3], #1
 800978c:	b10a      	cbz	r2, 8009792 <_vfiprintf_r+0x86>
 800978e:	2a25      	cmp	r2, #37	@ 0x25
 8009790:	d1f9      	bne.n	8009786 <_vfiprintf_r+0x7a>
 8009792:	ebba 0b04 	subs.w	fp, sl, r4
 8009796:	d00b      	beq.n	80097b0 <_vfiprintf_r+0xa4>
 8009798:	465b      	mov	r3, fp
 800979a:	4622      	mov	r2, r4
 800979c:	4629      	mov	r1, r5
 800979e:	4630      	mov	r0, r6
 80097a0:	f7ff ffa2 	bl	80096e8 <__sfputs_r>
 80097a4:	3001      	adds	r0, #1
 80097a6:	f000 80a7 	beq.w	80098f8 <_vfiprintf_r+0x1ec>
 80097aa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80097ac:	445a      	add	r2, fp
 80097ae:	9209      	str	r2, [sp, #36]	@ 0x24
 80097b0:	f89a 3000 	ldrb.w	r3, [sl]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	f000 809f 	beq.w	80098f8 <_vfiprintf_r+0x1ec>
 80097ba:	2300      	movs	r3, #0
 80097bc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80097c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80097c4:	f10a 0a01 	add.w	sl, sl, #1
 80097c8:	9304      	str	r3, [sp, #16]
 80097ca:	9307      	str	r3, [sp, #28]
 80097cc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80097d0:	931a      	str	r3, [sp, #104]	@ 0x68
 80097d2:	4654      	mov	r4, sl
 80097d4:	2205      	movs	r2, #5
 80097d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80097da:	4853      	ldr	r0, [pc, #332]	@ (8009928 <_vfiprintf_r+0x21c>)
 80097dc:	f7f6 fcf8 	bl	80001d0 <memchr>
 80097e0:	9a04      	ldr	r2, [sp, #16]
 80097e2:	b9d8      	cbnz	r0, 800981c <_vfiprintf_r+0x110>
 80097e4:	06d1      	lsls	r1, r2, #27
 80097e6:	bf44      	itt	mi
 80097e8:	2320      	movmi	r3, #32
 80097ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80097ee:	0713      	lsls	r3, r2, #28
 80097f0:	bf44      	itt	mi
 80097f2:	232b      	movmi	r3, #43	@ 0x2b
 80097f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80097f8:	f89a 3000 	ldrb.w	r3, [sl]
 80097fc:	2b2a      	cmp	r3, #42	@ 0x2a
 80097fe:	d015      	beq.n	800982c <_vfiprintf_r+0x120>
 8009800:	9a07      	ldr	r2, [sp, #28]
 8009802:	4654      	mov	r4, sl
 8009804:	2000      	movs	r0, #0
 8009806:	f04f 0c0a 	mov.w	ip, #10
 800980a:	4621      	mov	r1, r4
 800980c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009810:	3b30      	subs	r3, #48	@ 0x30
 8009812:	2b09      	cmp	r3, #9
 8009814:	d94b      	bls.n	80098ae <_vfiprintf_r+0x1a2>
 8009816:	b1b0      	cbz	r0, 8009846 <_vfiprintf_r+0x13a>
 8009818:	9207      	str	r2, [sp, #28]
 800981a:	e014      	b.n	8009846 <_vfiprintf_r+0x13a>
 800981c:	eba0 0308 	sub.w	r3, r0, r8
 8009820:	fa09 f303 	lsl.w	r3, r9, r3
 8009824:	4313      	orrs	r3, r2
 8009826:	9304      	str	r3, [sp, #16]
 8009828:	46a2      	mov	sl, r4
 800982a:	e7d2      	b.n	80097d2 <_vfiprintf_r+0xc6>
 800982c:	9b03      	ldr	r3, [sp, #12]
 800982e:	1d19      	adds	r1, r3, #4
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	9103      	str	r1, [sp, #12]
 8009834:	2b00      	cmp	r3, #0
 8009836:	bfbb      	ittet	lt
 8009838:	425b      	neglt	r3, r3
 800983a:	f042 0202 	orrlt.w	r2, r2, #2
 800983e:	9307      	strge	r3, [sp, #28]
 8009840:	9307      	strlt	r3, [sp, #28]
 8009842:	bfb8      	it	lt
 8009844:	9204      	strlt	r2, [sp, #16]
 8009846:	7823      	ldrb	r3, [r4, #0]
 8009848:	2b2e      	cmp	r3, #46	@ 0x2e
 800984a:	d10a      	bne.n	8009862 <_vfiprintf_r+0x156>
 800984c:	7863      	ldrb	r3, [r4, #1]
 800984e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009850:	d132      	bne.n	80098b8 <_vfiprintf_r+0x1ac>
 8009852:	9b03      	ldr	r3, [sp, #12]
 8009854:	1d1a      	adds	r2, r3, #4
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	9203      	str	r2, [sp, #12]
 800985a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800985e:	3402      	adds	r4, #2
 8009860:	9305      	str	r3, [sp, #20]
 8009862:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009938 <_vfiprintf_r+0x22c>
 8009866:	7821      	ldrb	r1, [r4, #0]
 8009868:	2203      	movs	r2, #3
 800986a:	4650      	mov	r0, sl
 800986c:	f7f6 fcb0 	bl	80001d0 <memchr>
 8009870:	b138      	cbz	r0, 8009882 <_vfiprintf_r+0x176>
 8009872:	9b04      	ldr	r3, [sp, #16]
 8009874:	eba0 000a 	sub.w	r0, r0, sl
 8009878:	2240      	movs	r2, #64	@ 0x40
 800987a:	4082      	lsls	r2, r0
 800987c:	4313      	orrs	r3, r2
 800987e:	3401      	adds	r4, #1
 8009880:	9304      	str	r3, [sp, #16]
 8009882:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009886:	4829      	ldr	r0, [pc, #164]	@ (800992c <_vfiprintf_r+0x220>)
 8009888:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800988c:	2206      	movs	r2, #6
 800988e:	f7f6 fc9f 	bl	80001d0 <memchr>
 8009892:	2800      	cmp	r0, #0
 8009894:	d03f      	beq.n	8009916 <_vfiprintf_r+0x20a>
 8009896:	4b26      	ldr	r3, [pc, #152]	@ (8009930 <_vfiprintf_r+0x224>)
 8009898:	bb1b      	cbnz	r3, 80098e2 <_vfiprintf_r+0x1d6>
 800989a:	9b03      	ldr	r3, [sp, #12]
 800989c:	3307      	adds	r3, #7
 800989e:	f023 0307 	bic.w	r3, r3, #7
 80098a2:	3308      	adds	r3, #8
 80098a4:	9303      	str	r3, [sp, #12]
 80098a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80098a8:	443b      	add	r3, r7
 80098aa:	9309      	str	r3, [sp, #36]	@ 0x24
 80098ac:	e76a      	b.n	8009784 <_vfiprintf_r+0x78>
 80098ae:	fb0c 3202 	mla	r2, ip, r2, r3
 80098b2:	460c      	mov	r4, r1
 80098b4:	2001      	movs	r0, #1
 80098b6:	e7a8      	b.n	800980a <_vfiprintf_r+0xfe>
 80098b8:	2300      	movs	r3, #0
 80098ba:	3401      	adds	r4, #1
 80098bc:	9305      	str	r3, [sp, #20]
 80098be:	4619      	mov	r1, r3
 80098c0:	f04f 0c0a 	mov.w	ip, #10
 80098c4:	4620      	mov	r0, r4
 80098c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80098ca:	3a30      	subs	r2, #48	@ 0x30
 80098cc:	2a09      	cmp	r2, #9
 80098ce:	d903      	bls.n	80098d8 <_vfiprintf_r+0x1cc>
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d0c6      	beq.n	8009862 <_vfiprintf_r+0x156>
 80098d4:	9105      	str	r1, [sp, #20]
 80098d6:	e7c4      	b.n	8009862 <_vfiprintf_r+0x156>
 80098d8:	fb0c 2101 	mla	r1, ip, r1, r2
 80098dc:	4604      	mov	r4, r0
 80098de:	2301      	movs	r3, #1
 80098e0:	e7f0      	b.n	80098c4 <_vfiprintf_r+0x1b8>
 80098e2:	ab03      	add	r3, sp, #12
 80098e4:	9300      	str	r3, [sp, #0]
 80098e6:	462a      	mov	r2, r5
 80098e8:	4b12      	ldr	r3, [pc, #72]	@ (8009934 <_vfiprintf_r+0x228>)
 80098ea:	a904      	add	r1, sp, #16
 80098ec:	4630      	mov	r0, r6
 80098ee:	f7fd fb83 	bl	8006ff8 <_printf_float>
 80098f2:	4607      	mov	r7, r0
 80098f4:	1c78      	adds	r0, r7, #1
 80098f6:	d1d6      	bne.n	80098a6 <_vfiprintf_r+0x19a>
 80098f8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80098fa:	07d9      	lsls	r1, r3, #31
 80098fc:	d405      	bmi.n	800990a <_vfiprintf_r+0x1fe>
 80098fe:	89ab      	ldrh	r3, [r5, #12]
 8009900:	059a      	lsls	r2, r3, #22
 8009902:	d402      	bmi.n	800990a <_vfiprintf_r+0x1fe>
 8009904:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009906:	f7fe f929 	bl	8007b5c <__retarget_lock_release_recursive>
 800990a:	89ab      	ldrh	r3, [r5, #12]
 800990c:	065b      	lsls	r3, r3, #25
 800990e:	f53f af1f 	bmi.w	8009750 <_vfiprintf_r+0x44>
 8009912:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009914:	e71e      	b.n	8009754 <_vfiprintf_r+0x48>
 8009916:	ab03      	add	r3, sp, #12
 8009918:	9300      	str	r3, [sp, #0]
 800991a:	462a      	mov	r2, r5
 800991c:	4b05      	ldr	r3, [pc, #20]	@ (8009934 <_vfiprintf_r+0x228>)
 800991e:	a904      	add	r1, sp, #16
 8009920:	4630      	mov	r0, r6
 8009922:	f7fd fe01 	bl	8007528 <_printf_i>
 8009926:	e7e4      	b.n	80098f2 <_vfiprintf_r+0x1e6>
 8009928:	08009f28 	.word	0x08009f28
 800992c:	08009f32 	.word	0x08009f32
 8009930:	08006ff9 	.word	0x08006ff9
 8009934:	080096e9 	.word	0x080096e9
 8009938:	08009f2e 	.word	0x08009f2e

0800993c <__swbuf_r>:
 800993c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800993e:	460e      	mov	r6, r1
 8009940:	4614      	mov	r4, r2
 8009942:	4605      	mov	r5, r0
 8009944:	b118      	cbz	r0, 800994e <__swbuf_r+0x12>
 8009946:	6a03      	ldr	r3, [r0, #32]
 8009948:	b90b      	cbnz	r3, 800994e <__swbuf_r+0x12>
 800994a:	f7fd ff99 	bl	8007880 <__sinit>
 800994e:	69a3      	ldr	r3, [r4, #24]
 8009950:	60a3      	str	r3, [r4, #8]
 8009952:	89a3      	ldrh	r3, [r4, #12]
 8009954:	071a      	lsls	r2, r3, #28
 8009956:	d501      	bpl.n	800995c <__swbuf_r+0x20>
 8009958:	6923      	ldr	r3, [r4, #16]
 800995a:	b943      	cbnz	r3, 800996e <__swbuf_r+0x32>
 800995c:	4621      	mov	r1, r4
 800995e:	4628      	mov	r0, r5
 8009960:	f000 f82a 	bl	80099b8 <__swsetup_r>
 8009964:	b118      	cbz	r0, 800996e <__swbuf_r+0x32>
 8009966:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800996a:	4638      	mov	r0, r7
 800996c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800996e:	6823      	ldr	r3, [r4, #0]
 8009970:	6922      	ldr	r2, [r4, #16]
 8009972:	1a98      	subs	r0, r3, r2
 8009974:	6963      	ldr	r3, [r4, #20]
 8009976:	b2f6      	uxtb	r6, r6
 8009978:	4283      	cmp	r3, r0
 800997a:	4637      	mov	r7, r6
 800997c:	dc05      	bgt.n	800998a <__swbuf_r+0x4e>
 800997e:	4621      	mov	r1, r4
 8009980:	4628      	mov	r0, r5
 8009982:	f7ff fda7 	bl	80094d4 <_fflush_r>
 8009986:	2800      	cmp	r0, #0
 8009988:	d1ed      	bne.n	8009966 <__swbuf_r+0x2a>
 800998a:	68a3      	ldr	r3, [r4, #8]
 800998c:	3b01      	subs	r3, #1
 800998e:	60a3      	str	r3, [r4, #8]
 8009990:	6823      	ldr	r3, [r4, #0]
 8009992:	1c5a      	adds	r2, r3, #1
 8009994:	6022      	str	r2, [r4, #0]
 8009996:	701e      	strb	r6, [r3, #0]
 8009998:	6962      	ldr	r2, [r4, #20]
 800999a:	1c43      	adds	r3, r0, #1
 800999c:	429a      	cmp	r2, r3
 800999e:	d004      	beq.n	80099aa <__swbuf_r+0x6e>
 80099a0:	89a3      	ldrh	r3, [r4, #12]
 80099a2:	07db      	lsls	r3, r3, #31
 80099a4:	d5e1      	bpl.n	800996a <__swbuf_r+0x2e>
 80099a6:	2e0a      	cmp	r6, #10
 80099a8:	d1df      	bne.n	800996a <__swbuf_r+0x2e>
 80099aa:	4621      	mov	r1, r4
 80099ac:	4628      	mov	r0, r5
 80099ae:	f7ff fd91 	bl	80094d4 <_fflush_r>
 80099b2:	2800      	cmp	r0, #0
 80099b4:	d0d9      	beq.n	800996a <__swbuf_r+0x2e>
 80099b6:	e7d6      	b.n	8009966 <__swbuf_r+0x2a>

080099b8 <__swsetup_r>:
 80099b8:	b538      	push	{r3, r4, r5, lr}
 80099ba:	4b29      	ldr	r3, [pc, #164]	@ (8009a60 <__swsetup_r+0xa8>)
 80099bc:	4605      	mov	r5, r0
 80099be:	6818      	ldr	r0, [r3, #0]
 80099c0:	460c      	mov	r4, r1
 80099c2:	b118      	cbz	r0, 80099cc <__swsetup_r+0x14>
 80099c4:	6a03      	ldr	r3, [r0, #32]
 80099c6:	b90b      	cbnz	r3, 80099cc <__swsetup_r+0x14>
 80099c8:	f7fd ff5a 	bl	8007880 <__sinit>
 80099cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80099d0:	0719      	lsls	r1, r3, #28
 80099d2:	d422      	bmi.n	8009a1a <__swsetup_r+0x62>
 80099d4:	06da      	lsls	r2, r3, #27
 80099d6:	d407      	bmi.n	80099e8 <__swsetup_r+0x30>
 80099d8:	2209      	movs	r2, #9
 80099da:	602a      	str	r2, [r5, #0]
 80099dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80099e0:	81a3      	strh	r3, [r4, #12]
 80099e2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80099e6:	e033      	b.n	8009a50 <__swsetup_r+0x98>
 80099e8:	0758      	lsls	r0, r3, #29
 80099ea:	d512      	bpl.n	8009a12 <__swsetup_r+0x5a>
 80099ec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80099ee:	b141      	cbz	r1, 8009a02 <__swsetup_r+0x4a>
 80099f0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80099f4:	4299      	cmp	r1, r3
 80099f6:	d002      	beq.n	80099fe <__swsetup_r+0x46>
 80099f8:	4628      	mov	r0, r5
 80099fa:	f7fe ff0d 	bl	8008818 <_free_r>
 80099fe:	2300      	movs	r3, #0
 8009a00:	6363      	str	r3, [r4, #52]	@ 0x34
 8009a02:	89a3      	ldrh	r3, [r4, #12]
 8009a04:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009a08:	81a3      	strh	r3, [r4, #12]
 8009a0a:	2300      	movs	r3, #0
 8009a0c:	6063      	str	r3, [r4, #4]
 8009a0e:	6923      	ldr	r3, [r4, #16]
 8009a10:	6023      	str	r3, [r4, #0]
 8009a12:	89a3      	ldrh	r3, [r4, #12]
 8009a14:	f043 0308 	orr.w	r3, r3, #8
 8009a18:	81a3      	strh	r3, [r4, #12]
 8009a1a:	6923      	ldr	r3, [r4, #16]
 8009a1c:	b94b      	cbnz	r3, 8009a32 <__swsetup_r+0x7a>
 8009a1e:	89a3      	ldrh	r3, [r4, #12]
 8009a20:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009a24:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009a28:	d003      	beq.n	8009a32 <__swsetup_r+0x7a>
 8009a2a:	4621      	mov	r1, r4
 8009a2c:	4628      	mov	r0, r5
 8009a2e:	f000 f883 	bl	8009b38 <__smakebuf_r>
 8009a32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a36:	f013 0201 	ands.w	r2, r3, #1
 8009a3a:	d00a      	beq.n	8009a52 <__swsetup_r+0x9a>
 8009a3c:	2200      	movs	r2, #0
 8009a3e:	60a2      	str	r2, [r4, #8]
 8009a40:	6962      	ldr	r2, [r4, #20]
 8009a42:	4252      	negs	r2, r2
 8009a44:	61a2      	str	r2, [r4, #24]
 8009a46:	6922      	ldr	r2, [r4, #16]
 8009a48:	b942      	cbnz	r2, 8009a5c <__swsetup_r+0xa4>
 8009a4a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009a4e:	d1c5      	bne.n	80099dc <__swsetup_r+0x24>
 8009a50:	bd38      	pop	{r3, r4, r5, pc}
 8009a52:	0799      	lsls	r1, r3, #30
 8009a54:	bf58      	it	pl
 8009a56:	6962      	ldrpl	r2, [r4, #20]
 8009a58:	60a2      	str	r2, [r4, #8]
 8009a5a:	e7f4      	b.n	8009a46 <__swsetup_r+0x8e>
 8009a5c:	2000      	movs	r0, #0
 8009a5e:	e7f7      	b.n	8009a50 <__swsetup_r+0x98>
 8009a60:	2000001c 	.word	0x2000001c

08009a64 <_raise_r>:
 8009a64:	291f      	cmp	r1, #31
 8009a66:	b538      	push	{r3, r4, r5, lr}
 8009a68:	4605      	mov	r5, r0
 8009a6a:	460c      	mov	r4, r1
 8009a6c:	d904      	bls.n	8009a78 <_raise_r+0x14>
 8009a6e:	2316      	movs	r3, #22
 8009a70:	6003      	str	r3, [r0, #0]
 8009a72:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009a76:	bd38      	pop	{r3, r4, r5, pc}
 8009a78:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009a7a:	b112      	cbz	r2, 8009a82 <_raise_r+0x1e>
 8009a7c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009a80:	b94b      	cbnz	r3, 8009a96 <_raise_r+0x32>
 8009a82:	4628      	mov	r0, r5
 8009a84:	f000 f830 	bl	8009ae8 <_getpid_r>
 8009a88:	4622      	mov	r2, r4
 8009a8a:	4601      	mov	r1, r0
 8009a8c:	4628      	mov	r0, r5
 8009a8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009a92:	f000 b817 	b.w	8009ac4 <_kill_r>
 8009a96:	2b01      	cmp	r3, #1
 8009a98:	d00a      	beq.n	8009ab0 <_raise_r+0x4c>
 8009a9a:	1c59      	adds	r1, r3, #1
 8009a9c:	d103      	bne.n	8009aa6 <_raise_r+0x42>
 8009a9e:	2316      	movs	r3, #22
 8009aa0:	6003      	str	r3, [r0, #0]
 8009aa2:	2001      	movs	r0, #1
 8009aa4:	e7e7      	b.n	8009a76 <_raise_r+0x12>
 8009aa6:	2100      	movs	r1, #0
 8009aa8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009aac:	4620      	mov	r0, r4
 8009aae:	4798      	blx	r3
 8009ab0:	2000      	movs	r0, #0
 8009ab2:	e7e0      	b.n	8009a76 <_raise_r+0x12>

08009ab4 <raise>:
 8009ab4:	4b02      	ldr	r3, [pc, #8]	@ (8009ac0 <raise+0xc>)
 8009ab6:	4601      	mov	r1, r0
 8009ab8:	6818      	ldr	r0, [r3, #0]
 8009aba:	f7ff bfd3 	b.w	8009a64 <_raise_r>
 8009abe:	bf00      	nop
 8009ac0:	2000001c 	.word	0x2000001c

08009ac4 <_kill_r>:
 8009ac4:	b538      	push	{r3, r4, r5, lr}
 8009ac6:	4d07      	ldr	r5, [pc, #28]	@ (8009ae4 <_kill_r+0x20>)
 8009ac8:	2300      	movs	r3, #0
 8009aca:	4604      	mov	r4, r0
 8009acc:	4608      	mov	r0, r1
 8009ace:	4611      	mov	r1, r2
 8009ad0:	602b      	str	r3, [r5, #0]
 8009ad2:	f7f8 f9bf 	bl	8001e54 <_kill>
 8009ad6:	1c43      	adds	r3, r0, #1
 8009ad8:	d102      	bne.n	8009ae0 <_kill_r+0x1c>
 8009ada:	682b      	ldr	r3, [r5, #0]
 8009adc:	b103      	cbz	r3, 8009ae0 <_kill_r+0x1c>
 8009ade:	6023      	str	r3, [r4, #0]
 8009ae0:	bd38      	pop	{r3, r4, r5, pc}
 8009ae2:	bf00      	nop
 8009ae4:	2000447c 	.word	0x2000447c

08009ae8 <_getpid_r>:
 8009ae8:	f7f8 b9ac 	b.w	8001e44 <_getpid>

08009aec <__swhatbuf_r>:
 8009aec:	b570      	push	{r4, r5, r6, lr}
 8009aee:	460c      	mov	r4, r1
 8009af0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009af4:	2900      	cmp	r1, #0
 8009af6:	b096      	sub	sp, #88	@ 0x58
 8009af8:	4615      	mov	r5, r2
 8009afa:	461e      	mov	r6, r3
 8009afc:	da0d      	bge.n	8009b1a <__swhatbuf_r+0x2e>
 8009afe:	89a3      	ldrh	r3, [r4, #12]
 8009b00:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009b04:	f04f 0100 	mov.w	r1, #0
 8009b08:	bf14      	ite	ne
 8009b0a:	2340      	movne	r3, #64	@ 0x40
 8009b0c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009b10:	2000      	movs	r0, #0
 8009b12:	6031      	str	r1, [r6, #0]
 8009b14:	602b      	str	r3, [r5, #0]
 8009b16:	b016      	add	sp, #88	@ 0x58
 8009b18:	bd70      	pop	{r4, r5, r6, pc}
 8009b1a:	466a      	mov	r2, sp
 8009b1c:	f000 f848 	bl	8009bb0 <_fstat_r>
 8009b20:	2800      	cmp	r0, #0
 8009b22:	dbec      	blt.n	8009afe <__swhatbuf_r+0x12>
 8009b24:	9901      	ldr	r1, [sp, #4]
 8009b26:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009b2a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009b2e:	4259      	negs	r1, r3
 8009b30:	4159      	adcs	r1, r3
 8009b32:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009b36:	e7eb      	b.n	8009b10 <__swhatbuf_r+0x24>

08009b38 <__smakebuf_r>:
 8009b38:	898b      	ldrh	r3, [r1, #12]
 8009b3a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009b3c:	079d      	lsls	r5, r3, #30
 8009b3e:	4606      	mov	r6, r0
 8009b40:	460c      	mov	r4, r1
 8009b42:	d507      	bpl.n	8009b54 <__smakebuf_r+0x1c>
 8009b44:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009b48:	6023      	str	r3, [r4, #0]
 8009b4a:	6123      	str	r3, [r4, #16]
 8009b4c:	2301      	movs	r3, #1
 8009b4e:	6163      	str	r3, [r4, #20]
 8009b50:	b003      	add	sp, #12
 8009b52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b54:	ab01      	add	r3, sp, #4
 8009b56:	466a      	mov	r2, sp
 8009b58:	f7ff ffc8 	bl	8009aec <__swhatbuf_r>
 8009b5c:	9f00      	ldr	r7, [sp, #0]
 8009b5e:	4605      	mov	r5, r0
 8009b60:	4639      	mov	r1, r7
 8009b62:	4630      	mov	r0, r6
 8009b64:	f7fe fecc 	bl	8008900 <_malloc_r>
 8009b68:	b948      	cbnz	r0, 8009b7e <__smakebuf_r+0x46>
 8009b6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b6e:	059a      	lsls	r2, r3, #22
 8009b70:	d4ee      	bmi.n	8009b50 <__smakebuf_r+0x18>
 8009b72:	f023 0303 	bic.w	r3, r3, #3
 8009b76:	f043 0302 	orr.w	r3, r3, #2
 8009b7a:	81a3      	strh	r3, [r4, #12]
 8009b7c:	e7e2      	b.n	8009b44 <__smakebuf_r+0xc>
 8009b7e:	89a3      	ldrh	r3, [r4, #12]
 8009b80:	6020      	str	r0, [r4, #0]
 8009b82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009b86:	81a3      	strh	r3, [r4, #12]
 8009b88:	9b01      	ldr	r3, [sp, #4]
 8009b8a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009b8e:	b15b      	cbz	r3, 8009ba8 <__smakebuf_r+0x70>
 8009b90:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009b94:	4630      	mov	r0, r6
 8009b96:	f000 f81d 	bl	8009bd4 <_isatty_r>
 8009b9a:	b128      	cbz	r0, 8009ba8 <__smakebuf_r+0x70>
 8009b9c:	89a3      	ldrh	r3, [r4, #12]
 8009b9e:	f023 0303 	bic.w	r3, r3, #3
 8009ba2:	f043 0301 	orr.w	r3, r3, #1
 8009ba6:	81a3      	strh	r3, [r4, #12]
 8009ba8:	89a3      	ldrh	r3, [r4, #12]
 8009baa:	431d      	orrs	r5, r3
 8009bac:	81a5      	strh	r5, [r4, #12]
 8009bae:	e7cf      	b.n	8009b50 <__smakebuf_r+0x18>

08009bb0 <_fstat_r>:
 8009bb0:	b538      	push	{r3, r4, r5, lr}
 8009bb2:	4d07      	ldr	r5, [pc, #28]	@ (8009bd0 <_fstat_r+0x20>)
 8009bb4:	2300      	movs	r3, #0
 8009bb6:	4604      	mov	r4, r0
 8009bb8:	4608      	mov	r0, r1
 8009bba:	4611      	mov	r1, r2
 8009bbc:	602b      	str	r3, [r5, #0]
 8009bbe:	f7f8 f9a9 	bl	8001f14 <_fstat>
 8009bc2:	1c43      	adds	r3, r0, #1
 8009bc4:	d102      	bne.n	8009bcc <_fstat_r+0x1c>
 8009bc6:	682b      	ldr	r3, [r5, #0]
 8009bc8:	b103      	cbz	r3, 8009bcc <_fstat_r+0x1c>
 8009bca:	6023      	str	r3, [r4, #0]
 8009bcc:	bd38      	pop	{r3, r4, r5, pc}
 8009bce:	bf00      	nop
 8009bd0:	2000447c 	.word	0x2000447c

08009bd4 <_isatty_r>:
 8009bd4:	b538      	push	{r3, r4, r5, lr}
 8009bd6:	4d06      	ldr	r5, [pc, #24]	@ (8009bf0 <_isatty_r+0x1c>)
 8009bd8:	2300      	movs	r3, #0
 8009bda:	4604      	mov	r4, r0
 8009bdc:	4608      	mov	r0, r1
 8009bde:	602b      	str	r3, [r5, #0]
 8009be0:	f7f8 f9a8 	bl	8001f34 <_isatty>
 8009be4:	1c43      	adds	r3, r0, #1
 8009be6:	d102      	bne.n	8009bee <_isatty_r+0x1a>
 8009be8:	682b      	ldr	r3, [r5, #0]
 8009bea:	b103      	cbz	r3, 8009bee <_isatty_r+0x1a>
 8009bec:	6023      	str	r3, [r4, #0]
 8009bee:	bd38      	pop	{r3, r4, r5, pc}
 8009bf0:	2000447c 	.word	0x2000447c

08009bf4 <_init>:
 8009bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bf6:	bf00      	nop
 8009bf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009bfa:	bc08      	pop	{r3}
 8009bfc:	469e      	mov	lr, r3
 8009bfe:	4770      	bx	lr

08009c00 <_fini>:
 8009c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c02:	bf00      	nop
 8009c04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c06:	bc08      	pop	{r3}
 8009c08:	469e      	mov	lr, r3
 8009c0a:	4770      	bx	lr
